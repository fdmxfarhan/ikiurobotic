
arm-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080034cc  080034cc  000134cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003504  08003504  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003504  08003504  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003504  08003504  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003504  08003504  00013504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003508  08003508  00013508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800350c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  08003518  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08003518  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000756f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ba  00000000  00000000  000275a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  00028e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  00029650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017571  00000000  00000000  00029da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c0d  00000000  00000000  00041319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086fc8  00000000  00000000  00049f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0eee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001efc  00000000  00000000  000d0f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080034b4 	.word	0x080034b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080034b4 	.word	0x080034b4

0800014c <delay>:
uint8_t Rx2_Buff[RX2_Size];


uint16_t step_sens;

void delay(int min){
 800014c:	b490      	push	{r4, r7}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	for(register int i=0; i<min*3000; i++);
 8000154:	2400      	movs	r4, #0
 8000156:	e000      	b.n	800015a <delay+0xe>
 8000158:	3401      	adds	r4, #1
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000160:	fb02 f303 	mul.w	r3, r2, r3
 8000164:	429c      	cmp	r4, r3
 8000166:	dbf7      	blt.n	8000158 <delay+0xc>
}
 8000168:	bf00      	nop
 800016a:	bf00      	nop
 800016c:	3708      	adds	r7, #8
 800016e:	46bd      	mov	sp, r7
 8000170:	bc90      	pop	{r4, r7}
 8000172:	4770      	bx	lr

08000174 <update_sens>:
void update_sens(){
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000178:	4808      	ldr	r0, [pc, #32]	; (800019c <update_sens+0x28>)
 800017a:	f000 fdb7 	bl	8000cec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800017e:	f04f 31ff 	mov.w	r1, #4294967295
 8000182:	4806      	ldr	r0, [pc, #24]	; (800019c <update_sens+0x28>)
 8000184:	f000 fe60 	bl	8000e48 <HAL_ADC_PollForConversion>
	step_sens = HAL_ADC_GetValue(&hadc1);
 8000188:	4804      	ldr	r0, [pc, #16]	; (800019c <update_sens+0x28>)
 800018a:	f000 ff63 	bl	8001054 <HAL_ADC_GetValue>
 800018e:	4603      	mov	r3, r0
 8000190:	b29a      	uxth	r2, r3
 8000192:	4b03      	ldr	r3, [pc, #12]	; (80001a0 <update_sens+0x2c>)
 8000194:	801a      	strh	r2, [r3, #0]
}
 8000196:	bf00      	nop
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	20000028 	.word	0x20000028
 80001a0:	200000e6 	.word	0x200000e6

080001a4 <set_step_front>:
void set_step_front(){
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80001a8:	2200      	movs	r2, #0
 80001aa:	2140      	movs	r1, #64	; 0x40
 80001ac:	4811      	ldr	r0, [pc, #68]	; (80001f4 <set_step_front+0x50>)
 80001ae:	f001 fe21 	bl	8001df4 <HAL_GPIO_WritePin>
	update_sens();
 80001b2:	f7ff ffdf 	bl	8000174 <update_sens>
	while(step_sens > 75){
 80001b6:	e011      	b.n	80001dc <set_step_front+0x38>
		update_sens();
 80001b8:	f7ff ffdc 	bl	8000174 <update_sens>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80001bc:	2201      	movs	r2, #1
 80001be:	2110      	movs	r1, #16
 80001c0:	480c      	ldr	r0, [pc, #48]	; (80001f4 <set_step_front+0x50>)
 80001c2:	f001 fe17 	bl	8001df4 <HAL_GPIO_WritePin>
		delay(10);
 80001c6:	200a      	movs	r0, #10
 80001c8:	f7ff ffc0 	bl	800014c <delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2110      	movs	r1, #16
 80001d0:	4808      	ldr	r0, [pc, #32]	; (80001f4 <set_step_front+0x50>)
 80001d2:	f001 fe0f 	bl	8001df4 <HAL_GPIO_WritePin>
		delay(10);
 80001d6:	200a      	movs	r0, #10
 80001d8:	f7ff ffb8 	bl	800014c <delay>
	while(step_sens > 75){
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <set_step_front+0x54>)
 80001de:	881b      	ldrh	r3, [r3, #0]
 80001e0:	2b4b      	cmp	r3, #75	; 0x4b
 80001e2:	d8e9      	bhi.n	80001b8 <set_step_front+0x14>
    }
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80001e4:	2201      	movs	r2, #1
 80001e6:	2140      	movs	r1, #64	; 0x40
 80001e8:	4802      	ldr	r0, [pc, #8]	; (80001f4 <set_step_front+0x50>)
 80001ea:	f001 fe03 	bl	8001df4 <HAL_GPIO_WritePin>

}
 80001ee:	bf00      	nop
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	40010800 	.word	0x40010800
 80001f8:	200000e6 	.word	0x200000e6

080001fc <rotate_arm1>:
void rotate_arm1(int dir, int pull){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, dir);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	b2db      	uxtb	r3, r3
 800020a:	461a      	mov	r2, r3
 800020c:	2120      	movs	r1, #32
 800020e:	4815      	ldr	r0, [pc, #84]	; (8000264 <rotate_arm1+0x68>)
 8000210:	f001 fdf0 	bl	8001df4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000214:	2200      	movs	r2, #0
 8000216:	2140      	movs	r1, #64	; 0x40
 8000218:	4812      	ldr	r0, [pc, #72]	; (8000264 <rotate_arm1+0x68>)
 800021a:	f001 fdeb 	bl	8001df4 <HAL_GPIO_WritePin>
	for(int i=0; i<pull; i++){
 800021e:	2300      	movs	r3, #0
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	e012      	b.n	800024a <rotate_arm1+0x4e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000224:	2201      	movs	r2, #1
 8000226:	2110      	movs	r1, #16
 8000228:	480e      	ldr	r0, [pc, #56]	; (8000264 <rotate_arm1+0x68>)
 800022a:	f001 fde3 	bl	8001df4 <HAL_GPIO_WritePin>
		delay(10);
 800022e:	200a      	movs	r0, #10
 8000230:	f7ff ff8c 	bl	800014c <delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000234:	2200      	movs	r2, #0
 8000236:	2110      	movs	r1, #16
 8000238:	480a      	ldr	r0, [pc, #40]	; (8000264 <rotate_arm1+0x68>)
 800023a:	f001 fddb 	bl	8001df4 <HAL_GPIO_WritePin>
		delay(10);
 800023e:	200a      	movs	r0, #10
 8000240:	f7ff ff84 	bl	800014c <delay>
	for(int i=0; i<pull; i++){
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	3301      	adds	r3, #1
 8000248:	60fb      	str	r3, [r7, #12]
 800024a:	68fa      	ldr	r2, [r7, #12]
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	429a      	cmp	r2, r3
 8000250:	dbe8      	blt.n	8000224 <rotate_arm1+0x28>
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000252:	2201      	movs	r2, #1
 8000254:	2140      	movs	r1, #64	; 0x40
 8000256:	4803      	ldr	r0, [pc, #12]	; (8000264 <rotate_arm1+0x68>)
 8000258:	f001 fdcc 	bl	8001df4 <HAL_GPIO_WritePin>
}
 800025c:	bf00      	nop
 800025e:	3710      	adds	r7, #16
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40010800 	.word	0x40010800

08000268 <rotate_arm2>:
void rotate_arm2(int dir){
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	if(dir == 0){
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d10c      	bne.n	8000290 <rotate_arm2+0x28>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000276:	2201      	movs	r2, #1
 8000278:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800027c:	4816      	ldr	r0, [pc, #88]	; (80002d8 <rotate_arm2+0x70>)
 800027e:	f001 fdb9 	bl	8001df4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000282:	2200      	movs	r2, #0
 8000284:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000288:	4813      	ldr	r0, [pc, #76]	; (80002d8 <rotate_arm2+0x70>)
 800028a:	f001 fdb3 	bl	8001df4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
	} else if(dir == 2){
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
	}
}
 800028e:	e01e      	b.n	80002ce <rotate_arm2+0x66>
	} else if(dir == 1){
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d10c      	bne.n	80002b0 <rotate_arm2+0x48>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000296:	2200      	movs	r2, #0
 8000298:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800029c:	480e      	ldr	r0, [pc, #56]	; (80002d8 <rotate_arm2+0x70>)
 800029e:	f001 fda9 	bl	8001df4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80002a2:	2201      	movs	r2, #1
 80002a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a8:	480b      	ldr	r0, [pc, #44]	; (80002d8 <rotate_arm2+0x70>)
 80002aa:	f001 fda3 	bl	8001df4 <HAL_GPIO_WritePin>
}
 80002ae:	e00e      	b.n	80002ce <rotate_arm2+0x66>
	} else if(dir == 2){
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2b02      	cmp	r3, #2
 80002b4:	d10b      	bne.n	80002ce <rotate_arm2+0x66>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002bc:	4806      	ldr	r0, [pc, #24]	; (80002d8 <rotate_arm2+0x70>)
 80002be:	f001 fd99 	bl	8001df4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <rotate_arm2+0x70>)
 80002ca:	f001 fd93 	bl	8001df4 <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40010c00 	.word	0x40010c00

080002dc <rotate_arm3>:
void rotate_arm3(int dir){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	if(dir == 0){
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d10c      	bne.n	8000304 <rotate_arm3+0x28>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80002ea:	2201      	movs	r2, #1
 80002ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002f0:	4816      	ldr	r0, [pc, #88]	; (800034c <rotate_arm3+0x70>)
 80002f2:	f001 fd7f 	bl	8001df4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80002f6:	2200      	movs	r2, #0
 80002f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002fc:	4813      	ldr	r0, [pc, #76]	; (800034c <rotate_arm3+0x70>)
 80002fe:	f001 fd79 	bl	8001df4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
	} else if(dir == 2){
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
	}
}
 8000302:	e01e      	b.n	8000342 <rotate_arm3+0x66>
	} else if(dir == 1){
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d10c      	bne.n	8000324 <rotate_arm3+0x48>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 800030a:	2200      	movs	r2, #0
 800030c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000310:	480e      	ldr	r0, [pc, #56]	; (800034c <rotate_arm3+0x70>)
 8000312:	f001 fd6f 	bl	8001df4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000316:	2201      	movs	r2, #1
 8000318:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800031c:	480b      	ldr	r0, [pc, #44]	; (800034c <rotate_arm3+0x70>)
 800031e:	f001 fd69 	bl	8001df4 <HAL_GPIO_WritePin>
}
 8000322:	e00e      	b.n	8000342 <rotate_arm3+0x66>
	} else if(dir == 2){
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2b02      	cmp	r3, #2
 8000328:	d10b      	bne.n	8000342 <rotate_arm3+0x66>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 800032a:	2200      	movs	r2, #0
 800032c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000330:	4806      	ldr	r0, [pc, #24]	; (800034c <rotate_arm3+0x70>)
 8000332:	f001 fd5f 	bl	8001df4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000336:	2200      	movs	r2, #0
 8000338:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800033c:	4803      	ldr	r0, [pc, #12]	; (800034c <rotate_arm3+0x70>)
 800033e:	f001 fd59 	bl	8001df4 <HAL_GPIO_WritePin>
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40010c00 	.word	0x40010c00

08000350 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	807b      	strh	r3, [r7, #2]
	LED_ON;
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000362:	4828      	ldr	r0, [pc, #160]	; (8000404 <HAL_UARTEx_RxEventCallback+0xb4>)
 8000364:	f001 fd46 	bl	8001df4 <HAL_GPIO_WritePin>
	if(huart->Instance == USART2){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a26      	ldr	r2, [pc, #152]	; (8000408 <HAL_UARTEx_RxEventCallback+0xb8>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d143      	bne.n	80003fa <HAL_UARTEx_RxEventCallback+0xaa>
		if(Rx2_Buff[0] == 'A' && Rx2_Buff[1] == '1'){
 8000372:	4b26      	ldr	r3, [pc, #152]	; (800040c <HAL_UARTEx_RxEventCallback+0xbc>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b41      	cmp	r3, #65	; 0x41
 8000378:	d10c      	bne.n	8000394 <HAL_UARTEx_RxEventCallback+0x44>
 800037a:	4b24      	ldr	r3, [pc, #144]	; (800040c <HAL_UARTEx_RxEventCallback+0xbc>)
 800037c:	785b      	ldrb	r3, [r3, #1]
 800037e:	2b31      	cmp	r3, #49	; 0x31
 8000380:	d108      	bne.n	8000394 <HAL_UARTEx_RxEventCallback+0x44>
			rotate_arm1(Rx2_Buff[2] - '0', Rx2_Buff[3]);// | (Rx2_Buff[4] << 8));
 8000382:	4b22      	ldr	r3, [pc, #136]	; (800040c <HAL_UARTEx_RxEventCallback+0xbc>)
 8000384:	789b      	ldrb	r3, [r3, #2]
 8000386:	3b30      	subs	r3, #48	; 0x30
 8000388:	4a20      	ldr	r2, [pc, #128]	; (800040c <HAL_UARTEx_RxEventCallback+0xbc>)
 800038a:	78d2      	ldrb	r2, [r2, #3]
 800038c:	4611      	mov	r1, r2
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ff34 	bl	80001fc <rotate_arm1>
		}
		if(Rx2_Buff[0] == 'A' && Rx2_Buff[1] == '2'){
 8000394:	4b1d      	ldr	r3, [pc, #116]	; (800040c <HAL_UARTEx_RxEventCallback+0xbc>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b41      	cmp	r3, #65	; 0x41
 800039a:	d109      	bne.n	80003b0 <HAL_UARTEx_RxEventCallback+0x60>
 800039c:	4b1b      	ldr	r3, [pc, #108]	; (800040c <HAL_UARTEx_RxEventCallback+0xbc>)
 800039e:	785b      	ldrb	r3, [r3, #1]
 80003a0:	2b32      	cmp	r3, #50	; 0x32
 80003a2:	d105      	bne.n	80003b0 <HAL_UARTEx_RxEventCallback+0x60>
			rotate_arm2(Rx2_Buff[2] - '0');
 80003a4:	4b19      	ldr	r3, [pc, #100]	; (800040c <HAL_UARTEx_RxEventCallback+0xbc>)
 80003a6:	789b      	ldrb	r3, [r3, #2]
 80003a8:	3b30      	subs	r3, #48	; 0x30
 80003aa:	4618      	mov	r0, r3
 80003ac:	f7ff ff5c 	bl	8000268 <rotate_arm2>
		}
		if(Rx2_Buff[0] == 'A' && Rx2_Buff[1] == '3'){
 80003b0:	4b16      	ldr	r3, [pc, #88]	; (800040c <HAL_UARTEx_RxEventCallback+0xbc>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b41      	cmp	r3, #65	; 0x41
 80003b6:	d109      	bne.n	80003cc <HAL_UARTEx_RxEventCallback+0x7c>
 80003b8:	4b14      	ldr	r3, [pc, #80]	; (800040c <HAL_UARTEx_RxEventCallback+0xbc>)
 80003ba:	785b      	ldrb	r3, [r3, #1]
 80003bc:	2b33      	cmp	r3, #51	; 0x33
 80003be:	d105      	bne.n	80003cc <HAL_UARTEx_RxEventCallback+0x7c>
			rotate_arm3(Rx2_Buff[2] - '0');
 80003c0:	4b12      	ldr	r3, [pc, #72]	; (800040c <HAL_UARTEx_RxEventCallback+0xbc>)
 80003c2:	789b      	ldrb	r3, [r3, #2]
 80003c4:	3b30      	subs	r3, #48	; 0x30
 80003c6:	4618      	mov	r0, r3
 80003c8:	f7ff ff88 	bl	80002dc <rotate_arm3>
		}
		if(Rx2_Buff[0] == 'S' && Rx2_Buff[1] == 'T'){
 80003cc:	4b0f      	ldr	r3, [pc, #60]	; (800040c <HAL_UARTEx_RxEventCallback+0xbc>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b53      	cmp	r3, #83	; 0x53
 80003d2:	d105      	bne.n	80003e0 <HAL_UARTEx_RxEventCallback+0x90>
 80003d4:	4b0d      	ldr	r3, [pc, #52]	; (800040c <HAL_UARTEx_RxEventCallback+0xbc>)
 80003d6:	785b      	ldrb	r3, [r3, #1]
 80003d8:	2b54      	cmp	r3, #84	; 0x54
 80003da:	d101      	bne.n	80003e0 <HAL_UARTEx_RxEventCallback+0x90>
			set_step_front();
 80003dc:	f7ff fee2 	bl	80001a4 <set_step_front>
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx2_Buff, RX2_Size);
 80003e0:	2205      	movs	r2, #5
 80003e2:	490a      	ldr	r1, [pc, #40]	; (800040c <HAL_UARTEx_RxEventCallback+0xbc>)
 80003e4:	480a      	ldr	r0, [pc, #40]	; (8000410 <HAL_UARTEx_RxEventCallback+0xc0>)
 80003e6:	f002 fb14 	bl	8002a12 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80003ea:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <HAL_UARTEx_RxEventCallback+0xc4>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	4b08      	ldr	r3, [pc, #32]	; (8000414 <HAL_UARTEx_RxEventCallback+0xc4>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f022 0204 	bic.w	r2, r2, #4
 80003f8:	601a      	str	r2, [r3, #0]
	}
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40011000 	.word	0x40011000
 8000408:	40004400 	.word	0x40004400
 800040c:	200000e0 	.word	0x200000e0
 8000410:	20000058 	.word	0x20000058
 8000414:	2000009c 	.word	0x2000009c

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041e:	f000 fb07 	bl	8000a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000422:	f000 f83f 	bl	80004a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000426:	f000 f91d 	bl	8000664 <MX_GPIO_Init>
  MX_DMA_Init();
 800042a:	f000 f8fd 	bl	8000628 <MX_DMA_Init>
  MX_ADC1_Init();
 800042e:	f000 f893 	bl	8000558 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000432:	f000 f8cf 	bl	80005d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


//  set_step();
  for(int i=0; i<5; i++){
 8000436:	2300      	movs	r3, #0
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	e00a      	b.n	8000452 <main+0x3a>
  	  HAL_Delay(100);
 800043c:	2064      	movs	r0, #100	; 0x64
 800043e:	f000 fb59 	bl	8000af4 <HAL_Delay>
  	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000442:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000446:	4812      	ldr	r0, [pc, #72]	; (8000490 <main+0x78>)
 8000448:	f001 fcec 	bl	8001e24 <HAL_GPIO_TogglePin>
  for(int i=0; i<5; i++){
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3301      	adds	r3, #1
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2b04      	cmp	r3, #4
 8000456:	ddf1      	ble.n	800043c <main+0x24>
  }

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx2_Buff, RX2_Size);
 8000458:	2205      	movs	r2, #5
 800045a:	490e      	ldr	r1, [pc, #56]	; (8000494 <main+0x7c>)
 800045c:	480e      	ldr	r0, [pc, #56]	; (8000498 <main+0x80>)
 800045e:	f002 fad8 	bl	8002a12 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <main+0x84>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <main+0x84>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f022 0204 	bic.w	r2, r2, #4
 8000470:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000472:	2201      	movs	r2, #1
 8000474:	2140      	movs	r1, #64	; 0x40
 8000476:	480a      	ldr	r0, [pc, #40]	; (80004a0 <main+0x88>)
 8000478:	f001 fcbc 	bl	8001df4 <HAL_GPIO_WritePin>
  LED_OFF;
 800047c:	2201      	movs	r2, #1
 800047e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000482:	4803      	ldr	r0, [pc, #12]	; (8000490 <main+0x78>)
 8000484:	f001 fcb6 	bl	8001df4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  update_sens();
 8000488:	f7ff fe74 	bl	8000174 <update_sens>
 800048c:	e7fc      	b.n	8000488 <main+0x70>
 800048e:	bf00      	nop
 8000490:	40011000 	.word	0x40011000
 8000494:	200000e0 	.word	0x200000e0
 8000498:	20000058 	.word	0x20000058
 800049c:	2000009c 	.word	0x2000009c
 80004a0:	40010800 	.word	0x40010800

080004a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b094      	sub	sp, #80	; 0x50
 80004a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ae:	2228      	movs	r2, #40	; 0x28
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f002 fff6 	bl	80034a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b8:	f107 0314 	add.w	r3, r7, #20
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
 80004c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004d4:	2301      	movs	r3, #1
 80004d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e2:	2301      	movs	r3, #1
 80004e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e6:	2302      	movs	r3, #2
 80004e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80004f0:	2300      	movs	r3, #0
 80004f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004f8:	4618      	mov	r0, r3
 80004fa:	f001 fcad 	bl	8001e58 <HAL_RCC_OscConfig>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000504:	f000 f93c 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000508:	230f      	movs	r3, #15
 800050a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800050c:	2302      	movs	r3, #2
 800050e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000510:	2300      	movs	r3, #0
 8000512:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000518:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800051a:	2300      	movs	r3, #0
 800051c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2100      	movs	r1, #0
 8000524:	4618      	mov	r0, r3
 8000526:	f001 ff19 	bl	800235c <HAL_RCC_ClockConfig>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000530:	f000 f926 	bl	8000780 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000534:	2302      	movs	r3, #2
 8000536:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	4618      	mov	r0, r3
 8000540:	f002 f8a4 	bl	800268c <HAL_RCCEx_PeriphCLKConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800054a:	f000 f919 	bl	8000780 <Error_Handler>
  }
}
 800054e:	bf00      	nop
 8000550:	3750      	adds	r7, #80	; 0x50
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000568:	4b18      	ldr	r3, [pc, #96]	; (80005cc <MX_ADC1_Init+0x74>)
 800056a:	4a19      	ldr	r2, [pc, #100]	; (80005d0 <MX_ADC1_Init+0x78>)
 800056c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_ADC1_Init+0x74>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_ADC1_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_ADC1_Init+0x74>)
 800057c:	2200      	movs	r2, #0
 800057e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_ADC1_Init+0x74>)
 8000582:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000586:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <MX_ADC1_Init+0x74>)
 800058a:	2200      	movs	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_ADC1_Init+0x74>)
 8000590:	2201      	movs	r2, #1
 8000592:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000594:	480d      	ldr	r0, [pc, #52]	; (80005cc <MX_ADC1_Init+0x74>)
 8000596:	f000 fad1 	bl	8000b3c <HAL_ADC_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80005a0:	f000 f8ee 	bl	8000780 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005a4:	2308      	movs	r3, #8
 80005a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a8:	2301      	movs	r3, #1
 80005aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	4619      	mov	r1, r3
 80005b4:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_ADC1_Init+0x74>)
 80005b6:	f000 fd59 	bl	800106c <HAL_ADC_ConfigChannel>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80005c0:	f000 f8de 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000028 	.word	0x20000028
 80005d0:	40012400 	.word	0x40012400

080005d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_USART2_UART_Init+0x4c>)
 80005da:	4a12      	ldr	r2, [pc, #72]	; (8000624 <MX_USART2_UART_Init+0x50>)
 80005dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <MX_USART2_UART_Init+0x4c>)
 80005e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_USART2_UART_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_USART2_UART_Init+0x4c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <MX_USART2_UART_Init+0x4c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_USART2_UART_Init+0x4c>)
 80005fa:	220c      	movs	r2, #12
 80005fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <MX_USART2_UART_Init+0x4c>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_USART2_UART_Init+0x4c>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_USART2_UART_Init+0x4c>)
 800060c:	f002 f9b4 	bl	8002978 <HAL_UART_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000616:	f000 f8b3 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000058 	.word	0x20000058
 8000624:	40004400 	.word	0x40004400

08000628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_DMA_Init+0x38>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <MX_DMA_Init+0x38>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6153      	str	r3, [r2, #20]
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_DMA_Init+0x38>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	2010      	movs	r0, #16
 800064c:	f000 ff79 	bl	8001542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000650:	2010      	movs	r0, #16
 8000652:	f000 ff92 	bl	800157a <HAL_NVIC_EnableIRQ>

}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000678:	4b3d      	ldr	r3, [pc, #244]	; (8000770 <MX_GPIO_Init+0x10c>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a3c      	ldr	r2, [pc, #240]	; (8000770 <MX_GPIO_Init+0x10c>)
 800067e:	f043 0310 	orr.w	r3, r3, #16
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b3a      	ldr	r3, [pc, #232]	; (8000770 <MX_GPIO_Init+0x10c>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0310 	and.w	r3, r3, #16
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000690:	4b37      	ldr	r3, [pc, #220]	; (8000770 <MX_GPIO_Init+0x10c>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a36      	ldr	r2, [pc, #216]	; (8000770 <MX_GPIO_Init+0x10c>)
 8000696:	f043 0320 	orr.w	r3, r3, #32
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b34      	ldr	r3, [pc, #208]	; (8000770 <MX_GPIO_Init+0x10c>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0320 	and.w	r3, r3, #32
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	4b31      	ldr	r3, [pc, #196]	; (8000770 <MX_GPIO_Init+0x10c>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a30      	ldr	r2, [pc, #192]	; (8000770 <MX_GPIO_Init+0x10c>)
 80006ae:	f043 0304 	orr.w	r3, r3, #4
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b2e      	ldr	r3, [pc, #184]	; (8000770 <MX_GPIO_Init+0x10c>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0304 	and.w	r3, r3, #4
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c0:	4b2b      	ldr	r3, [pc, #172]	; (8000770 <MX_GPIO_Init+0x10c>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a2a      	ldr	r2, [pc, #168]	; (8000770 <MX_GPIO_Init+0x10c>)
 80006c6:	f043 0308 	orr.w	r3, r3, #8
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <MX_GPIO_Init+0x10c>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0308 	and.w	r3, r3, #8
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006de:	4825      	ldr	r0, [pc, #148]	; (8000774 <MX_GPIO_Init+0x110>)
 80006e0:	f001 fb88 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2170      	movs	r1, #112	; 0x70
 80006e8:	4823      	ldr	r0, [pc, #140]	; (8000778 <MX_GPIO_Init+0x114>)
 80006ea:	f001 fb83 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006f4:	4821      	ldr	r0, [pc, #132]	; (800077c <MX_GPIO_Init+0x118>)
 80006f6:	f001 fb7d 	bl	8001df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2302      	movs	r3, #2
 800070a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	4818      	ldr	r0, [pc, #96]	; (8000774 <MX_GPIO_Init+0x110>)
 8000714:	f001 f9ea 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000718:	2370      	movs	r3, #112	; 0x70
 800071a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2302      	movs	r3, #2
 8000726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4619      	mov	r1, r3
 800072e:	4812      	ldr	r0, [pc, #72]	; (8000778 <MX_GPIO_Init+0x114>)
 8000730:	f001 f9dc 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000734:	2301      	movs	r3, #1
 8000736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000738:	2303      	movs	r3, #3
 800073a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4619      	mov	r1, r3
 8000742:	480e      	ldr	r0, [pc, #56]	; (800077c <MX_GPIO_Init+0x118>)
 8000744:	f001 f9d2 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000748:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800074c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2302      	movs	r3, #2
 8000758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	4619      	mov	r1, r3
 8000760:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_GPIO_Init+0x118>)
 8000762:	f001 f9c3 	bl	8001aec <HAL_GPIO_Init>

}
 8000766:	bf00      	nop
 8000768:	3720      	adds	r7, #32
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000
 8000774:	40011000 	.word	0x40011000
 8000778:	40010800 	.word	0x40010800
 800077c:	40010c00 	.word	0x40010c00

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	e7fe      	b.n	8000788 <Error_Handler+0x8>
	...

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <HAL_MspInit+0x5c>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <HAL_MspInit+0x5c>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6193      	str	r3, [r2, #24]
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_MspInit+0x5c>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_MspInit+0x5c>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HAL_MspInit+0x5c>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	61d3      	str	r3, [r2, #28]
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_MspInit+0x5c>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <HAL_MspInit+0x60>)
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	4a04      	ldr	r2, [pc, #16]	; (80007ec <HAL_MspInit+0x60>)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40010000 	.word	0x40010000

080007f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a14      	ldr	r2, [pc, #80]	; (800085c <HAL_ADC_MspInit+0x6c>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d121      	bne.n	8000854 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <HAL_ADC_MspInit+0x70>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a12      	ldr	r2, [pc, #72]	; (8000860 <HAL_ADC_MspInit+0x70>)
 8000816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <HAL_ADC_MspInit+0x70>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <HAL_ADC_MspInit+0x70>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <HAL_ADC_MspInit+0x70>)
 800082e:	f043 0308 	orr.w	r3, r3, #8
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <HAL_ADC_MspInit+0x70>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0308 	and.w	r3, r3, #8
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000840:	2301      	movs	r3, #1
 8000842:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000844:	2303      	movs	r3, #3
 8000846:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <HAL_ADC_MspInit+0x74>)
 8000850:	f001 f94c 	bl	8001aec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000854:	bf00      	nop
 8000856:	3720      	adds	r7, #32
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40012400 	.word	0x40012400
 8000860:	40021000 	.word	0x40021000
 8000864:	40010c00 	.word	0x40010c00

08000868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a32      	ldr	r2, [pc, #200]	; (800094c <HAL_UART_MspInit+0xe4>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d15d      	bne.n	8000944 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000888:	4b31      	ldr	r3, [pc, #196]	; (8000950 <HAL_UART_MspInit+0xe8>)
 800088a:	69db      	ldr	r3, [r3, #28]
 800088c:	4a30      	ldr	r2, [pc, #192]	; (8000950 <HAL_UART_MspInit+0xe8>)
 800088e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000892:	61d3      	str	r3, [r2, #28]
 8000894:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <HAL_UART_MspInit+0xe8>)
 8000896:	69db      	ldr	r3, [r3, #28]
 8000898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <HAL_UART_MspInit+0xe8>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a2a      	ldr	r2, [pc, #168]	; (8000950 <HAL_UART_MspInit+0xe8>)
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b28      	ldr	r3, [pc, #160]	; (8000950 <HAL_UART_MspInit+0xe8>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008b8:	2304      	movs	r3, #4
 80008ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4619      	mov	r1, r3
 80008ca:	4822      	ldr	r0, [pc, #136]	; (8000954 <HAL_UART_MspInit+0xec>)
 80008cc:	f001 f90e 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008d0:	2308      	movs	r3, #8
 80008d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	4619      	mov	r1, r3
 80008e2:	481c      	ldr	r0, [pc, #112]	; (8000954 <HAL_UART_MspInit+0xec>)
 80008e4:	f001 f902 	bl	8001aec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <HAL_UART_MspInit+0xf0>)
 80008ea:	4a1c      	ldr	r2, [pc, #112]	; (800095c <HAL_UART_MspInit+0xf4>)
 80008ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <HAL_UART_MspInit+0xf0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <HAL_UART_MspInit+0xf0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <HAL_UART_MspInit+0xf0>)
 80008fc:	2280      	movs	r2, #128	; 0x80
 80008fe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <HAL_UART_MspInit+0xf0>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <HAL_UART_MspInit+0xf0>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_UART_MspInit+0xf0>)
 800090e:	2200      	movs	r2, #0
 8000910:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000912:	4b11      	ldr	r3, [pc, #68]	; (8000958 <HAL_UART_MspInit+0xf0>)
 8000914:	2200      	movs	r2, #0
 8000916:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000918:	480f      	ldr	r0, [pc, #60]	; (8000958 <HAL_UART_MspInit+0xf0>)
 800091a:	f000 fe49 	bl	80015b0 <HAL_DMA_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000924:	f7ff ff2c 	bl	8000780 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <HAL_UART_MspInit+0xf0>)
 800092c:	639a      	str	r2, [r3, #56]	; 0x38
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <HAL_UART_MspInit+0xf0>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	2026      	movs	r0, #38	; 0x26
 800093a:	f000 fe02 	bl	8001542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800093e:	2026      	movs	r0, #38	; 0x26
 8000940:	f000 fe1b 	bl	800157a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40004400 	.word	0x40004400
 8000950:	40021000 	.word	0x40021000
 8000954:	40010800 	.word	0x40010800
 8000958:	2000009c 	.word	0x2000009c
 800095c:	4002006c 	.word	0x4002006c

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <NMI_Handler+0x4>

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <MemManage_Handler+0x4>

08000972 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <UsageFault_Handler+0x4>

0800097e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr

0800098a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr

08000996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr

080009a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a6:	f000 f889 	bl	8000abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <DMA1_Channel6_IRQHandler+0x10>)
 80009b6:	f000 ff65 	bl	8001884 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000009c 	.word	0x2000009c

080009c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <USART2_IRQHandler+0x10>)
 80009ca:	f002 f871 	bl	8002ab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000058 	.word	0x20000058

080009d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009e6:	490d      	ldr	r1, [pc, #52]	; (8000a1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009e8:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009fc:	4c0a      	ldr	r4, [pc, #40]	; (8000a28 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a0a:	f7ff ffe5 	bl	80009d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f002 fd25 	bl	800345c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a12:	f7ff fd01 	bl	8000418 <main>
  bx lr
 8000a16:	4770      	bx	lr
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a20:	0800350c 	.word	0x0800350c
  ldr r2, =_sbss
 8000a24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a28:	200000ec 	.word	0x200000ec

08000a2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC1_2_IRQHandler>
	...

08000a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_Init+0x28>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_Init+0x28>)
 8000a3a:	f043 0310 	orr.w	r3, r3, #16
 8000a3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 fd73 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a46:	200f      	movs	r0, #15
 8000a48:	f000 f808 	bl	8000a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a4c:	f7ff fe9e 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40022000 	.word	0x40022000

08000a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_InitTick+0x54>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_InitTick+0x58>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 fd8b 	bl	8001596 <HAL_SYSTICK_Config>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00e      	b.n	8000aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b0f      	cmp	r3, #15
 8000a8e:	d80a      	bhi.n	8000aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a90:	2200      	movs	r2, #0
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	f000 fd53 	bl	8001542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a9c:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <HAL_InitTick+0x5c>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e000      	b.n	8000aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000004 	.word	0x20000004

08000abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_IncTick+0x1c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_IncTick+0x20>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a03      	ldr	r2, [pc, #12]	; (8000adc <HAL_IncTick+0x20>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	200000e8 	.word	0x200000e8

08000ae0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b02      	ldr	r3, [pc, #8]	; (8000af0 <HAL_GetTick+0x10>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	200000e8 	.word	0x200000e8

08000af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000afc:	f7ff fff0 	bl	8000ae0 <HAL_GetTick>
 8000b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0c:	d005      	beq.n	8000b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_Delay+0x44>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b1a:	bf00      	nop
 8000b1c:	f7ff ffe0 	bl	8000ae0 <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d8f7      	bhi.n	8000b1c <HAL_Delay+0x28>
  {
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008

08000b3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d101      	bne.n	8000b5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e0be      	b.n	8000cdc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d109      	bne.n	8000b80 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff fe38 	bl	80007f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 fbc5 	bl	8001310 <ADC_ConversionStop_Disable>
 8000b86:	4603      	mov	r3, r0
 8000b88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8e:	f003 0310 	and.w	r3, r3, #16
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f040 8099 	bne.w	8000cca <HAL_ADC_Init+0x18e>
 8000b98:	7dfb      	ldrb	r3, [r7, #23]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f040 8095 	bne.w	8000cca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ba8:	f023 0302 	bic.w	r3, r3, #2
 8000bac:	f043 0202 	orr.w	r2, r3, #2
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bbc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	7b1b      	ldrb	r3, [r3, #12]
 8000bc2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bc4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bd4:	d003      	beq.n	8000bde <HAL_ADC_Init+0xa2>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d102      	bne.n	8000be4 <HAL_ADC_Init+0xa8>
 8000bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be2:	e000      	b.n	8000be6 <HAL_ADC_Init+0xaa>
 8000be4:	2300      	movs	r3, #0
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	7d1b      	ldrb	r3, [r3, #20]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d119      	bne.n	8000c28 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7b1b      	ldrb	r3, [r3, #12]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d109      	bne.n	8000c10 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	035a      	lsls	r2, r3, #13
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	e00b      	b.n	8000c28 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c14:	f043 0220 	orr.w	r2, r3, #32
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c20:	f043 0201 	orr.w	r2, r3, #1
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <HAL_ADC_Init+0x1a8>)
 8000c44:	4013      	ands	r3, r2
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	6812      	ldr	r2, [r2, #0]
 8000c4a:	68b9      	ldr	r1, [r7, #8]
 8000c4c:	430b      	orrs	r3, r1
 8000c4e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c58:	d003      	beq.n	8000c62 <HAL_ADC_Init+0x126>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d104      	bne.n	8000c6c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	051b      	lsls	r3, r3, #20
 8000c6a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c72:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_ADC_Init+0x1ac>)
 8000c88:	4013      	ands	r3, r2
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d10b      	bne.n	8000ca8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9a:	f023 0303 	bic.w	r3, r3, #3
 8000c9e:	f043 0201 	orr.w	r2, r3, #1
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ca6:	e018      	b.n	8000cda <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cac:	f023 0312 	bic.w	r3, r3, #18
 8000cb0:	f043 0210 	orr.w	r2, r3, #16
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbc:	f043 0201 	orr.w	r2, r3, #1
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cc8:	e007      	b.n	8000cda <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cce:	f043 0210 	orr.w	r2, r3, #16
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	ffe1f7fd 	.word	0xffe1f7fd
 8000ce8:	ff1f0efe 	.word	0xff1f0efe

08000cec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d101      	bne.n	8000d06 <HAL_ADC_Start+0x1a>
 8000d02:	2302      	movs	r3, #2
 8000d04:	e098      	b.n	8000e38 <HAL_ADC_Start+0x14c>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f000 faa4 	bl	800125c <ADC_Enable>
 8000d14:	4603      	mov	r3, r0
 8000d16:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f040 8087 	bne.w	8000e2e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d28:	f023 0301 	bic.w	r3, r3, #1
 8000d2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a41      	ldr	r2, [pc, #260]	; (8000e40 <HAL_ADC_Start+0x154>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d105      	bne.n	8000d4a <HAL_ADC_Start+0x5e>
 8000d3e:	4b41      	ldr	r3, [pc, #260]	; (8000e44 <HAL_ADC_Start+0x158>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d115      	bne.n	8000d76 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d026      	beq.n	8000db2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d6c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d74:	e01d      	b.n	8000db2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a2f      	ldr	r2, [pc, #188]	; (8000e44 <HAL_ADC_Start+0x158>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d004      	beq.n	8000d96 <HAL_ADC_Start+0xaa>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a2b      	ldr	r2, [pc, #172]	; (8000e40 <HAL_ADC_Start+0x154>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d10d      	bne.n	8000db2 <HAL_ADC_Start+0xc6>
 8000d96:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <HAL_ADC_Start+0x158>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d007      	beq.n	8000db2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000daa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d006      	beq.n	8000dcc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc2:	f023 0206 	bic.w	r2, r3, #6
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dca:	e002      	b.n	8000dd2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f06f 0202 	mvn.w	r2, #2
 8000de2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000dee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000df2:	d113      	bne.n	8000e1c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000df8:	4a11      	ldr	r2, [pc, #68]	; (8000e40 <HAL_ADC_Start+0x154>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d105      	bne.n	8000e0a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_ADC_Start+0x158>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d108      	bne.n	8000e1c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	e00c      	b.n	8000e36 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	689a      	ldr	r2, [r3, #8]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	e003      	b.n	8000e36 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40012800 	.word	0x40012800
 8000e44:	40012400 	.word	0x40012400

08000e48 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e5e:	f7ff fe3f 	bl	8000ae0 <HAL_GetTick>
 8000e62:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d00b      	beq.n	8000e8a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e76:	f043 0220 	orr.w	r2, r3, #32
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e0d3      	b.n	8001032 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d131      	bne.n	8000efc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d12a      	bne.n	8000efc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ea6:	e021      	b.n	8000eec <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eae:	d01d      	beq.n	8000eec <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d007      	beq.n	8000ec6 <HAL_ADC_PollForConversion+0x7e>
 8000eb6:	f7ff fe13 	bl	8000ae0 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d212      	bcs.n	8000eec <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d10b      	bne.n	8000eec <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	f043 0204 	orr.w	r2, r3, #4
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e0a2      	b.n	8001032 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0d6      	beq.n	8000ea8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000efa:	e070      	b.n	8000fde <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000efc:	4b4f      	ldr	r3, [pc, #316]	; (800103c <HAL_ADC_PollForConversion+0x1f4>)
 8000efe:	681c      	ldr	r4, [r3, #0]
 8000f00:	2002      	movs	r0, #2
 8000f02:	f001 fc79 	bl	80027f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8000f06:	4603      	mov	r3, r0
 8000f08:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6919      	ldr	r1, [r3, #16]
 8000f12:	4b4b      	ldr	r3, [pc, #300]	; (8001040 <HAL_ADC_PollForConversion+0x1f8>)
 8000f14:	400b      	ands	r3, r1
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d118      	bne.n	8000f4c <HAL_ADC_PollForConversion+0x104>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68d9      	ldr	r1, [r3, #12]
 8000f20:	4b48      	ldr	r3, [pc, #288]	; (8001044 <HAL_ADC_PollForConversion+0x1fc>)
 8000f22:	400b      	ands	r3, r1
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d111      	bne.n	8000f4c <HAL_ADC_PollForConversion+0x104>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6919      	ldr	r1, [r3, #16]
 8000f2e:	4b46      	ldr	r3, [pc, #280]	; (8001048 <HAL_ADC_PollForConversion+0x200>)
 8000f30:	400b      	ands	r3, r1
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d108      	bne.n	8000f48 <HAL_ADC_PollForConversion+0x100>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68d9      	ldr	r1, [r3, #12]
 8000f3c:	4b43      	ldr	r3, [pc, #268]	; (800104c <HAL_ADC_PollForConversion+0x204>)
 8000f3e:	400b      	ands	r3, r1
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <HAL_ADC_PollForConversion+0x100>
 8000f44:	2314      	movs	r3, #20
 8000f46:	e020      	b.n	8000f8a <HAL_ADC_PollForConversion+0x142>
 8000f48:	2329      	movs	r3, #41	; 0x29
 8000f4a:	e01e      	b.n	8000f8a <HAL_ADC_PollForConversion+0x142>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6919      	ldr	r1, [r3, #16]
 8000f52:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <HAL_ADC_PollForConversion+0x200>)
 8000f54:	400b      	ands	r3, r1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d106      	bne.n	8000f68 <HAL_ADC_PollForConversion+0x120>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	68d9      	ldr	r1, [r3, #12]
 8000f60:	4b3a      	ldr	r3, [pc, #232]	; (800104c <HAL_ADC_PollForConversion+0x204>)
 8000f62:	400b      	ands	r3, r1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00d      	beq.n	8000f84 <HAL_ADC_PollForConversion+0x13c>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6919      	ldr	r1, [r3, #16]
 8000f6e:	4b38      	ldr	r3, [pc, #224]	; (8001050 <HAL_ADC_PollForConversion+0x208>)
 8000f70:	400b      	ands	r3, r1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d108      	bne.n	8000f88 <HAL_ADC_PollForConversion+0x140>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68d9      	ldr	r1, [r3, #12]
 8000f7c:	4b34      	ldr	r3, [pc, #208]	; (8001050 <HAL_ADC_PollForConversion+0x208>)
 8000f7e:	400b      	ands	r3, r1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d101      	bne.n	8000f88 <HAL_ADC_PollForConversion+0x140>
 8000f84:	2354      	movs	r3, #84	; 0x54
 8000f86:	e000      	b.n	8000f8a <HAL_ADC_PollForConversion+0x142>
 8000f88:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000f8a:	fb02 f303 	mul.w	r3, r2, r3
 8000f8e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f90:	e021      	b.n	8000fd6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f98:	d01a      	beq.n	8000fd0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d007      	beq.n	8000fb0 <HAL_ADC_PollForConversion+0x168>
 8000fa0:	f7ff fd9e 	bl	8000ae0 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d20f      	bcs.n	8000fd0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d90b      	bls.n	8000fd0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbc:	f043 0204 	orr.w	r2, r3, #4
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e030      	b.n	8001032 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d8d9      	bhi.n	8000f92 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f06f 0212 	mvn.w	r2, #18
 8000fe6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ffe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001002:	d115      	bne.n	8001030 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001008:	2b00      	cmp	r3, #0
 800100a:	d111      	bne.n	8001030 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001010:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d105      	bne.n	8001030 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001028:	f043 0201 	orr.w	r2, r3, #1
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	371c      	adds	r7, #28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	bf00      	nop
 800103c:	20000000 	.word	0x20000000
 8001040:	24924924 	.word	0x24924924
 8001044:	00924924 	.word	0x00924924
 8001048:	12492492 	.word	0x12492492
 800104c:	00492492 	.word	0x00492492
 8001050:	00249249 	.word	0x00249249

08001054 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001084:	2b01      	cmp	r3, #1
 8001086:	d101      	bne.n	800108c <HAL_ADC_ConfigChannel+0x20>
 8001088:	2302      	movs	r3, #2
 800108a:	e0dc      	b.n	8001246 <HAL_ADC_ConfigChannel+0x1da>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b06      	cmp	r3, #6
 800109a:	d81c      	bhi.n	80010d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	3b05      	subs	r3, #5
 80010ae:	221f      	movs	r2, #31
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	4019      	ands	r1, r3
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	6818      	ldr	r0, [r3, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	4613      	mov	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	3b05      	subs	r3, #5
 80010c8:	fa00 f203 	lsl.w	r2, r0, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	430a      	orrs	r2, r1
 80010d2:	635a      	str	r2, [r3, #52]	; 0x34
 80010d4:	e03c      	b.n	8001150 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b0c      	cmp	r3, #12
 80010dc:	d81c      	bhi.n	8001118 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	4613      	mov	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	3b23      	subs	r3, #35	; 0x23
 80010f0:	221f      	movs	r2, #31
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	4019      	ands	r1, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	6818      	ldr	r0, [r3, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	3b23      	subs	r3, #35	; 0x23
 800110a:	fa00 f203 	lsl.w	r2, r0, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	430a      	orrs	r2, r1
 8001114:	631a      	str	r2, [r3, #48]	; 0x30
 8001116:	e01b      	b.n	8001150 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	3b41      	subs	r3, #65	; 0x41
 800112a:	221f      	movs	r2, #31
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	4019      	ands	r1, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	3b41      	subs	r3, #65	; 0x41
 8001144:	fa00 f203 	lsl.w	r2, r0, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	430a      	orrs	r2, r1
 800114e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b09      	cmp	r3, #9
 8001156:	d91c      	bls.n	8001192 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68d9      	ldr	r1, [r3, #12]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4613      	mov	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4413      	add	r3, r2
 8001168:	3b1e      	subs	r3, #30
 800116a:	2207      	movs	r2, #7
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	4019      	ands	r1, r3
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	6898      	ldr	r0, [r3, #8]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4613      	mov	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	3b1e      	subs	r3, #30
 8001184:	fa00 f203 	lsl.w	r2, r0, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	430a      	orrs	r2, r1
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	e019      	b.n	80011c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6919      	ldr	r1, [r3, #16]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	2207      	movs	r2, #7
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	4019      	ands	r1, r3
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	6898      	ldr	r0, [r3, #8]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	fa00 f203 	lsl.w	r2, r0, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	430a      	orrs	r2, r1
 80011c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b10      	cmp	r3, #16
 80011cc:	d003      	beq.n	80011d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011d2:	2b11      	cmp	r3, #17
 80011d4:	d132      	bne.n	800123c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <HAL_ADC_ConfigChannel+0x1e4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d125      	bne.n	800122c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d126      	bne.n	800123c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b10      	cmp	r3, #16
 8001204:	d11a      	bne.n	800123c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <HAL_ADC_ConfigChannel+0x1e8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a13      	ldr	r2, [pc, #76]	; (8001258 <HAL_ADC_ConfigChannel+0x1ec>)
 800120c:	fba2 2303 	umull	r2, r3, r2, r3
 8001210:	0c9a      	lsrs	r2, r3, #18
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800121c:	e002      	b.n	8001224 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	3b01      	subs	r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f9      	bne.n	800121e <HAL_ADC_ConfigChannel+0x1b2>
 800122a:	e007      	b.n	800123c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	f043 0220 	orr.w	r2, r3, #32
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	40012400 	.word	0x40012400
 8001254:	20000000 	.word	0x20000000
 8001258:	431bde83 	.word	0x431bde83

0800125c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b01      	cmp	r3, #1
 8001278:	d040      	beq.n	80012fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 0201 	orr.w	r2, r2, #1
 8001288:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <ADC_Enable+0xac>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a1f      	ldr	r2, [pc, #124]	; (800130c <ADC_Enable+0xb0>)
 8001290:	fba2 2303 	umull	r2, r3, r2, r3
 8001294:	0c9b      	lsrs	r3, r3, #18
 8001296:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001298:	e002      	b.n	80012a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	3b01      	subs	r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f9      	bne.n	800129a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012a6:	f7ff fc1b 	bl	8000ae0 <HAL_GetTick>
 80012aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012ac:	e01f      	b.n	80012ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012ae:	f7ff fc17 	bl	8000ae0 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d918      	bls.n	80012ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d011      	beq.n	80012ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ce:	f043 0210 	orr.w	r2, r3, #16
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	f043 0201 	orr.w	r2, r3, #1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e007      	b.n	80012fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d1d8      	bne.n	80012ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000000 	.word	0x20000000
 800130c:	431bde83 	.word	0x431bde83

08001310 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b01      	cmp	r3, #1
 8001328:	d12e      	bne.n	8001388 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0201 	bic.w	r2, r2, #1
 8001338:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800133a:	f7ff fbd1 	bl	8000ae0 <HAL_GetTick>
 800133e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001340:	e01b      	b.n	800137a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001342:	f7ff fbcd 	bl	8000ae0 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d914      	bls.n	800137a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b01      	cmp	r3, #1
 800135c:	d10d      	bne.n	800137a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001362:	f043 0210 	orr.w	r2, r3, #16
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136e:	f043 0201 	orr.w	r2, r3, #1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e007      	b.n	800138a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	2b01      	cmp	r3, #1
 8001386:	d0dc      	beq.n	8001342 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c6:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	60d3      	str	r3, [r2, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	db0b      	blt.n	8001422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f003 021f 	and.w	r2, r3, #31
 8001410:	4906      	ldr	r1, [pc, #24]	; (800142c <__NVIC_EnableIRQ+0x34>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	2001      	movs	r0, #1
 800141a:	fa00 f202 	lsl.w	r2, r0, r2
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f7ff ff90 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff2d 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001554:	f7ff ff42 	bl	80013dc <__NVIC_GetPriorityGrouping>
 8001558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7ff ff90 	bl	8001484 <NVIC_EncodePriority>
 8001564:	4602      	mov	r2, r0
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff5f 	bl	8001430 <__NVIC_SetPriority>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff35 	bl	80013f8 <__NVIC_EnableIRQ>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ffa2 	bl	80014e8 <SysTick_Config>
 80015a4:	4603      	mov	r3, r0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e043      	b.n	800164e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <HAL_DMA_Init+0xa8>)
 80015ce:	4413      	add	r3, r2
 80015d0:	4a22      	ldr	r2, [pc, #136]	; (800165c <HAL_DMA_Init+0xac>)
 80015d2:	fba2 2303 	umull	r2, r3, r2, r3
 80015d6:	091b      	lsrs	r3, r3, #4
 80015d8:	009a      	lsls	r2, r3, #2
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a1f      	ldr	r2, [pc, #124]	; (8001660 <HAL_DMA_Init+0xb0>)
 80015e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2202      	movs	r2, #2
 80015e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001608:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001614:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001620:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	bffdfff8 	.word	0xbffdfff8
 800165c:	cccccccd 	.word	0xcccccccd
 8001660:	40020000 	.word	0x40020000

08001664 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d101      	bne.n	8001684 <HAL_DMA_Start_IT+0x20>
 8001680:	2302      	movs	r3, #2
 8001682:	e04a      	b.n	800171a <HAL_DMA_Start_IT+0xb6>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001692:	2b01      	cmp	r3, #1
 8001694:	d13a      	bne.n	800170c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2202      	movs	r2, #2
 800169a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0201 	bic.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f9e8 	bl	8001a90 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d008      	beq.n	80016da <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 020e 	orr.w	r2, r2, #14
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	e00f      	b.n	80016fa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0204 	bic.w	r2, r2, #4
 80016e8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 020a 	orr.w	r2, r2, #10
 80016f8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 0201 	orr.w	r2, r2, #1
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	e005      	b.n	8001718 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001714:	2302      	movs	r3, #2
 8001716:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001718:	7dfb      	ldrb	r3, [r7, #23]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001722:	b480      	push	{r7}
 8001724:	b085      	sub	sp, #20
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001734:	2b02      	cmp	r3, #2
 8001736:	d008      	beq.n	800174a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2204      	movs	r2, #4
 800173c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e020      	b.n	800178c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 020e 	bic.w	r2, r2, #14
 8001758:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0201 	bic.w	r2, r2, #1
 8001768:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001772:	2101      	movs	r1, #1
 8001774:	fa01 f202 	lsl.w	r2, r1, r2
 8001778:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800178a:	7bfb      	ldrb	r3, [r7, #15]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
	...

08001798 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d005      	beq.n	80017ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2204      	movs	r2, #4
 80017b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
 80017b8:	e051      	b.n	800185e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 020e 	bic.w	r2, r2, #14
 80017c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0201 	bic.w	r2, r2, #1
 80017d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a22      	ldr	r2, [pc, #136]	; (8001868 <HAL_DMA_Abort_IT+0xd0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d029      	beq.n	8001838 <HAL_DMA_Abort_IT+0xa0>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a20      	ldr	r2, [pc, #128]	; (800186c <HAL_DMA_Abort_IT+0xd4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d022      	beq.n	8001834 <HAL_DMA_Abort_IT+0x9c>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a1f      	ldr	r2, [pc, #124]	; (8001870 <HAL_DMA_Abort_IT+0xd8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d01a      	beq.n	800182e <HAL_DMA_Abort_IT+0x96>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a1d      	ldr	r2, [pc, #116]	; (8001874 <HAL_DMA_Abort_IT+0xdc>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d012      	beq.n	8001828 <HAL_DMA_Abort_IT+0x90>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1c      	ldr	r2, [pc, #112]	; (8001878 <HAL_DMA_Abort_IT+0xe0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d00a      	beq.n	8001822 <HAL_DMA_Abort_IT+0x8a>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a1a      	ldr	r2, [pc, #104]	; (800187c <HAL_DMA_Abort_IT+0xe4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d102      	bne.n	800181c <HAL_DMA_Abort_IT+0x84>
 8001816:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800181a:	e00e      	b.n	800183a <HAL_DMA_Abort_IT+0xa2>
 800181c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001820:	e00b      	b.n	800183a <HAL_DMA_Abort_IT+0xa2>
 8001822:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001826:	e008      	b.n	800183a <HAL_DMA_Abort_IT+0xa2>
 8001828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182c:	e005      	b.n	800183a <HAL_DMA_Abort_IT+0xa2>
 800182e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001832:	e002      	b.n	800183a <HAL_DMA_Abort_IT+0xa2>
 8001834:	2310      	movs	r3, #16
 8001836:	e000      	b.n	800183a <HAL_DMA_Abort_IT+0xa2>
 8001838:	2301      	movs	r3, #1
 800183a:	4a11      	ldr	r2, [pc, #68]	; (8001880 <HAL_DMA_Abort_IT+0xe8>)
 800183c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	4798      	blx	r3
    } 
  }
  return status;
 800185e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40020008 	.word	0x40020008
 800186c:	4002001c 	.word	0x4002001c
 8001870:	40020030 	.word	0x40020030
 8001874:	40020044 	.word	0x40020044
 8001878:	40020058 	.word	0x40020058
 800187c:	4002006c 	.word	0x4002006c
 8001880:	40020000 	.word	0x40020000

08001884 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	2204      	movs	r2, #4
 80018a2:	409a      	lsls	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d04f      	beq.n	800194c <HAL_DMA_IRQHandler+0xc8>
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d04a      	beq.n	800194c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0320 	and.w	r3, r3, #32
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d107      	bne.n	80018d4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0204 	bic.w	r2, r2, #4
 80018d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a66      	ldr	r2, [pc, #408]	; (8001a74 <HAL_DMA_IRQHandler+0x1f0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d029      	beq.n	8001932 <HAL_DMA_IRQHandler+0xae>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a65      	ldr	r2, [pc, #404]	; (8001a78 <HAL_DMA_IRQHandler+0x1f4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d022      	beq.n	800192e <HAL_DMA_IRQHandler+0xaa>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a63      	ldr	r2, [pc, #396]	; (8001a7c <HAL_DMA_IRQHandler+0x1f8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01a      	beq.n	8001928 <HAL_DMA_IRQHandler+0xa4>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a62      	ldr	r2, [pc, #392]	; (8001a80 <HAL_DMA_IRQHandler+0x1fc>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d012      	beq.n	8001922 <HAL_DMA_IRQHandler+0x9e>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a60      	ldr	r2, [pc, #384]	; (8001a84 <HAL_DMA_IRQHandler+0x200>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00a      	beq.n	800191c <HAL_DMA_IRQHandler+0x98>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a5f      	ldr	r2, [pc, #380]	; (8001a88 <HAL_DMA_IRQHandler+0x204>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d102      	bne.n	8001916 <HAL_DMA_IRQHandler+0x92>
 8001910:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001914:	e00e      	b.n	8001934 <HAL_DMA_IRQHandler+0xb0>
 8001916:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800191a:	e00b      	b.n	8001934 <HAL_DMA_IRQHandler+0xb0>
 800191c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001920:	e008      	b.n	8001934 <HAL_DMA_IRQHandler+0xb0>
 8001922:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001926:	e005      	b.n	8001934 <HAL_DMA_IRQHandler+0xb0>
 8001928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800192c:	e002      	b.n	8001934 <HAL_DMA_IRQHandler+0xb0>
 800192e:	2340      	movs	r3, #64	; 0x40
 8001930:	e000      	b.n	8001934 <HAL_DMA_IRQHandler+0xb0>
 8001932:	2304      	movs	r3, #4
 8001934:	4a55      	ldr	r2, [pc, #340]	; (8001a8c <HAL_DMA_IRQHandler+0x208>)
 8001936:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 8094 	beq.w	8001a6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800194a:	e08e      	b.n	8001a6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	2202      	movs	r2, #2
 8001952:	409a      	lsls	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d056      	beq.n	8001a0a <HAL_DMA_IRQHandler+0x186>
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d051      	beq.n	8001a0a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0320 	and.w	r3, r3, #32
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10b      	bne.n	800198c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 020a 	bic.w	r2, r2, #10
 8001982:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a38      	ldr	r2, [pc, #224]	; (8001a74 <HAL_DMA_IRQHandler+0x1f0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d029      	beq.n	80019ea <HAL_DMA_IRQHandler+0x166>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a37      	ldr	r2, [pc, #220]	; (8001a78 <HAL_DMA_IRQHandler+0x1f4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d022      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x162>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a35      	ldr	r2, [pc, #212]	; (8001a7c <HAL_DMA_IRQHandler+0x1f8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d01a      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x15c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a34      	ldr	r2, [pc, #208]	; (8001a80 <HAL_DMA_IRQHandler+0x1fc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d012      	beq.n	80019da <HAL_DMA_IRQHandler+0x156>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a32      	ldr	r2, [pc, #200]	; (8001a84 <HAL_DMA_IRQHandler+0x200>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00a      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x150>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a31      	ldr	r2, [pc, #196]	; (8001a88 <HAL_DMA_IRQHandler+0x204>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d102      	bne.n	80019ce <HAL_DMA_IRQHandler+0x14a>
 80019c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019cc:	e00e      	b.n	80019ec <HAL_DMA_IRQHandler+0x168>
 80019ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019d2:	e00b      	b.n	80019ec <HAL_DMA_IRQHandler+0x168>
 80019d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d8:	e008      	b.n	80019ec <HAL_DMA_IRQHandler+0x168>
 80019da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019de:	e005      	b.n	80019ec <HAL_DMA_IRQHandler+0x168>
 80019e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e4:	e002      	b.n	80019ec <HAL_DMA_IRQHandler+0x168>
 80019e6:	2320      	movs	r3, #32
 80019e8:	e000      	b.n	80019ec <HAL_DMA_IRQHandler+0x168>
 80019ea:	2302      	movs	r3, #2
 80019ec:	4a27      	ldr	r2, [pc, #156]	; (8001a8c <HAL_DMA_IRQHandler+0x208>)
 80019ee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d034      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a08:	e02f      	b.n	8001a6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	2208      	movs	r2, #8
 8001a10:	409a      	lsls	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d028      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x1e8>
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d023      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 020e 	bic.w	r2, r2, #14
 8001a32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d004      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	4798      	blx	r3
    }
  }
  return;
 8001a6a:	bf00      	nop
 8001a6c:	bf00      	nop
}
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40020008 	.word	0x40020008
 8001a78:	4002001c 	.word	0x4002001c
 8001a7c:	40020030 	.word	0x40020030
 8001a80:	40020044 	.word	0x40020044
 8001a84:	40020058 	.word	0x40020058
 8001a88:	4002006c 	.word	0x4002006c
 8001a8c:	40020000 	.word	0x40020000

08001a90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b10      	cmp	r3, #16
 8001abc:	d108      	bne.n	8001ad0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ace:	e007      	b.n	8001ae0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	60da      	str	r2, [r3, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b08b      	sub	sp, #44	; 0x2c
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afe:	e169      	b.n	8001dd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b00:	2201      	movs	r2, #1
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	f040 8158 	bne.w	8001dce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4a9a      	ldr	r2, [pc, #616]	; (8001d8c <HAL_GPIO_Init+0x2a0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d05e      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b28:	4a98      	ldr	r2, [pc, #608]	; (8001d8c <HAL_GPIO_Init+0x2a0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d875      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b2e:	4a98      	ldr	r2, [pc, #608]	; (8001d90 <HAL_GPIO_Init+0x2a4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d058      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b34:	4a96      	ldr	r2, [pc, #600]	; (8001d90 <HAL_GPIO_Init+0x2a4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d86f      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b3a:	4a96      	ldr	r2, [pc, #600]	; (8001d94 <HAL_GPIO_Init+0x2a8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d052      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b40:	4a94      	ldr	r2, [pc, #592]	; (8001d94 <HAL_GPIO_Init+0x2a8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d869      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b46:	4a94      	ldr	r2, [pc, #592]	; (8001d98 <HAL_GPIO_Init+0x2ac>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d04c      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b4c:	4a92      	ldr	r2, [pc, #584]	; (8001d98 <HAL_GPIO_Init+0x2ac>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d863      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b52:	4a92      	ldr	r2, [pc, #584]	; (8001d9c <HAL_GPIO_Init+0x2b0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d046      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b58:	4a90      	ldr	r2, [pc, #576]	; (8001d9c <HAL_GPIO_Init+0x2b0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d85d      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b5e:	2b12      	cmp	r3, #18
 8001b60:	d82a      	bhi.n	8001bb8 <HAL_GPIO_Init+0xcc>
 8001b62:	2b12      	cmp	r3, #18
 8001b64:	d859      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b66:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <HAL_GPIO_Init+0x80>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001be7 	.word	0x08001be7
 8001b70:	08001bc1 	.word	0x08001bc1
 8001b74:	08001bd3 	.word	0x08001bd3
 8001b78:	08001c15 	.word	0x08001c15
 8001b7c:	08001c1b 	.word	0x08001c1b
 8001b80:	08001c1b 	.word	0x08001c1b
 8001b84:	08001c1b 	.word	0x08001c1b
 8001b88:	08001c1b 	.word	0x08001c1b
 8001b8c:	08001c1b 	.word	0x08001c1b
 8001b90:	08001c1b 	.word	0x08001c1b
 8001b94:	08001c1b 	.word	0x08001c1b
 8001b98:	08001c1b 	.word	0x08001c1b
 8001b9c:	08001c1b 	.word	0x08001c1b
 8001ba0:	08001c1b 	.word	0x08001c1b
 8001ba4:	08001c1b 	.word	0x08001c1b
 8001ba8:	08001c1b 	.word	0x08001c1b
 8001bac:	08001c1b 	.word	0x08001c1b
 8001bb0:	08001bc9 	.word	0x08001bc9
 8001bb4:	08001bdd 	.word	0x08001bdd
 8001bb8:	4a79      	ldr	r2, [pc, #484]	; (8001da0 <HAL_GPIO_Init+0x2b4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bbe:	e02c      	b.n	8001c1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	623b      	str	r3, [r7, #32]
          break;
 8001bc6:	e029      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	623b      	str	r3, [r7, #32]
          break;
 8001bd0:	e024      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	3308      	adds	r3, #8
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e01f      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	330c      	adds	r3, #12
 8001be2:	623b      	str	r3, [r7, #32]
          break;
 8001be4:	e01a      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	623b      	str	r3, [r7, #32]
          break;
 8001bf2:	e013      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d105      	bne.n	8001c08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	611a      	str	r2, [r3, #16]
          break;
 8001c06:	e009      	b.n	8001c1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	615a      	str	r2, [r3, #20]
          break;
 8001c12:	e003      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
          break;
 8001c18:	e000      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          break;
 8001c1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2bff      	cmp	r3, #255	; 0xff
 8001c20:	d801      	bhi.n	8001c26 <HAL_GPIO_Init+0x13a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	e001      	b.n	8001c2a <HAL_GPIO_Init+0x13e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2bff      	cmp	r3, #255	; 0xff
 8001c30:	d802      	bhi.n	8001c38 <HAL_GPIO_Init+0x14c>
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	e002      	b.n	8001c3e <HAL_GPIO_Init+0x152>
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	3b08      	subs	r3, #8
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	210f      	movs	r1, #15
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	401a      	ands	r2, r3
 8001c50:	6a39      	ldr	r1, [r7, #32]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 80b1 	beq.w	8001dce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c6c:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a4c      	ldr	r2, [pc, #304]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b4a      	ldr	r3, [pc, #296]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c84:	4a48      	ldr	r2, [pc, #288]	; (8001da8 <HAL_GPIO_Init+0x2bc>)
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	220f      	movs	r2, #15
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a40      	ldr	r2, [pc, #256]	; (8001dac <HAL_GPIO_Init+0x2c0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d013      	beq.n	8001cd8 <HAL_GPIO_Init+0x1ec>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a3f      	ldr	r2, [pc, #252]	; (8001db0 <HAL_GPIO_Init+0x2c4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_GPIO_Init+0x1e8>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a3e      	ldr	r2, [pc, #248]	; (8001db4 <HAL_GPIO_Init+0x2c8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d007      	beq.n	8001cd0 <HAL_GPIO_Init+0x1e4>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a3d      	ldr	r2, [pc, #244]	; (8001db8 <HAL_GPIO_Init+0x2cc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d101      	bne.n	8001ccc <HAL_GPIO_Init+0x1e0>
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e006      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001ccc:	2304      	movs	r3, #4
 8001cce:	e004      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e002      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cdc:	f002 0203 	and.w	r2, r2, #3
 8001ce0:	0092      	lsls	r2, r2, #2
 8001ce2:	4093      	lsls	r3, r2
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cea:	492f      	ldr	r1, [pc, #188]	; (8001da8 <HAL_GPIO_Init+0x2bc>)
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d006      	beq.n	8001d12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d04:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	492c      	ldr	r1, [pc, #176]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]
 8001d10:	e006      	b.n	8001d20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d12:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	4928      	ldr	r1, [pc, #160]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d2c:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	4922      	ldr	r1, [pc, #136]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	491e      	ldr	r1, [pc, #120]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	4918      	ldr	r1, [pc, #96]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]
 8001d60:	e006      	b.n	8001d70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	4914      	ldr	r1, [pc, #80]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d021      	beq.n	8001dc0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	490e      	ldr	r1, [pc, #56]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	60cb      	str	r3, [r1, #12]
 8001d88:	e021      	b.n	8001dce <HAL_GPIO_Init+0x2e2>
 8001d8a:	bf00      	nop
 8001d8c:	10320000 	.word	0x10320000
 8001d90:	10310000 	.word	0x10310000
 8001d94:	10220000 	.word	0x10220000
 8001d98:	10210000 	.word	0x10210000
 8001d9c:	10120000 	.word	0x10120000
 8001da0:	10110000 	.word	0x10110000
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010000 	.word	0x40010000
 8001dac:	40010800 	.word	0x40010800
 8001db0:	40010c00 	.word	0x40010c00
 8001db4:	40011000 	.word	0x40011000
 8001db8:	40011400 	.word	0x40011400
 8001dbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_GPIO_Init+0x304>)
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	4909      	ldr	r1, [pc, #36]	; (8001df0 <HAL_GPIO_Init+0x304>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	fa22 f303 	lsr.w	r3, r2, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f47f ae8e 	bne.w	8001b00 <HAL_GPIO_Init+0x14>
  }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	372c      	adds	r7, #44	; 0x2c
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	40010400 	.word	0x40010400

08001df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
 8001e00:	4613      	mov	r3, r2
 8001e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e04:	787b      	ldrb	r3, [r7, #1]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e0a:	887a      	ldrh	r2, [r7, #2]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e10:	e003      	b.n	8001e1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e12:	887b      	ldrh	r3, [r7, #2]
 8001e14:	041a      	lsls	r2, r3, #16
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	611a      	str	r2, [r3, #16]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	041a      	lsls	r2, r3, #16
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	43d9      	mvns	r1, r3
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	400b      	ands	r3, r1
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	611a      	str	r2, [r3, #16]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
	...

08001e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e272      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8087 	beq.w	8001f86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e78:	4b92      	ldr	r3, [pc, #584]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d00c      	beq.n	8001e9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e84:	4b8f      	ldr	r3, [pc, #572]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d112      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x5e>
 8001e90:	4b8c      	ldr	r3, [pc, #560]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9c:	d10b      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9e:	4b89      	ldr	r3, [pc, #548]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d06c      	beq.n	8001f84 <HAL_RCC_OscConfig+0x12c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d168      	bne.n	8001f84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e24c      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x76>
 8001ec0:	4b80      	ldr	r3, [pc, #512]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a7f      	ldr	r2, [pc, #508]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	e02e      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x98>
 8001ed6:	4b7b      	ldr	r3, [pc, #492]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a7a      	ldr	r2, [pc, #488]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b78      	ldr	r3, [pc, #480]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a77      	ldr	r2, [pc, #476]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e01d      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0xbc>
 8001efa:	4b72      	ldr	r3, [pc, #456]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a71      	ldr	r2, [pc, #452]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	4b6f      	ldr	r3, [pc, #444]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a6e      	ldr	r2, [pc, #440]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e00b      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001f14:	4b6b      	ldr	r3, [pc, #428]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a6a      	ldr	r2, [pc, #424]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b68      	ldr	r3, [pc, #416]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a67      	ldr	r2, [pc, #412]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d013      	beq.n	8001f5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7fe fdd4 	bl	8000ae0 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7fe fdd0 	bl	8000ae0 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	; 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e200      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	4b5d      	ldr	r3, [pc, #372]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0xe4>
 8001f5a:	e014      	b.n	8001f86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7fe fdc0 	bl	8000ae0 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7fe fdbc 	bl	8000ae0 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e1ec      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x10c>
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d063      	beq.n	800205a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f92:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f9e:	4b49      	ldr	r3, [pc, #292]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d11c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x18c>
 8001faa:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d116      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	4b43      	ldr	r3, [pc, #268]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_RCC_OscConfig+0x176>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e1c0      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fce:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4939      	ldr	r1, [pc, #228]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	e03a      	b.n	800205a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d020      	beq.n	800202e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff2:	f7fe fd75 	bl	8000ae0 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffa:	f7fe fd71 	bl	8000ae0 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e1a1      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4927      	ldr	r1, [pc, #156]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
 800202c:	e015      	b.n	800205a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202e:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7fe fd54 	bl	8000ae0 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203c:	f7fe fd50 	bl	8000ae0 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e180      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d03a      	beq.n	80020dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d019      	beq.n	80020a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206e:	4b17      	ldr	r3, [pc, #92]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8002070:	2201      	movs	r2, #1
 8002072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002074:	f7fe fd34 	bl	8000ae0 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207c:	f7fe fd30 	bl	8000ae0 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e160      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800209a:	2001      	movs	r0, #1
 800209c:	f000 fad8 	bl	8002650 <RCC_Delay>
 80020a0:	e01c      	b.n	80020dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a8:	f7fe fd1a 	bl	8000ae0 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ae:	e00f      	b.n	80020d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b0:	f7fe fd16 	bl	8000ae0 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d908      	bls.n	80020d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e146      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	42420000 	.word	0x42420000
 80020cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d0:	4b92      	ldr	r3, [pc, #584]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1e9      	bne.n	80020b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80a6 	beq.w	8002236 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ee:	4b8b      	ldr	r3, [pc, #556]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10d      	bne.n	8002116 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4b88      	ldr	r3, [pc, #544]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	4a87      	ldr	r2, [pc, #540]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	61d3      	str	r3, [r2, #28]
 8002106:	4b85      	ldr	r3, [pc, #532]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002112:	2301      	movs	r3, #1
 8002114:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b82      	ldr	r3, [pc, #520]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d118      	bne.n	8002154 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002122:	4b7f      	ldr	r3, [pc, #508]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a7e      	ldr	r2, [pc, #504]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212e:	f7fe fcd7 	bl	8000ae0 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7fe fcd3 	bl	8000ae0 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b64      	cmp	r3, #100	; 0x64
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e103      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	4b75      	ldr	r3, [pc, #468]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x312>
 800215c:	4b6f      	ldr	r3, [pc, #444]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a6e      	ldr	r2, [pc, #440]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	e02d      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x334>
 8002172:	4b6a      	ldr	r3, [pc, #424]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a69      	ldr	r2, [pc, #420]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	6213      	str	r3, [r2, #32]
 800217e:	4b67      	ldr	r3, [pc, #412]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a66      	ldr	r2, [pc, #408]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002184:	f023 0304 	bic.w	r3, r3, #4
 8002188:	6213      	str	r3, [r2, #32]
 800218a:	e01c      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b05      	cmp	r3, #5
 8002192:	d10c      	bne.n	80021ae <HAL_RCC_OscConfig+0x356>
 8002194:	4b61      	ldr	r3, [pc, #388]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4a60      	ldr	r2, [pc, #384]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800219a:	f043 0304 	orr.w	r3, r3, #4
 800219e:	6213      	str	r3, [r2, #32]
 80021a0:	4b5e      	ldr	r3, [pc, #376]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4a5d      	ldr	r2, [pc, #372]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6213      	str	r3, [r2, #32]
 80021ac:	e00b      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 80021ae:	4b5b      	ldr	r3, [pc, #364]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a5a      	ldr	r2, [pc, #360]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6213      	str	r3, [r2, #32]
 80021ba:	4b58      	ldr	r3, [pc, #352]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a57      	ldr	r2, [pc, #348]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	f023 0304 	bic.w	r3, r3, #4
 80021c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d015      	beq.n	80021fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ce:	f7fe fc87 	bl	8000ae0 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7fe fc83 	bl	8000ae0 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e0b1      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ec:	4b4b      	ldr	r3, [pc, #300]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ee      	beq.n	80021d6 <HAL_RCC_OscConfig+0x37e>
 80021f8:	e014      	b.n	8002224 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7fe fc71 	bl	8000ae0 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7fe fc6d 	bl	8000ae0 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e09b      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002218:	4b40      	ldr	r3, [pc, #256]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1ee      	bne.n	8002202 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d105      	bne.n	8002236 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222a:	4b3c      	ldr	r3, [pc, #240]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	4a3b      	ldr	r2, [pc, #236]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002234:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8087 	beq.w	800234e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002240:	4b36      	ldr	r3, [pc, #216]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b08      	cmp	r3, #8
 800224a:	d061      	beq.n	8002310 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d146      	bne.n	80022e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002254:	4b33      	ldr	r3, [pc, #204]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe fc41 	bl	8000ae0 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002262:	f7fe fc3d 	bl	8000ae0 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e06d      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002274:	4b29      	ldr	r3, [pc, #164]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002288:	d108      	bne.n	800229c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	4921      	ldr	r1, [pc, #132]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a19      	ldr	r1, [r3, #32]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	430b      	orrs	r3, r1
 80022ae:	491b      	ldr	r1, [pc, #108]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b4:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7fe fc11 	bl	8000ae0 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c2:	f7fe fc0d 	bl	8000ae0 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e03d      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x46a>
 80022e0:	e035      	b.n	800234e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7fe fbfa 	bl	8000ae0 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe fbf6 	bl	8000ae0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e026      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x498>
 800230e:	e01e      	b.n	800234e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d107      	bne.n	8002328 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e019      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
 800231c:	40021000 	.word	0x40021000
 8002320:	40007000 	.word	0x40007000
 8002324:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	429a      	cmp	r2, r3
 800233a:	d106      	bne.n	800234a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d001      	beq.n	800234e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000

0800235c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0d0      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002370:	4b6a      	ldr	r3, [pc, #424]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d910      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b67      	ldr	r3, [pc, #412]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0207 	bic.w	r2, r3, #7
 8002386:	4965      	ldr	r1, [pc, #404]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b63      	ldr	r3, [pc, #396]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0b8      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d020      	beq.n	80023ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b8:	4b59      	ldr	r3, [pc, #356]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a58      	ldr	r2, [pc, #352]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d0:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a52      	ldr	r2, [pc, #328]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023dc:	4b50      	ldr	r3, [pc, #320]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	494d      	ldr	r1, [pc, #308]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d040      	beq.n	800247c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d115      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e07f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241a:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e073      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e06b      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243a:	4b39      	ldr	r3, [pc, #228]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f023 0203 	bic.w	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4936      	ldr	r1, [pc, #216]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800244c:	f7fe fb48 	bl	8000ae0 <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	e00a      	b.n	800246a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002454:	f7fe fb44 	bl	8000ae0 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e053      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 020c 	and.w	r2, r3, #12
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	429a      	cmp	r2, r3
 800247a:	d1eb      	bne.n	8002454 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800247c:	4b27      	ldr	r3, [pc, #156]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d210      	bcs.n	80024ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 0207 	bic.w	r2, r3, #7
 8002492:	4922      	ldr	r1, [pc, #136]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e032      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4916      	ldr	r1, [pc, #88]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	490e      	ldr	r1, [pc, #56]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ea:	f000 f821 	bl	8002530 <HAL_RCC_GetSysClockFreq>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	490a      	ldr	r1, [pc, #40]	; (8002524 <HAL_RCC_ClockConfig+0x1c8>)
 80024fc:	5ccb      	ldrb	r3, [r1, r3]
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	4a09      	ldr	r2, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1cc>)
 8002504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x1d0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe faa6 	bl	8000a5c <HAL_InitTick>

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40022000 	.word	0x40022000
 8002520:	40021000 	.word	0x40021000
 8002524:	080034ec 	.word	0x080034ec
 8002528:	20000000 	.word	0x20000000
 800252c:	20000004 	.word	0x20000004

08002530 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002530:	b490      	push	{r4, r7}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002536:	4b29      	ldr	r3, [pc, #164]	; (80025dc <HAL_RCC_GetSysClockFreq+0xac>)
 8002538:	1d3c      	adds	r4, r7, #4
 800253a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800253c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002540:	f240 2301 	movw	r3, #513	; 0x201
 8002544:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800255a:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b04      	cmp	r3, #4
 8002568:	d002      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x40>
 800256a:	2b08      	cmp	r3, #8
 800256c:	d003      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x46>
 800256e:	e02b      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002570:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002572:	623b      	str	r3, [r7, #32]
      break;
 8002574:	e02b      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	0c9b      	lsrs	r3, r3, #18
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	3328      	adds	r3, #40	; 0x28
 8002580:	443b      	add	r3, r7
 8002582:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002586:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d012      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002592:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	0c5b      	lsrs	r3, r3, #17
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	3328      	adds	r3, #40	; 0x28
 800259e:	443b      	add	r3, r7
 80025a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025aa:	fb03 f202 	mul.w	r2, r3, r2
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
 80025b6:	e004      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025bc:	fb02 f303 	mul.w	r3, r2, r3
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	623b      	str	r3, [r7, #32]
      break;
 80025c6:	e002      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ca:	623b      	str	r3, [r7, #32]
      break;
 80025cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ce:	6a3b      	ldr	r3, [r7, #32]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3728      	adds	r7, #40	; 0x28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc90      	pop	{r4, r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	080034cc 	.word	0x080034cc
 80025e0:	40021000 	.word	0x40021000
 80025e4:	007a1200 	.word	0x007a1200
 80025e8:	003d0900 	.word	0x003d0900

080025ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f0:	4b02      	ldr	r3, [pc, #8]	; (80025fc <HAL_RCC_GetHCLKFreq+0x10>)
 80025f2:	681b      	ldr	r3, [r3, #0]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	20000000 	.word	0x20000000

08002600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002604:	f7ff fff2 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4903      	ldr	r1, [pc, #12]	; (8002624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000
 8002624:	080034fc 	.word	0x080034fc

08002628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800262c:	f7ff ffde 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	0adb      	lsrs	r3, r3, #11
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4903      	ldr	r1, [pc, #12]	; (800264c <HAL_RCC_GetPCLK2Freq+0x24>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	080034fc 	.word	0x080034fc

08002650 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <RCC_Delay+0x34>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <RCC_Delay+0x38>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	0a5b      	lsrs	r3, r3, #9
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	fb02 f303 	mul.w	r3, r2, r3
 800266a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800266c:	bf00      	nop
  }
  while (Delay --);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1e5a      	subs	r2, r3, #1
 8002672:	60fa      	str	r2, [r7, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f9      	bne.n	800266c <RCC_Delay+0x1c>
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	20000000 	.word	0x20000000
 8002688:	10624dd3 	.word	0x10624dd3

0800268c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d07d      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80026a8:	2300      	movs	r3, #0
 80026aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ac:	4b4f      	ldr	r3, [pc, #316]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10d      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b8:	4b4c      	ldr	r3, [pc, #304]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	4a4b      	ldr	r2, [pc, #300]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c2:	61d3      	str	r3, [r2, #28]
 80026c4:	4b49      	ldr	r3, [pc, #292]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d0:	2301      	movs	r3, #1
 80026d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	4b46      	ldr	r3, [pc, #280]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d118      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e0:	4b43      	ldr	r3, [pc, #268]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a42      	ldr	r2, [pc, #264]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ec:	f7fe f9f8 	bl	8000ae0 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f2:	e008      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f4:	f7fe f9f4 	bl	8000ae0 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	; 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e06d      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002706:	4b3a      	ldr	r3, [pc, #232]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002712:	4b36      	ldr	r3, [pc, #216]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d02e      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	429a      	cmp	r2, r3
 800272e:	d027      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002730:	4b2e      	ldr	r3, [pc, #184]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002738:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800273a:	4b2e      	ldr	r3, [pc, #184]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800273c:	2201      	movs	r2, #1
 800273e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002740:	4b2c      	ldr	r3, [pc, #176]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002746:	4a29      	ldr	r2, [pc, #164]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d014      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002756:	f7fe f9c3 	bl	8000ae0 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275c:	e00a      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275e:	f7fe f9bf 	bl	8000ae0 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	f241 3288 	movw	r2, #5000	; 0x1388
 800276c:	4293      	cmp	r3, r2
 800276e:	d901      	bls.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e036      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002774:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0ee      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002780:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4917      	ldr	r1, [pc, #92]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278e:	4313      	orrs	r3, r2
 8002790:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002792:	7dfb      	ldrb	r3, [r7, #23]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d105      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002798:	4b14      	ldr	r3, [pc, #80]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	4a13      	ldr	r2, [pc, #76]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027b0:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	490b      	ldr	r1, [pc, #44]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d008      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027ce:	4b07      	ldr	r3, [pc, #28]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	4904      	ldr	r1, [pc, #16]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40007000 	.word	0x40007000
 80027f4:	42420440 	.word	0x42420440

080027f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b08d      	sub	sp, #52	; 0x34
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002800:	4b58      	ldr	r3, [pc, #352]	; (8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002802:	f107 040c 	add.w	r4, r7, #12
 8002806:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002808:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800280c:	f240 2301 	movw	r3, #513	; 0x201
 8002810:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
 8002816:	2300      	movs	r3, #0
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800281a:	2300      	movs	r3, #0
 800281c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	2300      	movs	r3, #0
 8002824:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b10      	cmp	r3, #16
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b10      	cmp	r3, #16
 8002830:	f200 808e 	bhi.w	8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d049      	beq.n	80028ce <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d079      	beq.n	8002934 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002840:	e086      	b.n	8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002842:	4b49      	ldr	r3, [pc, #292]	; (8002968 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002848:	4b47      	ldr	r3, [pc, #284]	; (8002968 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d07f      	beq.n	8002954 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	0c9b      	lsrs	r3, r3, #18
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	3330      	adds	r3, #48	; 0x30
 800285e:	443b      	add	r3, r7
 8002860:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002864:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d017      	beq.n	80028a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002870:	4b3d      	ldr	r3, [pc, #244]	; (8002968 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	0c5b      	lsrs	r3, r3, #17
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	3330      	adds	r3, #48	; 0x30
 800287c:	443b      	add	r3, r7
 800287e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00d      	beq.n	80028aa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800288e:	4a37      	ldr	r2, [pc, #220]	; (800296c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	fbb2 f2f3 	udiv	r2, r2, r3
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	fb02 f303 	mul.w	r3, r2, r3
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800289e:	e004      	b.n	80028aa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	4a33      	ldr	r2, [pc, #204]	; (8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80028a4:	fb02 f303 	mul.w	r3, r2, r3
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80028aa:	4b2f      	ldr	r3, [pc, #188]	; (8002968 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b6:	d102      	bne.n	80028be <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80028b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80028bc:	e04a      	b.n	8002954 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80028be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4a2c      	ldr	r2, [pc, #176]	; (8002974 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80028c4:	fba2 2303 	umull	r2, r3, r2, r3
 80028c8:	085b      	lsrs	r3, r3, #1
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80028cc:	e042      	b.n	8002954 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80028ce:	4b26      	ldr	r3, [pc, #152]	; (8002968 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028de:	d108      	bne.n	80028f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80028ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f0:	e01f      	b.n	8002932 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028fc:	d109      	bne.n	8002912 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80028fe:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800290a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002910:	e00f      	b.n	8002932 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002918:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800291c:	d11c      	bne.n	8002958 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d016      	beq.n	8002958 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800292a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002930:	e012      	b.n	8002958 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002932:	e011      	b.n	8002958 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002934:	f7ff fe78 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	0b9b      	lsrs	r3, r3, #14
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	3301      	adds	r3, #1
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	fbb2 f3f3 	udiv	r3, r2, r3
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800294e:	e004      	b.n	800295a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002950:	bf00      	nop
 8002952:	e002      	b.n	800295a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002954:	bf00      	nop
 8002956:	e000      	b.n	800295a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002958:	bf00      	nop
    }
  }
  return (frequency);
 800295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800295c:	4618      	mov	r0, r3
 800295e:	3734      	adds	r7, #52	; 0x34
 8002960:	46bd      	mov	sp, r7
 8002962:	bd90      	pop	{r4, r7, pc}
 8002964:	080034dc 	.word	0x080034dc
 8002968:	40021000 	.word	0x40021000
 800296c:	007a1200 	.word	0x007a1200
 8002970:	003d0900 	.word	0x003d0900
 8002974:	aaaaaaab 	.word	0xaaaaaaab

08002978 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e03f      	b.n	8002a0a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fd ff62 	bl	8000868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2224      	movs	r2, #36	; 0x24
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 fcbf 	bl	8003340 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b086      	sub	sp, #24
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b20      	cmp	r3, #32
 8002a2a:	d13c      	bne.n	8002aa6 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e035      	b.n	8002aa8 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e02e      	b.n	8002aa8 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 faa4 	bl	8002fac <UART_Start_Receive_DMA>
 8002a64:	4603      	mov	r3, r0
 8002a66:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002a68:	7dfb      	ldrb	r3, [r7, #23]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d119      	bne.n	8002aa2 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d113      	bne.n	8002a9e <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0210 	orr.w	r2, r2, #16
 8002a9a:	60da      	str	r2, [r3, #12]
 8002a9c:	e001      	b.n	8002aa2 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8002aa2:	7dfb      	ldrb	r3, [r7, #23]
 8002aa4:	e000      	b.n	8002aa8 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8002aa6:	2302      	movs	r3, #2
  }
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10d      	bne.n	8002b02 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_UART_IRQHandler+0x52>
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fb76 	bl	80031ec <UART_Receive_IT>
      return;
 8002b00:	e17b      	b.n	8002dfa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80b1 	beq.w	8002c6c <HAL_UART_IRQHandler+0x1bc>
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d105      	bne.n	8002b20 <HAL_UART_IRQHandler+0x70>
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 80a6 	beq.w	8002c6c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_UART_IRQHandler+0x90>
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	f043 0201 	orr.w	r2, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <HAL_UART_IRQHandler+0xb0>
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	f043 0202 	orr.w	r2, r3, #2
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_UART_IRQHandler+0xd0>
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f043 0204 	orr.w	r2, r3, #4
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00f      	beq.n	8002baa <HAL_UART_IRQHandler+0xfa>
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d104      	bne.n	8002b9e <HAL_UART_IRQHandler+0xee>
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f043 0208 	orr.w	r2, r3, #8
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 811e 	beq.w	8002df0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d007      	beq.n	8002bce <HAL_UART_IRQHandler+0x11e>
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fb0f 	bl	80031ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf14      	ite	ne
 8002bdc:	2301      	movne	r3, #1
 8002bde:	2300      	moveq	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d102      	bne.n	8002bf6 <HAL_UART_IRQHandler+0x146>
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d031      	beq.n	8002c5a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fa51 	bl	800309e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d023      	beq.n	8002c52 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c18:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d013      	beq.n	8002c4a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c26:	4a76      	ldr	r2, [pc, #472]	; (8002e00 <HAL_UART_IRQHandler+0x350>)
 8002c28:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe fdb2 	bl	8001798 <HAL_DMA_Abort_IT>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d016      	beq.n	8002c68 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c44:	4610      	mov	r0, r2
 8002c46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c48:	e00e      	b.n	8002c68 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f8f5 	bl	8002e3a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c50:	e00a      	b.n	8002c68 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f8f1 	bl	8002e3a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c58:	e006      	b.n	8002c68 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f8ed 	bl	8002e3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c66:	e0c3      	b.n	8002df0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c68:	bf00      	nop
    return;
 8002c6a:	e0c1      	b.n	8002df0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	f040 80a1 	bne.w	8002db8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 809b 	beq.w	8002db8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8095 	beq.w	8002db8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d04e      	beq.n	8002d50 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002cbc:	8a3b      	ldrh	r3, [r7, #16]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 8098 	beq.w	8002df4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cc8:	8a3a      	ldrh	r2, [r7, #16]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	f080 8092 	bcs.w	8002df4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	8a3a      	ldrh	r2, [r7, #16]
 8002cd4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d02b      	beq.n	8002d38 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cee:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d0e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0210 	bic.w	r2, r2, #16
 8002d2c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe fcf5 	bl	8001722 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	4619      	mov	r1, r3
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7fd fb01 	bl	8000350 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d4e:	e051      	b.n	8002df4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d047      	beq.n	8002df8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002d68:	8a7b      	ldrh	r3, [r7, #18]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d044      	beq.n	8002df8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d7c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0201 	bic.w	r2, r2, #1
 8002d8c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0210 	bic.w	r2, r2, #16
 8002daa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002dac:	8a7b      	ldrh	r3, [r7, #18]
 8002dae:	4619      	mov	r1, r3
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7fd facd 	bl	8000350 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002db6:	e01f      	b.n	8002df8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x324>
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f9a6 	bl	800311e <UART_Transmit_IT>
    return;
 8002dd2:	e012      	b.n	8002dfa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00d      	beq.n	8002dfa <HAL_UART_IRQHandler+0x34a>
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d008      	beq.n	8002dfa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f9e7 	bl	80031bc <UART_EndTransmit_IT>
    return;
 8002dee:	e004      	b.n	8002dfa <HAL_UART_IRQHandler+0x34a>
    return;
 8002df0:	bf00      	nop
 8002df2:	e002      	b.n	8002dfa <HAL_UART_IRQHandler+0x34a>
      return;
 8002df4:	bf00      	nop
 8002df6:	e000      	b.n	8002dfa <HAL_UART_IRQHandler+0x34a>
      return;
 8002df8:	bf00      	nop
  }
}
 8002dfa:	3728      	adds	r7, #40	; 0x28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	080030f7 	.word	0x080030f7

08002e04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d12a      	bne.n	8002ebe <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e7c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0201 	bic.w	r2, r2, #1
 8002e8c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e9c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d107      	bne.n	8002ebe <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0210 	bic.w	r2, r2, #16
 8002ebc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d106      	bne.n	8002ed4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002eca:	4619      	mov	r1, r3
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f7fd fa3f 	bl	8000350 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ed2:	e002      	b.n	8002eda <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f7ff ff9e 	bl	8002e16 <HAL_UART_RxCpltCallback>
}
 8002eda:	bf00      	nop
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d108      	bne.n	8002f0a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002efc:	085b      	lsrs	r3, r3, #1
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	4619      	mov	r1, r3
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f7fd fa24 	bl	8000350 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f08:	e002      	b.n	8002f10 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f7ff ff8c 	bl	8002e28 <HAL_UART_RxHalfCpltCallback>
}
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf14      	ite	ne
 8002f38:	2301      	movne	r3, #1
 8002f3a:	2300      	moveq	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b21      	cmp	r3, #33	; 0x21
 8002f4a:	d108      	bne.n	8002f5e <UART_DMAError+0x46>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2200      	movs	r2, #0
 8002f56:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002f58:	68b8      	ldr	r0, [r7, #8]
 8002f5a:	f000 f88b 	bl	8003074 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b22      	cmp	r3, #34	; 0x22
 8002f7e:	d108      	bne.n	8002f92 <UART_DMAError+0x7a>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002f8c:	68b8      	ldr	r0, [r7, #8]
 8002f8e:	f000 f886 	bl	800309e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	f043 0210 	orr.w	r2, r3, #16
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f9e:	68b8      	ldr	r0, [r7, #8]
 8002fa0:	f7ff ff4b 	bl	8002e3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2222      	movs	r2, #34	; 0x22
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	4a23      	ldr	r2, [pc, #140]	; (8003068 <UART_Start_Receive_DMA+0xbc>)
 8002fda:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	4a22      	ldr	r2, [pc, #136]	; (800306c <UART_Start_Receive_DMA+0xc0>)
 8002fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	4a21      	ldr	r2, [pc, #132]	; (8003070 <UART_Start_Receive_DMA+0xc4>)
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002ff4:	f107 0308 	add.w	r3, r7, #8
 8002ff8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3304      	adds	r3, #4
 8003004:	4619      	mov	r1, r3
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	f7fe fb2a 	bl	8001664 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800303c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0201 	orr.w	r2, r2, #1
 800304c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695a      	ldr	r2, [r3, #20]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800305c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	08002e4d 	.word	0x08002e4d
 800306c:	08002ee3 	.word	0x08002ee3
 8003070:	08002f19 	.word	0x08002f19

08003074 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800308a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr

0800309e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80030b4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695a      	ldr	r2, [r3, #20]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0201 	bic.w	r2, r2, #1
 80030c4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d107      	bne.n	80030de <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0210 	bic.w	r2, r2, #16
 80030dc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr

080030f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f7ff fe92 	bl	8002e3a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800311e:	b480      	push	{r7}
 8003120:	b085      	sub	sp, #20
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b21      	cmp	r3, #33	; 0x21
 8003130:	d13e      	bne.n	80031b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800313a:	d114      	bne.n	8003166 <UART_Transmit_IT+0x48>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d110      	bne.n	8003166 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003158:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	1c9a      	adds	r2, r3, #2
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	621a      	str	r2, [r3, #32]
 8003164:	e008      	b.n	8003178 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	1c59      	adds	r1, r3, #1
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6211      	str	r1, [r2, #32]
 8003170:	781a      	ldrb	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b29b      	uxth	r3, r3
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	4619      	mov	r1, r3
 8003186:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10f      	bne.n	80031ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800319a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e000      	b.n	80031b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
  }
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff fe11 	bl	8002e04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b22      	cmp	r3, #34	; 0x22
 80031fe:	f040 8099 	bne.w	8003334 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320a:	d117      	bne.n	800323c <UART_Receive_IT+0x50>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d113      	bne.n	800323c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322a:	b29a      	uxth	r2, r3
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	1c9a      	adds	r2, r3, #2
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	629a      	str	r2, [r3, #40]	; 0x28
 800323a:	e026      	b.n	800328a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324e:	d007      	beq.n	8003260 <UART_Receive_IT+0x74>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10a      	bne.n	800326e <UART_Receive_IT+0x82>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d106      	bne.n	800326e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	e008      	b.n	8003280 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800327a:	b2da      	uxtb	r2, r3
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b29b      	uxth	r3, r3
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	4619      	mov	r1, r3
 8003298:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800329a:	2b00      	cmp	r3, #0
 800329c:	d148      	bne.n	8003330 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0220 	bic.w	r2, r2, #32
 80032ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695a      	ldr	r2, [r3, #20]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0201 	bic.w	r2, r2, #1
 80032cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d123      	bne.n	8003326 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0210 	bic.w	r2, r2, #16
 80032f2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0310 	and.w	r3, r3, #16
 80032fe:	2b10      	cmp	r3, #16
 8003300:	d10a      	bne.n	8003318 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800331c:	4619      	mov	r1, r3
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fd f816 	bl	8000350 <HAL_UARTEx_RxEventCallback>
 8003324:	e002      	b.n	800332c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff fd75 	bl	8002e16 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	e002      	b.n	8003336 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	e000      	b.n	8003336 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003334:	2302      	movs	r3, #2
  }
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800337a:	f023 030c 	bic.w	r3, r3, #12
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	430b      	orrs	r3, r1
 8003386:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a2c      	ldr	r2, [pc, #176]	; (8003454 <UART_SetConfig+0x114>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d103      	bne.n	80033b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033a8:	f7ff f93e 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	e002      	b.n	80033b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033b0:	f7ff f926 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 80033b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	009a      	lsls	r2, r3, #2
 80033c0:	441a      	add	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033cc:	4a22      	ldr	r2, [pc, #136]	; (8003458 <UART_SetConfig+0x118>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	0119      	lsls	r1, r3, #4
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	009a      	lsls	r2, r3, #2
 80033e0:	441a      	add	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ec:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <UART_SetConfig+0x118>)
 80033ee:	fba3 0302 	umull	r0, r3, r3, r2
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	2064      	movs	r0, #100	; 0x64
 80033f6:	fb00 f303 	mul.w	r3, r0, r3
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	3332      	adds	r3, #50	; 0x32
 8003400:	4a15      	ldr	r2, [pc, #84]	; (8003458 <UART_SetConfig+0x118>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800340c:	4419      	add	r1, r3
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	009a      	lsls	r2, r3, #2
 8003418:	441a      	add	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	fbb2 f2f3 	udiv	r2, r2, r3
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <UART_SetConfig+0x118>)
 8003426:	fba3 0302 	umull	r0, r3, r3, r2
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	2064      	movs	r0, #100	; 0x64
 800342e:	fb00 f303 	mul.w	r3, r0, r3
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	3332      	adds	r3, #50	; 0x32
 8003438:	4a07      	ldr	r2, [pc, #28]	; (8003458 <UART_SetConfig+0x118>)
 800343a:	fba2 2303 	umull	r2, r3, r2, r3
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	f003 020f 	and.w	r2, r3, #15
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	440a      	add	r2, r1
 800344a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800344c:	bf00      	nop
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40013800 	.word	0x40013800
 8003458:	51eb851f 	.word	0x51eb851f

0800345c <__libc_init_array>:
 800345c:	b570      	push	{r4, r5, r6, lr}
 800345e:	2600      	movs	r6, #0
 8003460:	4d0c      	ldr	r5, [pc, #48]	; (8003494 <__libc_init_array+0x38>)
 8003462:	4c0d      	ldr	r4, [pc, #52]	; (8003498 <__libc_init_array+0x3c>)
 8003464:	1b64      	subs	r4, r4, r5
 8003466:	10a4      	asrs	r4, r4, #2
 8003468:	42a6      	cmp	r6, r4
 800346a:	d109      	bne.n	8003480 <__libc_init_array+0x24>
 800346c:	f000 f822 	bl	80034b4 <_init>
 8003470:	2600      	movs	r6, #0
 8003472:	4d0a      	ldr	r5, [pc, #40]	; (800349c <__libc_init_array+0x40>)
 8003474:	4c0a      	ldr	r4, [pc, #40]	; (80034a0 <__libc_init_array+0x44>)
 8003476:	1b64      	subs	r4, r4, r5
 8003478:	10a4      	asrs	r4, r4, #2
 800347a:	42a6      	cmp	r6, r4
 800347c:	d105      	bne.n	800348a <__libc_init_array+0x2e>
 800347e:	bd70      	pop	{r4, r5, r6, pc}
 8003480:	f855 3b04 	ldr.w	r3, [r5], #4
 8003484:	4798      	blx	r3
 8003486:	3601      	adds	r6, #1
 8003488:	e7ee      	b.n	8003468 <__libc_init_array+0xc>
 800348a:	f855 3b04 	ldr.w	r3, [r5], #4
 800348e:	4798      	blx	r3
 8003490:	3601      	adds	r6, #1
 8003492:	e7f2      	b.n	800347a <__libc_init_array+0x1e>
 8003494:	08003504 	.word	0x08003504
 8003498:	08003504 	.word	0x08003504
 800349c:	08003504 	.word	0x08003504
 80034a0:	08003508 	.word	0x08003508

080034a4 <memset>:
 80034a4:	4603      	mov	r3, r0
 80034a6:	4402      	add	r2, r0
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d100      	bne.n	80034ae <memset+0xa>
 80034ac:	4770      	bx	lr
 80034ae:	f803 1b01 	strb.w	r1, [r3], #1
 80034b2:	e7f9      	b.n	80034a8 <memset+0x4>

080034b4 <_init>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	bf00      	nop
 80034b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ba:	bc08      	pop	{r3}
 80034bc:	469e      	mov	lr, r3
 80034be:	4770      	bx	lr

080034c0 <_fini>:
 80034c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c2:	bf00      	nop
 80034c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c6:	bc08      	pop	{r3}
 80034c8:	469e      	mov	lr, r3
 80034ca:	4770      	bx	lr
