
test-02 Motors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000644c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08006560  08006560  00016560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006760  08006760  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08006760  08006760  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006760  08006760  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006760  08006760  00016760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006764  08006764  00016764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08006768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000028  08006790  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08006790  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac25  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b18  00000000  00000000  0002ac76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  0002c790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  0002d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017539  00000000  00000000  0002dfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c574  00000000  00000000  000454f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089df9  00000000  00000000  00051a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db85e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003938  00000000  00000000  000db8b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000028 	.word	0x20000028
 800012c:	00000000 	.word	0x00000000
 8000130:	08006544 	.word	0x08006544

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000002c 	.word	0x2000002c
 800014c:	08006544 	.word	0x08006544

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_d2iz>:
 8000b64:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b6c:	d215      	bcs.n	8000b9a <__aeabi_d2iz+0x36>
 8000b6e:	d511      	bpl.n	8000b94 <__aeabi_d2iz+0x30>
 8000b70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b78:	d912      	bls.n	8000ba0 <__aeabi_d2iz+0x3c>
 8000b7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	bf18      	it	ne
 8000b90:	4240      	negne	r0, r0
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d105      	bne.n	8000bac <__aeabi_d2iz+0x48>
 8000ba0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	bf08      	it	eq
 8000ba6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_d2f>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bbc:	bf24      	itt	cs
 8000bbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc6:	d90d      	bls.n	8000be4 <__aeabi_d2f+0x30>
 8000bc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bdc:	bf08      	it	eq
 8000bde:	f020 0001 	biceq.w	r0, r0, #1
 8000be2:	4770      	bx	lr
 8000be4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be8:	d121      	bne.n	8000c2e <__aeabi_d2f+0x7a>
 8000bea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bee:	bfbc      	itt	lt
 8000bf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	4770      	bxlt	lr
 8000bf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfe:	f1c2 0218 	rsb	r2, r2, #24
 8000c02:	f1c2 0c20 	rsb	ip, r2, #32
 8000c06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0e:	bf18      	it	ne
 8000c10:	f040 0001 	orrne.w	r0, r0, #1
 8000c14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c20:	ea40 000c 	orr.w	r0, r0, ip
 8000c24:	fa23 f302 	lsr.w	r3, r3, r2
 8000c28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c2c:	e7cc      	b.n	8000bc8 <__aeabi_d2f+0x14>
 8000c2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c32:	d107      	bne.n	8000c44 <__aeabi_d2f+0x90>
 8000c34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c38:	bf1e      	ittt	ne
 8000c3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c42:	4770      	bxne	lr
 8000c44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <__aeabi_frsub>:
 8000c54:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	e002      	b.n	8000c60 <__addsf3>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_fsub>:
 8000c5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c60 <__addsf3>:
 8000c60:	0042      	lsls	r2, r0, #1
 8000c62:	bf1f      	itttt	ne
 8000c64:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c68:	ea92 0f03 	teqne	r2, r3
 8000c6c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c70:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c74:	d06a      	beq.n	8000d4c <__addsf3+0xec>
 8000c76:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c7e:	bfc1      	itttt	gt
 8000c80:	18d2      	addgt	r2, r2, r3
 8000c82:	4041      	eorgt	r1, r0
 8000c84:	4048      	eorgt	r0, r1
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	bfb8      	it	lt
 8000c8a:	425b      	neglt	r3, r3
 8000c8c:	2b19      	cmp	r3, #25
 8000c8e:	bf88      	it	hi
 8000c90:	4770      	bxhi	lr
 8000c92:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c9e:	bf18      	it	ne
 8000ca0:	4240      	negne	r0, r0
 8000ca2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ca6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000caa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cae:	bf18      	it	ne
 8000cb0:	4249      	negne	r1, r1
 8000cb2:	ea92 0f03 	teq	r2, r3
 8000cb6:	d03f      	beq.n	8000d38 <__addsf3+0xd8>
 8000cb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000cbc:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc0:	eb10 000c 	adds.w	r0, r0, ip
 8000cc4:	f1c3 0320 	rsb	r3, r3, #32
 8000cc8:	fa01 f103 	lsl.w	r1, r1, r3
 8000ccc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__addsf3+0x78>
 8000cd2:	4249      	negs	r1, r1
 8000cd4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cd8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cdc:	d313      	bcc.n	8000d06 <__addsf3+0xa6>
 8000cde:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ce2:	d306      	bcc.n	8000cf2 <__addsf3+0x92>
 8000ce4:	0840      	lsrs	r0, r0, #1
 8000ce6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cea:	f102 0201 	add.w	r2, r2, #1
 8000cee:	2afe      	cmp	r2, #254	; 0xfe
 8000cf0:	d251      	bcs.n	8000d96 <__addsf3+0x136>
 8000cf2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfa:	bf08      	it	eq
 8000cfc:	f020 0001 	biceq.w	r0, r0, #1
 8000d00:	ea40 0003 	orr.w	r0, r0, r3
 8000d04:	4770      	bx	lr
 8000d06:	0049      	lsls	r1, r1, #1
 8000d08:	eb40 0000 	adc.w	r0, r0, r0
 8000d0c:	3a01      	subs	r2, #1
 8000d0e:	bf28      	it	cs
 8000d10:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d14:	d2ed      	bcs.n	8000cf2 <__addsf3+0x92>
 8000d16:	fab0 fc80 	clz	ip, r0
 8000d1a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d1e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d22:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d26:	bfaa      	itet	ge
 8000d28:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d2c:	4252      	neglt	r2, r2
 8000d2e:	4318      	orrge	r0, r3
 8000d30:	bfbc      	itt	lt
 8000d32:	40d0      	lsrlt	r0, r2
 8000d34:	4318      	orrlt	r0, r3
 8000d36:	4770      	bx	lr
 8000d38:	f092 0f00 	teq	r2, #0
 8000d3c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d40:	bf06      	itte	eq
 8000d42:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d46:	3201      	addeq	r2, #1
 8000d48:	3b01      	subne	r3, #1
 8000d4a:	e7b5      	b.n	8000cb8 <__addsf3+0x58>
 8000d4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d54:	bf18      	it	ne
 8000d56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5a:	d021      	beq.n	8000da0 <__addsf3+0x140>
 8000d5c:	ea92 0f03 	teq	r2, r3
 8000d60:	d004      	beq.n	8000d6c <__addsf3+0x10c>
 8000d62:	f092 0f00 	teq	r2, #0
 8000d66:	bf08      	it	eq
 8000d68:	4608      	moveq	r0, r1
 8000d6a:	4770      	bx	lr
 8000d6c:	ea90 0f01 	teq	r0, r1
 8000d70:	bf1c      	itt	ne
 8000d72:	2000      	movne	r0, #0
 8000d74:	4770      	bxne	lr
 8000d76:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d7a:	d104      	bne.n	8000d86 <__addsf3+0x126>
 8000d7c:	0040      	lsls	r0, r0, #1
 8000d7e:	bf28      	it	cs
 8000d80:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d8a:	bf3c      	itt	cc
 8000d8c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d90:	4770      	bxcc	lr
 8000d92:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d96:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d9e:	4770      	bx	lr
 8000da0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da4:	bf16      	itet	ne
 8000da6:	4608      	movne	r0, r1
 8000da8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dac:	4601      	movne	r1, r0
 8000dae:	0242      	lsls	r2, r0, #9
 8000db0:	bf06      	itte	eq
 8000db2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000db6:	ea90 0f01 	teqeq	r0, r1
 8000dba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_ui2f>:
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e004      	b.n	8000dd0 <__aeabi_i2f+0x8>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_i2f>:
 8000dc8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dcc:	bf48      	it	mi
 8000dce:	4240      	negmi	r0, r0
 8000dd0:	ea5f 0c00 	movs.w	ip, r0
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ddc:	4601      	mov	r1, r0
 8000dde:	f04f 0000 	mov.w	r0, #0
 8000de2:	e01c      	b.n	8000e1e <__aeabi_l2f+0x2a>

08000de4 <__aeabi_ul2f>:
 8000de4:	ea50 0201 	orrs.w	r2, r0, r1
 8000de8:	bf08      	it	eq
 8000dea:	4770      	bxeq	lr
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e00a      	b.n	8000e08 <__aeabi_l2f+0x14>
 8000df2:	bf00      	nop

08000df4 <__aeabi_l2f>:
 8000df4:	ea50 0201 	orrs.w	r2, r0, r1
 8000df8:	bf08      	it	eq
 8000dfa:	4770      	bxeq	lr
 8000dfc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e00:	d502      	bpl.n	8000e08 <__aeabi_l2f+0x14>
 8000e02:	4240      	negs	r0, r0
 8000e04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e08:	ea5f 0c01 	movs.w	ip, r1
 8000e0c:	bf02      	ittt	eq
 8000e0e:	4684      	moveq	ip, r0
 8000e10:	4601      	moveq	r1, r0
 8000e12:	2000      	moveq	r0, #0
 8000e14:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e18:	bf08      	it	eq
 8000e1a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e22:	fabc f28c 	clz	r2, ip
 8000e26:	3a08      	subs	r2, #8
 8000e28:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e2c:	db10      	blt.n	8000e50 <__aeabi_l2f+0x5c>
 8000e2e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e32:	4463      	add	r3, ip
 8000e34:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e38:	f1c2 0220 	rsb	r2, r2, #32
 8000e3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e40:	fa20 f202 	lsr.w	r2, r0, r2
 8000e44:	eb43 0002 	adc.w	r0, r3, r2
 8000e48:	bf08      	it	eq
 8000e4a:	f020 0001 	biceq.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	f102 0220 	add.w	r2, r2, #32
 8000e54:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e58:	f1c2 0220 	rsb	r2, r2, #32
 8000e5c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e60:	fa21 f202 	lsr.w	r2, r1, r2
 8000e64:	eb43 0002 	adc.w	r0, r3, r2
 8000e68:	bf08      	it	eq
 8000e6a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e6e:	4770      	bx	lr

08000e70 <__gesf2>:
 8000e70:	f04f 3cff 	mov.w	ip, #4294967295
 8000e74:	e006      	b.n	8000e84 <__cmpsf2+0x4>
 8000e76:	bf00      	nop

08000e78 <__lesf2>:
 8000e78:	f04f 0c01 	mov.w	ip, #1
 8000e7c:	e002      	b.n	8000e84 <__cmpsf2+0x4>
 8000e7e:	bf00      	nop

08000e80 <__cmpsf2>:
 8000e80:	f04f 0c01 	mov.w	ip, #1
 8000e84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e88:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e94:	bf18      	it	ne
 8000e96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e9a:	d011      	beq.n	8000ec0 <__cmpsf2+0x40>
 8000e9c:	b001      	add	sp, #4
 8000e9e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ea2:	bf18      	it	ne
 8000ea4:	ea90 0f01 	teqne	r0, r1
 8000ea8:	bf58      	it	pl
 8000eaa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eae:	bf88      	it	hi
 8000eb0:	17c8      	asrhi	r0, r1, #31
 8000eb2:	bf38      	it	cc
 8000eb4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000eb8:	bf18      	it	ne
 8000eba:	f040 0001 	orrne.w	r0, r0, #1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec4:	d102      	bne.n	8000ecc <__cmpsf2+0x4c>
 8000ec6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eca:	d105      	bne.n	8000ed8 <__cmpsf2+0x58>
 8000ecc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ed0:	d1e4      	bne.n	8000e9c <__cmpsf2+0x1c>
 8000ed2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ed6:	d0e1      	beq.n	8000e9c <__cmpsf2+0x1c>
 8000ed8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__aeabi_cfrcmple>:
 8000ee0:	4684      	mov	ip, r0
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	4661      	mov	r1, ip
 8000ee6:	e7ff      	b.n	8000ee8 <__aeabi_cfcmpeq>

08000ee8 <__aeabi_cfcmpeq>:
 8000ee8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000eea:	f7ff ffc9 	bl	8000e80 <__cmpsf2>
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	bf48      	it	mi
 8000ef2:	f110 0f00 	cmnmi.w	r0, #0
 8000ef6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ef8 <__aeabi_fcmpeq>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff fff4 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f00:	bf0c      	ite	eq
 8000f02:	2001      	moveq	r0, #1
 8000f04:	2000      	movne	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmplt>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffea 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f14:	bf34      	ite	cc
 8000f16:	2001      	movcc	r0, #1
 8000f18:	2000      	movcs	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmple>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffe0 	bl	8000ee8 <__aeabi_cfcmpeq>
 8000f28:	bf94      	ite	ls
 8000f2a:	2001      	movls	r0, #1
 8000f2c:	2000      	movhi	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmpge>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffd2 	bl	8000ee0 <__aeabi_cfrcmple>
 8000f3c:	bf94      	ite	ls
 8000f3e:	2001      	movls	r0, #1
 8000f40:	2000      	movhi	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmpgt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffc8 	bl	8000ee0 <__aeabi_cfrcmple>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_f2iz>:
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f64:	d30f      	bcc.n	8000f86 <__aeabi_f2iz+0x2a>
 8000f66:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f6a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6e:	d90d      	bls.n	8000f8c <__aeabi_f2iz+0x30>
 8000f70:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f78:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f7c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f80:	bf18      	it	ne
 8000f82:	4240      	negne	r0, r0
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr
 8000f8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f90:	d101      	bne.n	8000f96 <__aeabi_f2iz+0x3a>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	d105      	bne.n	8000fa2 <__aeabi_f2iz+0x46>
 8000f96:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f9a:	bf08      	it	eq
 8000f9c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fa0:	4770      	bx	lr
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	4770      	bx	lr

08000fa8 <__aeabi_f2uiz>:
 8000fa8:	0042      	lsls	r2, r0, #1
 8000faa:	d20e      	bcs.n	8000fca <__aeabi_f2uiz+0x22>
 8000fac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fb0:	d30b      	bcc.n	8000fca <__aeabi_f2uiz+0x22>
 8000fb2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fba:	d409      	bmi.n	8000fd0 <__aeabi_f2uiz+0x28>
 8000fbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr
 8000fd0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd4:	d101      	bne.n	8000fda <__aeabi_f2uiz+0x32>
 8000fd6:	0242      	lsls	r2, r0, #9
 8000fd8:	d102      	bne.n	8000fe0 <__aeabi_f2uiz+0x38>
 8000fda:	f04f 30ff 	mov.w	r0, #4294967295
 8000fde:	4770      	bx	lr
 8000fe0:	f04f 0000 	mov.w	r0, #0
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <delay_us>:
uint8_t tx_data[4];
uint32_t Last_Time = 0;
uint16_t oldPos=0, newPos=0;
int beginTime;
void delay_us (uint16_t us)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <delay_us+0x2c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8000ffa:	bf00      	nop
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <delay_us+0x2c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	429a      	cmp	r2, r3
 8001006:	d3f9      	bcc.n	8000ffc <delay_us+0x14>
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	20000044 	.word	0x20000044

08001018 <motor>:

void motor(int L1, int L2, int R2, int R1){
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	603b      	str	r3, [r7, #0]
	if(L1 > 15 && L1 <-15) L1 = 0;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	dd05      	ble.n	8001038 <motor+0x20>
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f113 0f0f 	cmn.w	r3, #15
 8001032:	da01      	bge.n	8001038 <motor+0x20>
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
	if(L2 > 15 && L2 <-15) L2 = 0;
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	2b0f      	cmp	r3, #15
 800103c:	dd05      	ble.n	800104a <motor+0x32>
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	f113 0f0f 	cmn.w	r3, #15
 8001044:	da01      	bge.n	800104a <motor+0x32>
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
	if(R2 > 15 && R2 <-15) R2 = 0;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	dd05      	ble.n	800105c <motor+0x44>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f113 0f0f 	cmn.w	r3, #15
 8001056:	da01      	bge.n	800105c <motor+0x44>
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
	if(R1 > 15 && R1 <-15) R1 = 0;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	2b0f      	cmp	r3, #15
 8001060:	dd05      	ble.n	800106e <motor+0x56>
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	f113 0f0f 	cmn.w	r3, #15
 8001068:	da01      	bge.n	800106e <motor+0x56>
 800106a:	2300      	movs	r3, #0
 800106c:	603b      	str	r3, [r7, #0]

	L1 = L1*255;
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4613      	mov	r3, r2
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	1a9b      	subs	r3, r3, r2
 8001076:	60fb      	str	r3, [r7, #12]
	L2 = L2*255;
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	4613      	mov	r3, r2
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	1a9b      	subs	r3, r3, r2
 8001080:	60bb      	str	r3, [r7, #8]
	R2 = R2*255;
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	4613      	mov	r3, r2
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	1a9b      	subs	r3, r3, r2
 800108a:	607b      	str	r3, [r7, #4]
	R1 = R1*255*1.35;
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	4613      	mov	r3, r2
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	1a9b      	subs	r3, r3, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fa61 	bl	800055c <__aeabi_i2d>
 800109a:	a38d      	add	r3, pc, #564	; (adr r3, 80012d0 <motor+0x2b8>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff fac6 	bl	8000630 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fd5a 	bl	8000b64 <__aeabi_d2iz>
 80010b0:	4603      	mov	r3, r0
 80010b2:	603b      	str	r3, [r7, #0]

	if(L1 > 65535) L1 = 65535;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ba:	db02      	blt.n	80010c2 <motor+0xaa>
 80010bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c0:	60fb      	str	r3, [r7, #12]
	if(L2 > 65535) L2 = 65535;
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c8:	db02      	blt.n	80010d0 <motor+0xb8>
 80010ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ce:	60bb      	str	r3, [r7, #8]
	if(R2 > 65535) R2 = 65535;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d6:	db02      	blt.n	80010de <motor+0xc6>
 80010d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010dc:	607b      	str	r3, [r7, #4]
	if(R1 > 65535) R1 = 65535;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e4:	db02      	blt.n	80010ec <motor+0xd4>
 80010e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ea:	603b      	str	r3, [r7, #0]

	if(L1 < -65535) L1 = -65535;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80010f2:	dc01      	bgt.n	80010f8 <motor+0xe0>
 80010f4:	4b78      	ldr	r3, [pc, #480]	; (80012d8 <motor+0x2c0>)
 80010f6:	60fb      	str	r3, [r7, #12]
	if(L2 < -65535) L2 = -65535;
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80010fe:	dc01      	bgt.n	8001104 <motor+0xec>
 8001100:	4b75      	ldr	r3, [pc, #468]	; (80012d8 <motor+0x2c0>)
 8001102:	60bb      	str	r3, [r7, #8]
	if(R2 < -65535) R2 = -65535;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800110a:	dc01      	bgt.n	8001110 <motor+0xf8>
 800110c:	4b72      	ldr	r3, [pc, #456]	; (80012d8 <motor+0x2c0>)
 800110e:	607b      	str	r3, [r7, #4]
	if(R1 < -65535) R1 = -65535;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001116:	dc01      	bgt.n	800111c <motor+0x104>
 8001118:	4b6f      	ldr	r3, [pc, #444]	; (80012d8 <motor+0x2c0>)
 800111a:	603b      	str	r3, [r7, #0]

	// ------------------ L1
	if(L2 == 0){
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d110      	bne.n	8001144 <motor+0x12c>
		HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001128:	486c      	ldr	r0, [pc, #432]	; (80012dc <motor+0x2c4>)
 800112a:	f002 f93c 	bl	80033a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001134:	4869      	ldr	r0, [pc, #420]	; (80012dc <motor+0x2c4>)
 8001136:	f002 f936 	bl	80033a6 <HAL_GPIO_WritePin>
		TIM4->CCR1 = 65535;
 800113a:	4b69      	ldr	r3, [pc, #420]	; (80012e0 <motor+0x2c8>)
 800113c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001140:	635a      	str	r2, [r3, #52]	; 0x34
 8001142:	e022      	b.n	800118a <motor+0x172>
	}
	else if(L2 > 0){
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	dd0f      	ble.n	800116a <motor+0x152>
		HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, 1);
 800114a:	2201      	movs	r2, #1
 800114c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001150:	4862      	ldr	r0, [pc, #392]	; (80012dc <motor+0x2c4>)
 8001152:	f002 f928 	bl	80033a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800115c:	485f      	ldr	r0, [pc, #380]	; (80012dc <motor+0x2c4>)
 800115e:	f002 f922 	bl	80033a6 <HAL_GPIO_WritePin>
		TIM4->CCR1 = L2;
 8001162:	4a5f      	ldr	r2, [pc, #380]	; (80012e0 <motor+0x2c8>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	6353      	str	r3, [r2, #52]	; 0x34
 8001168:	e00f      	b.n	800118a <motor+0x172>
	}else{
		HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001170:	485a      	ldr	r0, [pc, #360]	; (80012dc <motor+0x2c4>)
 8001172:	f002 f918 	bl	80033a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, 1);
 8001176:	2201      	movs	r2, #1
 8001178:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800117c:	4857      	ldr	r0, [pc, #348]	; (80012dc <motor+0x2c4>)
 800117e:	f002 f912 	bl	80033a6 <HAL_GPIO_WritePin>
		TIM4->CCR1 = -L2;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	425a      	negs	r2, r3
 8001186:	4b56      	ldr	r3, [pc, #344]	; (80012e0 <motor+0x2c8>)
 8001188:	635a      	str	r2, [r3, #52]	; 0x34
	}
	// ------------------ L2
	if(L1 == 0){
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d110      	bne.n	80011b2 <motor+0x19a>
		HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001196:	4851      	ldr	r0, [pc, #324]	; (80012dc <motor+0x2c4>)
 8001198:	f002 f905 	bl	80033a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a2:	484e      	ldr	r0, [pc, #312]	; (80012dc <motor+0x2c4>)
 80011a4:	f002 f8ff 	bl	80033a6 <HAL_GPIO_WritePin>
		TIM4->CCR2 = 65535;
 80011a8:	4b4d      	ldr	r3, [pc, #308]	; (80012e0 <motor+0x2c8>)
 80011aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ae:	639a      	str	r2, [r3, #56]	; 0x38
 80011b0:	e022      	b.n	80011f8 <motor+0x1e0>
	}
	else if(L1 > 0){
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	dd0f      	ble.n	80011d8 <motor+0x1c0>
		HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, 1);
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011be:	4847      	ldr	r0, [pc, #284]	; (80012dc <motor+0x2c4>)
 80011c0:	f002 f8f1 	bl	80033a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ca:	4844      	ldr	r0, [pc, #272]	; (80012dc <motor+0x2c4>)
 80011cc:	f002 f8eb 	bl	80033a6 <HAL_GPIO_WritePin>
		TIM4->CCR2 = L1;
 80011d0:	4a43      	ldr	r2, [pc, #268]	; (80012e0 <motor+0x2c8>)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6393      	str	r3, [r2, #56]	; 0x38
 80011d6:	e00f      	b.n	80011f8 <motor+0x1e0>
	}else{
		HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011de:	483f      	ldr	r0, [pc, #252]	; (80012dc <motor+0x2c4>)
 80011e0:	f002 f8e1 	bl	80033a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, 1);
 80011e4:	2201      	movs	r2, #1
 80011e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ea:	483c      	ldr	r0, [pc, #240]	; (80012dc <motor+0x2c4>)
 80011ec:	f002 f8db 	bl	80033a6 <HAL_GPIO_WritePin>
		TIM4->CCR2 = -L1;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	425a      	negs	r2, r3
 80011f4:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <motor+0x2c8>)
 80011f6:	639a      	str	r2, [r3, #56]	; 0x38
	}
	// ------------------ R2
	if(R2 == 0){
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d110      	bne.n	8001220 <motor+0x208>
		HAL_GPIO_WritePin(INA3_GPIO_Port, INA3_Pin, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001204:	4837      	ldr	r0, [pc, #220]	; (80012e4 <motor+0x2cc>)
 8001206:	f002 f8ce 	bl	80033a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB3_GPIO_Port, INB3_Pin, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001210:	4834      	ldr	r0, [pc, #208]	; (80012e4 <motor+0x2cc>)
 8001212:	f002 f8c8 	bl	80033a6 <HAL_GPIO_WritePin>
		TIM4->CCR3 = 65535;
 8001216:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <motor+0x2c8>)
 8001218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800121c:	63da      	str	r2, [r3, #60]	; 0x3c
 800121e:	e022      	b.n	8001266 <motor+0x24e>
	}
	else if(R2 > 0){
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	dd0f      	ble.n	8001246 <motor+0x22e>
		HAL_GPIO_WritePin(INA3_GPIO_Port, INA3_Pin, 1);
 8001226:	2201      	movs	r2, #1
 8001228:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800122c:	482d      	ldr	r0, [pc, #180]	; (80012e4 <motor+0x2cc>)
 800122e:	f002 f8ba 	bl	80033a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB3_GPIO_Port, INB3_Pin, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001238:	482a      	ldr	r0, [pc, #168]	; (80012e4 <motor+0x2cc>)
 800123a:	f002 f8b4 	bl	80033a6 <HAL_GPIO_WritePin>
		TIM4->CCR3 = R2;
 800123e:	4a28      	ldr	r2, [pc, #160]	; (80012e0 <motor+0x2c8>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001244:	e00f      	b.n	8001266 <motor+0x24e>
	}else{
		HAL_GPIO_WritePin(INA3_GPIO_Port, INA3_Pin, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800124c:	4825      	ldr	r0, [pc, #148]	; (80012e4 <motor+0x2cc>)
 800124e:	f002 f8aa 	bl	80033a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB3_GPIO_Port, INB3_Pin, 1);
 8001252:	2201      	movs	r2, #1
 8001254:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001258:	4822      	ldr	r0, [pc, #136]	; (80012e4 <motor+0x2cc>)
 800125a:	f002 f8a4 	bl	80033a6 <HAL_GPIO_WritePin>
		TIM4->CCR3 = -R2;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	425a      	negs	r2, r3
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <motor+0x2c8>)
 8001264:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	// ------------------ R1
	if(R1 == 0){
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10e      	bne.n	800128a <motor+0x272>
		HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2110      	movs	r1, #16
 8001270:	481a      	ldr	r0, [pc, #104]	; (80012dc <motor+0x2c4>)
 8001272:	f002 f898 	bl	80033a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2120      	movs	r1, #32
 800127a:	4818      	ldr	r0, [pc, #96]	; (80012dc <motor+0x2c4>)
 800127c:	f002 f893 	bl	80033a6 <HAL_GPIO_WritePin>
		TIM4->CCR4 = 65535;
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <motor+0x2c8>)
 8001282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001286:	641a      	str	r2, [r3, #64]	; 0x40
	}else{
		HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, 0);
		HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, 1);
		TIM4->CCR4 = -R1;
	}
}
 8001288:	e01e      	b.n	80012c8 <motor+0x2b0>
	else if(R1 > 0){
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	dd0d      	ble.n	80012ac <motor+0x294>
		HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, 1);
 8001290:	2201      	movs	r2, #1
 8001292:	2110      	movs	r1, #16
 8001294:	4811      	ldr	r0, [pc, #68]	; (80012dc <motor+0x2c4>)
 8001296:	f002 f886 	bl	80033a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2120      	movs	r1, #32
 800129e:	480f      	ldr	r0, [pc, #60]	; (80012dc <motor+0x2c4>)
 80012a0:	f002 f881 	bl	80033a6 <HAL_GPIO_WritePin>
		TIM4->CCR4 = R1;
 80012a4:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <motor+0x2c8>)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012aa:	e00d      	b.n	80012c8 <motor+0x2b0>
		HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2110      	movs	r1, #16
 80012b0:	480a      	ldr	r0, [pc, #40]	; (80012dc <motor+0x2c4>)
 80012b2:	f002 f878 	bl	80033a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, 1);
 80012b6:	2201      	movs	r2, #1
 80012b8:	2120      	movs	r1, #32
 80012ba:	4808      	ldr	r0, [pc, #32]	; (80012dc <motor+0x2c4>)
 80012bc:	f002 f873 	bl	80033a6 <HAL_GPIO_WritePin>
		TIM4->CCR4 = -R1;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	425a      	negs	r2, r3
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <motor+0x2c8>)
 80012c6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	9999999a 	.word	0x9999999a
 80012d4:	3ff59999 	.word	0x3ff59999
 80012d8:	ffff0001 	.word	0xffff0001
 80012dc:	40010c00 	.word	0x40010c00
 80012e0:	40000800 	.word	0x40000800
 80012e4:	40010800 	.word	0x40010800

080012e8 <initGY>:
	if(direction == 8)  motor(-v, -v,  v,  v);
	if(direction == 10) motor(-v,  0,  v,  0);
	if(direction == 12) motor(-v,  v,  v, -v);
	if(direction == 14) motor( 0,  v,  0, -v);
}
void initGY(){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 80012ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f0:	f001 faee 	bl	80028d0 <HAL_Delay>
	HAL_UART_Transmit(&huart2, GY_A5, 1, PHY_FULLDUPLEX_10M);
 80012f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f8:	2201      	movs	r2, #1
 80012fa:	491a      	ldr	r1, [pc, #104]	; (8001364 <initGY+0x7c>)
 80012fc:	481a      	ldr	r0, [pc, #104]	; (8001368 <initGY+0x80>)
 80012fe:	f003 fafa 	bl	80048f6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, GY_54, 1, PHY_FULLDUPLEX_10M);
 8001302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001306:	2201      	movs	r2, #1
 8001308:	4918      	ldr	r1, [pc, #96]	; (800136c <initGY+0x84>)
 800130a:	4817      	ldr	r0, [pc, #92]	; (8001368 <initGY+0x80>)
 800130c:	f003 faf3 	bl	80048f6 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001310:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001314:	f001 fadc 	bl	80028d0 <HAL_Delay>
	HAL_UART_Transmit(&huart2, GY_A5, 1, PHY_FULLDUPLEX_10M);
 8001318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800131c:	2201      	movs	r2, #1
 800131e:	4911      	ldr	r1, [pc, #68]	; (8001364 <initGY+0x7c>)
 8001320:	4811      	ldr	r0, [pc, #68]	; (8001368 <initGY+0x80>)
 8001322:	f003 fae8 	bl	80048f6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, GY_51, 1, PHY_FULLDUPLEX_10M);
 8001326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800132a:	2201      	movs	r2, #1
 800132c:	4910      	ldr	r1, [pc, #64]	; (8001370 <initGY+0x88>)
 800132e:	480e      	ldr	r0, [pc, #56]	; (8001368 <initGY+0x80>)
 8001330:	f003 fae1 	bl	80048f6 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001334:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001338:	f001 faca 	bl	80028d0 <HAL_Delay>
	HAL_UART_Transmit(&huart2, GY_A5, 1, PHY_FULLDUPLEX_10M);
 800133c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001340:	2201      	movs	r2, #1
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <initGY+0x7c>)
 8001344:	4808      	ldr	r0, [pc, #32]	; (8001368 <initGY+0x80>)
 8001346:	f003 fad6 	bl	80048f6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, GY_55, 1, PHY_FULLDUPLEX_10M);
 800134a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800134e:	2201      	movs	r2, #1
 8001350:	4908      	ldr	r1, [pc, #32]	; (8001374 <initGY+0x8c>)
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <initGY+0x80>)
 8001354:	f003 facf 	bl	80048f6 <HAL_UART_Transmit>
	HAL_Delay(500);
 8001358:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800135c:	f001 fab8 	bl	80028d0 <HAL_Delay>
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000004 	.word	0x20000004
 8001368:	20000118 	.word	0x20000118
 800136c:	20000008 	.word	0x20000008
 8001370:	2000000c 	.word	0x2000000c
 8001374:	20000010 	.word	0x20000010

08001378 <delay>:
void delay(int t){
 8001378:	b490      	push	{r4, r7}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	for(register int i=0; i<t; i++);
 8001380:	2400      	movs	r4, #0
 8001382:	e000      	b.n	8001386 <delay+0xe>
 8001384:	3401      	adds	r4, #1
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	429c      	cmp	r4, r3
 800138a:	dbfb      	blt.n	8001384 <delay+0xc>
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bc90      	pop	{r4, r7}
 8001396:	4770      	bx	lr

08001398 <pinMode>:
void pinMode(int state){
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
	if(state == 0) // INPUT
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10e      	bne.n	80013d2 <pinMode+0x3a>
	{
		GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80013b4:	2372      	movs	r3, #114	; 0x72
 80013b6:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2302      	movs	r3, #2
 80013c2:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	4619      	mov	r1, r3
 80013ca:	480c      	ldr	r0, [pc, #48]	; (80013fc <pinMode+0x64>)
 80013cc:	f001 fe50 	bl	8003070 <HAL_GPIO_Init>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	}
}
 80013d0:	e010      	b.n	80013f4 <pinMode+0x5c>
	else if(state == 1) // OUTPUT
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d10d      	bne.n	80013f4 <pinMode+0x5c>
		GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80013d8:	2372      	movs	r3, #114	; 0x72
 80013da:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013dc:	2301      	movs	r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2302      	movs	r3, #2
 80013e6:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	4619      	mov	r1, r3
 80013ee:	4803      	ldr	r0, [pc, #12]	; (80013fc <pinMode+0x64>)
 80013f0:	f001 fe3e 	bl	8003070 <HAL_GPIO_Init>
}
 80013f4:	bf00      	nop
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40010800 	.word	0x40010800

08001400 <getDistances>:
void getDistances(){
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	pinMode(1);
 8001404:	2001      	movs	r0, #1
 8001406:	f7ff ffc7 	bl	8001398 <pinMode>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 800140a:	2201      	movs	r2, #1
 800140c:	2102      	movs	r1, #2
 800140e:	4864      	ldr	r0, [pc, #400]	; (80015a0 <getDistances+0x1a0>)
 8001410:	f001 ffc9 	bl	80033a6 <HAL_GPIO_WritePin>
	delay_us(10);
 8001414:	200a      	movs	r0, #10
 8001416:	f7ff fde7 	bl	8000fe8 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2102      	movs	r1, #2
 800141e:	4860      	ldr	r0, [pc, #384]	; (80015a0 <getDistances+0x1a0>)
 8001420:	f001 ffc1 	bl	80033a6 <HAL_GPIO_WritePin>
	pinMode(0);
 8001424:	2000      	movs	r0, #0
 8001426:	f7ff ffb7 	bl	8001398 <pinMode>
	srf_cnt = 0;
 800142a:	4b5e      	ldr	r3, [pc, #376]	; (80015a4 <getDistances+0x1a4>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0);
 8001430:	bf00      	nop
 8001432:	2102      	movs	r1, #2
 8001434:	485a      	ldr	r0, [pc, #360]	; (80015a0 <getDistances+0x1a0>)
 8001436:	f001 ff9f 	bl	8003378 <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f8      	beq.n	8001432 <getDistances+0x32>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1) srf_cnt++;
 8001440:	e004      	b.n	800144c <getDistances+0x4c>
 8001442:	4b58      	ldr	r3, [pc, #352]	; (80015a4 <getDistances+0x1a4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	4a56      	ldr	r2, [pc, #344]	; (80015a4 <getDistances+0x1a4>)
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	2102      	movs	r1, #2
 800144e:	4854      	ldr	r0, [pc, #336]	; (80015a0 <getDistances+0x1a0>)
 8001450:	f001 ff92 	bl	8003378 <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	2b01      	cmp	r3, #1
 8001458:	d0f3      	beq.n	8001442 <getDistances+0x42>
	Front_Dist = srf_cnt/52;
 800145a:	4b52      	ldr	r3, [pc, #328]	; (80015a4 <getDistances+0x1a4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a52      	ldr	r2, [pc, #328]	; (80015a8 <getDistances+0x1a8>)
 8001460:	fba2 2303 	umull	r2, r3, r2, r3
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	4a51      	ldr	r2, [pc, #324]	; (80015ac <getDistances+0x1ac>)
 8001468:	6013      	str	r3, [r2, #0]

	pinMode(1);
 800146a:	2001      	movs	r0, #1
 800146c:	f7ff ff94 	bl	8001398 <pinMode>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001470:	2201      	movs	r2, #1
 8001472:	2110      	movs	r1, #16
 8001474:	484a      	ldr	r0, [pc, #296]	; (80015a0 <getDistances+0x1a0>)
 8001476:	f001 ff96 	bl	80033a6 <HAL_GPIO_WritePin>
	delay_us(10);
 800147a:	200a      	movs	r0, #10
 800147c:	f7ff fdb4 	bl	8000fe8 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2110      	movs	r1, #16
 8001484:	4846      	ldr	r0, [pc, #280]	; (80015a0 <getDistances+0x1a0>)
 8001486:	f001 ff8e 	bl	80033a6 <HAL_GPIO_WritePin>
	pinMode(0);
 800148a:	2000      	movs	r0, #0
 800148c:	f7ff ff84 	bl	8001398 <pinMode>
	srf_cnt = 0;
 8001490:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <getDistances+0x1a4>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0);
 8001496:	bf00      	nop
 8001498:	2110      	movs	r1, #16
 800149a:	4841      	ldr	r0, [pc, #260]	; (80015a0 <getDistances+0x1a0>)
 800149c:	f001 ff6c 	bl	8003378 <HAL_GPIO_ReadPin>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f8      	beq.n	8001498 <getDistances+0x98>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1) srf_cnt++;
 80014a6:	e004      	b.n	80014b2 <getDistances+0xb2>
 80014a8:	4b3e      	ldr	r3, [pc, #248]	; (80015a4 <getDistances+0x1a4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a3d      	ldr	r2, [pc, #244]	; (80015a4 <getDistances+0x1a4>)
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	2110      	movs	r1, #16
 80014b4:	483a      	ldr	r0, [pc, #232]	; (80015a0 <getDistances+0x1a0>)
 80014b6:	f001 ff5f 	bl	8003378 <HAL_GPIO_ReadPin>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d0f3      	beq.n	80014a8 <getDistances+0xa8>
	Right_Dist = srf_cnt/52;
 80014c0:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <getDistances+0x1a4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a38      	ldr	r2, [pc, #224]	; (80015a8 <getDistances+0x1a8>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	4a38      	ldr	r2, [pc, #224]	; (80015b0 <getDistances+0x1b0>)
 80014ce:	6013      	str	r3, [r2, #0]

	pinMode(1);
 80014d0:	2001      	movs	r0, #1
 80014d2:	f7ff ff61 	bl	8001398 <pinMode>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80014d6:	2201      	movs	r2, #1
 80014d8:	2120      	movs	r1, #32
 80014da:	4831      	ldr	r0, [pc, #196]	; (80015a0 <getDistances+0x1a0>)
 80014dc:	f001 ff63 	bl	80033a6 <HAL_GPIO_WritePin>
	delay_us(10);
 80014e0:	200a      	movs	r0, #10
 80014e2:	f7ff fd81 	bl	8000fe8 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2120      	movs	r1, #32
 80014ea:	482d      	ldr	r0, [pc, #180]	; (80015a0 <getDistances+0x1a0>)
 80014ec:	f001 ff5b 	bl	80033a6 <HAL_GPIO_WritePin>
	pinMode(0);
 80014f0:	2000      	movs	r0, #0
 80014f2:	f7ff ff51 	bl	8001398 <pinMode>
	srf_cnt = 0;
 80014f6:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <getDistances+0x1a4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0);
 80014fc:	bf00      	nop
 80014fe:	2120      	movs	r1, #32
 8001500:	4827      	ldr	r0, [pc, #156]	; (80015a0 <getDistances+0x1a0>)
 8001502:	f001 ff39 	bl	8003378 <HAL_GPIO_ReadPin>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f8      	beq.n	80014fe <getDistances+0xfe>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1) srf_cnt++;
 800150c:	e004      	b.n	8001518 <getDistances+0x118>
 800150e:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <getDistances+0x1a4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	4a23      	ldr	r2, [pc, #140]	; (80015a4 <getDistances+0x1a4>)
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	2120      	movs	r1, #32
 800151a:	4821      	ldr	r0, [pc, #132]	; (80015a0 <getDistances+0x1a0>)
 800151c:	f001 ff2c 	bl	8003378 <HAL_GPIO_ReadPin>
 8001520:	4603      	mov	r3, r0
 8001522:	2b01      	cmp	r3, #1
 8001524:	d0f3      	beq.n	800150e <getDistances+0x10e>
	Back_Dist = srf_cnt/52;
 8001526:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <getDistances+0x1a4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a1f      	ldr	r2, [pc, #124]	; (80015a8 <getDistances+0x1a8>)
 800152c:	fba2 2303 	umull	r2, r3, r2, r3
 8001530:	091b      	lsrs	r3, r3, #4
 8001532:	4a20      	ldr	r2, [pc, #128]	; (80015b4 <getDistances+0x1b4>)
 8001534:	6013      	str	r3, [r2, #0]

	pinMode(1);
 8001536:	2001      	movs	r0, #1
 8001538:	f7ff ff2e 	bl	8001398 <pinMode>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 800153c:	2201      	movs	r2, #1
 800153e:	2140      	movs	r1, #64	; 0x40
 8001540:	4817      	ldr	r0, [pc, #92]	; (80015a0 <getDistances+0x1a0>)
 8001542:	f001 ff30 	bl	80033a6 <HAL_GPIO_WritePin>
	delay_us(10);
 8001546:	200a      	movs	r0, #10
 8001548:	f7ff fd4e 	bl	8000fe8 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2140      	movs	r1, #64	; 0x40
 8001550:	4813      	ldr	r0, [pc, #76]	; (80015a0 <getDistances+0x1a0>)
 8001552:	f001 ff28 	bl	80033a6 <HAL_GPIO_WritePin>
	pinMode(0);
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff ff1e 	bl	8001398 <pinMode>
	srf_cnt = 0;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <getDistances+0x1a4>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0);
 8001562:	bf00      	nop
 8001564:	2140      	movs	r1, #64	; 0x40
 8001566:	480e      	ldr	r0, [pc, #56]	; (80015a0 <getDistances+0x1a0>)
 8001568:	f001 ff06 	bl	8003378 <HAL_GPIO_ReadPin>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f8      	beq.n	8001564 <getDistances+0x164>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) srf_cnt++;
 8001572:	e004      	b.n	800157e <getDistances+0x17e>
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <getDistances+0x1a4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <getDistances+0x1a4>)
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	2140      	movs	r1, #64	; 0x40
 8001580:	4807      	ldr	r0, [pc, #28]	; (80015a0 <getDistances+0x1a0>)
 8001582:	f001 fef9 	bl	8003378 <HAL_GPIO_ReadPin>
 8001586:	4603      	mov	r3, r0
 8001588:	2b01      	cmp	r3, #1
 800158a:	d0f3      	beq.n	8001574 <getDistances+0x174>
	Left_Dist = srf_cnt/52;
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <getDistances+0x1a4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <getDistances+0x1a8>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	091b      	lsrs	r3, r3, #4
 8001598:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <getDistances+0x1b8>)
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40010800 	.word	0x40010800
 80015a4:	20000244 	.word	0x20000244
 80015a8:	4ec4ec4f 	.word	0x4ec4ec4f
 80015ac:	20000234 	.word	0x20000234
 80015b0:	2000023c 	.word	0x2000023c
 80015b4:	20000238 	.word	0x20000238
 80015b8:	20000240 	.word	0x20000240

080015bc <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1){
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a95      	ldr	r2, [pc, #596]	; (8001824 <HAL_UARTEx_RxEventCallback+0x268>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	f040 8158 	bne.w	8001884 <HAL_UARTEx_RxEventCallback+0x2c8>
		RED_ON;
 80015d4:	2201      	movs	r2, #1
 80015d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015da:	4893      	ldr	r0, [pc, #588]	; (8001828 <HAL_UARTEx_RxEventCallback+0x26c>)
 80015dc:	f001 fee3 	bl	80033a6 <HAL_GPIO_WritePin>
		if(Rx1_Buff[0] == 'M') {
 80015e0:	4b92      	ldr	r3, [pc, #584]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b4d      	cmp	r3, #77	; 0x4d
 80015e6:	d13c      	bne.n	8001662 <HAL_UARTEx_RxEventCallback+0xa6>
		  if(Rx1_Buff[1]=='-') 	r1 =-(int)Rx1_Buff[2];
 80015e8:	4b90      	ldr	r3, [pc, #576]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 80015ea:	785b      	ldrb	r3, [r3, #1]
 80015ec:	2b2d      	cmp	r3, #45	; 0x2d
 80015ee:	d105      	bne.n	80015fc <HAL_UARTEx_RxEventCallback+0x40>
 80015f0:	4b8e      	ldr	r3, [pc, #568]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 80015f2:	789b      	ldrb	r3, [r3, #2]
 80015f4:	425b      	negs	r3, r3
 80015f6:	4a8e      	ldr	r2, [pc, #568]	; (8001830 <HAL_UARTEx_RxEventCallback+0x274>)
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e004      	b.n	8001606 <HAL_UARTEx_RxEventCallback+0x4a>
		  else  				r1 = (int)Rx1_Buff[2];
 80015fc:	4b8b      	ldr	r3, [pc, #556]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 80015fe:	789b      	ldrb	r3, [r3, #2]
 8001600:	461a      	mov	r2, r3
 8001602:	4b8b      	ldr	r3, [pc, #556]	; (8001830 <HAL_UARTEx_RxEventCallback+0x274>)
 8001604:	601a      	str	r2, [r3, #0]
		  ////////////////
		  if(Rx1_Buff[3]=='-') 	r2 =-(int)Rx1_Buff[4];
 8001606:	4b89      	ldr	r3, [pc, #548]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 8001608:	78db      	ldrb	r3, [r3, #3]
 800160a:	2b2d      	cmp	r3, #45	; 0x2d
 800160c:	d105      	bne.n	800161a <HAL_UARTEx_RxEventCallback+0x5e>
 800160e:	4b87      	ldr	r3, [pc, #540]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 8001610:	791b      	ldrb	r3, [r3, #4]
 8001612:	425b      	negs	r3, r3
 8001614:	4a87      	ldr	r2, [pc, #540]	; (8001834 <HAL_UARTEx_RxEventCallback+0x278>)
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	e004      	b.n	8001624 <HAL_UARTEx_RxEventCallback+0x68>
		  else  				r2 = (int)Rx1_Buff[4];
 800161a:	4b84      	ldr	r3, [pc, #528]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 800161c:	791b      	ldrb	r3, [r3, #4]
 800161e:	461a      	mov	r2, r3
 8001620:	4b84      	ldr	r3, [pc, #528]	; (8001834 <HAL_UARTEx_RxEventCallback+0x278>)
 8001622:	601a      	str	r2, [r3, #0]
		  ////////////////
		  if(Rx1_Buff[5]=='-') 	l2 =-(int)Rx1_Buff[6];
 8001624:	4b81      	ldr	r3, [pc, #516]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 8001626:	795b      	ldrb	r3, [r3, #5]
 8001628:	2b2d      	cmp	r3, #45	; 0x2d
 800162a:	d105      	bne.n	8001638 <HAL_UARTEx_RxEventCallback+0x7c>
 800162c:	4b7f      	ldr	r3, [pc, #508]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 800162e:	799b      	ldrb	r3, [r3, #6]
 8001630:	425b      	negs	r3, r3
 8001632:	4a81      	ldr	r2, [pc, #516]	; (8001838 <HAL_UARTEx_RxEventCallback+0x27c>)
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e004      	b.n	8001642 <HAL_UARTEx_RxEventCallback+0x86>
		  else  				l2 = (int)Rx1_Buff[6];
 8001638:	4b7c      	ldr	r3, [pc, #496]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 800163a:	799b      	ldrb	r3, [r3, #6]
 800163c:	461a      	mov	r2, r3
 800163e:	4b7e      	ldr	r3, [pc, #504]	; (8001838 <HAL_UARTEx_RxEventCallback+0x27c>)
 8001640:	601a      	str	r2, [r3, #0]
		  ////////////////
		  if(Rx1_Buff[7]=='-') 	l1 =-(int)Rx1_Buff[8];
 8001642:	4b7a      	ldr	r3, [pc, #488]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 8001644:	79db      	ldrb	r3, [r3, #7]
 8001646:	2b2d      	cmp	r3, #45	; 0x2d
 8001648:	d105      	bne.n	8001656 <HAL_UARTEx_RxEventCallback+0x9a>
 800164a:	4b78      	ldr	r3, [pc, #480]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 800164c:	7a1b      	ldrb	r3, [r3, #8]
 800164e:	425b      	negs	r3, r3
 8001650:	4a7a      	ldr	r2, [pc, #488]	; (800183c <HAL_UARTEx_RxEventCallback+0x280>)
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	e0d1      	b.n	80017fa <HAL_UARTEx_RxEventCallback+0x23e>
		  else  				l1 = (int)Rx1_Buff[8];
 8001656:	4b75      	ldr	r3, [pc, #468]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 8001658:	7a1b      	ldrb	r3, [r3, #8]
 800165a:	461a      	mov	r2, r3
 800165c:	4b77      	ldr	r3, [pc, #476]	; (800183c <HAL_UARTEx_RxEventCallback+0x280>)
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e0cb      	b.n	80017fa <HAL_UARTEx_RxEventCallback+0x23e>
		}
		else if(Rx1_Buff[0] == 'S') {
 8001662:	4b72      	ldr	r3, [pc, #456]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b53      	cmp	r3, #83	; 0x53
 8001668:	d114      	bne.n	8001694 <HAL_UARTEx_RxEventCallback+0xd8>
			HAL_UART_Transmit(&huart2, GY_Set_Command, 2, PHY_FULLDUPLEX_10M);
 800166a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800166e:	2202      	movs	r2, #2
 8001670:	4973      	ldr	r1, [pc, #460]	; (8001840 <HAL_UARTEx_RxEventCallback+0x284>)
 8001672:	4874      	ldr	r0, [pc, #464]	; (8001844 <HAL_UARTEx_RxEventCallback+0x288>)
 8001674:	f003 f93f 	bl	80048f6 <HAL_UART_Transmit>
			delay(100000);
 8001678:	4873      	ldr	r0, [pc, #460]	; (8001848 <HAL_UARTEx_RxEventCallback+0x28c>)
 800167a:	f7ff fe7d 	bl	8001378 <delay>
			HAL_UART_Transmit(&huart2, GY_Set_Command, 2, PHY_FULLDUPLEX_10M);
 800167e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001682:	2202      	movs	r2, #2
 8001684:	496e      	ldr	r1, [pc, #440]	; (8001840 <HAL_UARTEx_RxEventCallback+0x284>)
 8001686:	486f      	ldr	r0, [pc, #444]	; (8001844 <HAL_UARTEx_RxEventCallback+0x288>)
 8001688:	f003 f935 	bl	80048f6 <HAL_UART_Transmit>
			delay(100000);
 800168c:	486e      	ldr	r0, [pc, #440]	; (8001848 <HAL_UARTEx_RxEventCallback+0x28c>)
 800168e:	f7ff fe73 	bl	8001378 <delay>
 8001692:	e0b2      	b.n	80017fa <HAL_UARTEx_RxEventCallback+0x23e>
		}
		else if(Rx1_Buff[0] == 'C') {
 8001694:	4b65      	ldr	r3, [pc, #404]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b43      	cmp	r3, #67	; 0x43
 800169a:	d127      	bne.n	80016ec <HAL_UARTEx_RxEventCallback+0x130>
			if(Rx1_Buff[1] == 'T'){
 800169c:	4b63      	ldr	r3, [pc, #396]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 800169e:	785b      	ldrb	r3, [r3, #1]
 80016a0:	2b54      	cmp	r3, #84	; 0x54
 80016a2:	d10a      	bne.n	80016ba <HAL_UARTEx_RxEventCallback+0xfe>
				if(Correction_EN == 1) Correction_EN = 0;
 80016a4:	4b69      	ldr	r3, [pc, #420]	; (800184c <HAL_UARTEx_RxEventCallback+0x290>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d103      	bne.n	80016b4 <HAL_UARTEx_RxEventCallback+0xf8>
 80016ac:	4b67      	ldr	r3, [pc, #412]	; (800184c <HAL_UARTEx_RxEventCallback+0x290>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e002      	b.n	80016ba <HAL_UARTEx_RxEventCallback+0xfe>
				else				   Correction_EN = 1;
 80016b4:	4b65      	ldr	r3, [pc, #404]	; (800184c <HAL_UARTEx_RxEventCallback+0x290>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
			}if(Rx1_Buff[1] == '1'){
 80016ba:	4b5c      	ldr	r3, [pc, #368]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 80016bc:	785b      	ldrb	r3, [r3, #1]
 80016be:	2b31      	cmp	r3, #49	; 0x31
 80016c0:	d102      	bne.n	80016c8 <HAL_UARTEx_RxEventCallback+0x10c>
				Correction_EN = 1;
 80016c2:	4b62      	ldr	r3, [pc, #392]	; (800184c <HAL_UARTEx_RxEventCallback+0x290>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
			}if(Rx1_Buff[1] == '0'){
 80016c8:	4b58      	ldr	r3, [pc, #352]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 80016ca:	785b      	ldrb	r3, [r3, #1]
 80016cc:	2b30      	cmp	r3, #48	; 0x30
 80016ce:	d102      	bne.n	80016d6 <HAL_UARTEx_RxEventCallback+0x11a>
				Correction_EN = 0;
 80016d0:	4b5e      	ldr	r3, [pc, #376]	; (800184c <HAL_UARTEx_RxEventCallback+0x290>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
			}
			time = 0;
 80016d6:	4b5e      	ldr	r3, [pc, #376]	; (8001850 <HAL_UARTEx_RxEventCallback+0x294>)
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
			beginTime = HAL_GetTick();
 80016de:	f001 f8ed 	bl	80028bc <HAL_GetTick>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b5b      	ldr	r3, [pc, #364]	; (8001854 <HAL_UARTEx_RxEventCallback+0x298>)
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e086      	b.n	80017fa <HAL_UARTEx_RxEventCallback+0x23e>
		}
		else if(Rx1_Buff[0] == 'D') {
 80016ec:	4b4f      	ldr	r3, [pc, #316]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b44      	cmp	r3, #68	; 0x44
 80016f2:	d13e      	bne.n	8001772 <HAL_UARTEx_RxEventCallback+0x1b6>
			if(Rx1_Buff[1] == 'A' && Rx1_Buff[2] == 'L' && Rx1_Buff[3] == 'L'){
 80016f4:	4b4d      	ldr	r3, [pc, #308]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 80016f6:	785b      	ldrb	r3, [r3, #1]
 80016f8:	2b41      	cmp	r3, #65	; 0x41
 80016fa:	d17e      	bne.n	80017fa <HAL_UARTEx_RxEventCallback+0x23e>
 80016fc:	4b4b      	ldr	r3, [pc, #300]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 80016fe:	789b      	ldrb	r3, [r3, #2]
 8001700:	2b4c      	cmp	r3, #76	; 0x4c
 8001702:	d17a      	bne.n	80017fa <HAL_UARTEx_RxEventCallback+0x23e>
 8001704:	4b49      	ldr	r3, [pc, #292]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 8001706:	78db      	ldrb	r3, [r3, #3]
 8001708:	2b4c      	cmp	r3, #76	; 0x4c
 800170a:	d176      	bne.n	80017fa <HAL_UARTEx_RxEventCallback+0x23e>
				getDistances();
 800170c:	f7ff fe78 	bl	8001400 <getDistances>
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 8001710:	4b51      	ldr	r3, [pc, #324]	; (8001858 <HAL_UARTEx_RxEventCallback+0x29c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	121b      	asrs	r3, r3, #8
 8001718:	b2db      	uxtb	r3, r3
 800171a:	733b      	strb	r3, [r7, #12]
 800171c:	4b4e      	ldr	r3, [pc, #312]	; (8001858 <HAL_UARTEx_RxEventCallback+0x29c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	737b      	strb	r3, [r7, #13]
									 (uint8_t) Right_Dist >> 8,(uint8_t) Right_Dist & 0xFF,
 8001724:	4b4d      	ldr	r3, [pc, #308]	; (800185c <HAL_UARTEx_RxEventCallback+0x2a0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	121b      	asrs	r3, r3, #8
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 800172c:	b2db      	uxtb	r3, r3
 800172e:	73bb      	strb	r3, [r7, #14]
									 (uint8_t) Right_Dist >> 8,(uint8_t) Right_Dist & 0xFF,
 8001730:	4b4a      	ldr	r3, [pc, #296]	; (800185c <HAL_UARTEx_RxEventCallback+0x2a0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	b2db      	uxtb	r3, r3
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 8001736:	73fb      	strb	r3, [r7, #15]
									 (uint8_t) Back_Dist  >> 8,(uint8_t) Back_Dist  & 0xFF,
 8001738:	4b49      	ldr	r3, [pc, #292]	; (8001860 <HAL_UARTEx_RxEventCallback+0x2a4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	121b      	asrs	r3, r3, #8
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 8001740:	b2db      	uxtb	r3, r3
 8001742:	743b      	strb	r3, [r7, #16]
									 (uint8_t) Back_Dist  >> 8,(uint8_t) Back_Dist  & 0xFF,
 8001744:	4b46      	ldr	r3, [pc, #280]	; (8001860 <HAL_UARTEx_RxEventCallback+0x2a4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	b2db      	uxtb	r3, r3
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 800174a:	747b      	strb	r3, [r7, #17]
									 (uint8_t) Left_Dist  >> 8,(uint8_t) Left_Dist  & 0xFF};
 800174c:	4b45      	ldr	r3, [pc, #276]	; (8001864 <HAL_UARTEx_RxEventCallback+0x2a8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	121b      	asrs	r3, r3, #8
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 8001754:	b2db      	uxtb	r3, r3
 8001756:	74bb      	strb	r3, [r7, #18]
									 (uint8_t) Left_Dist  >> 8,(uint8_t) Left_Dist  & 0xFF};
 8001758:	4b42      	ldr	r3, [pc, #264]	; (8001864 <HAL_UARTEx_RxEventCallback+0x2a8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	b2db      	uxtb	r3, r3
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 800175e:	74fb      	strb	r3, [r7, #19]
				HAL_UART_Transmit(&huart1, tx_data, 8, PHY_FULLDUPLEX_10M);
 8001760:	f107 010c 	add.w	r1, r7, #12
 8001764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001768:	2208      	movs	r2, #8
 800176a:	483f      	ldr	r0, [pc, #252]	; (8001868 <HAL_UARTEx_RxEventCallback+0x2ac>)
 800176c:	f003 f8c3 	bl	80048f6 <HAL_UART_Transmit>
 8001770:	e043      	b.n	80017fa <HAL_UARTEx_RxEventCallback+0x23e>
			}
		}
		else if(Rx1_Buff[0] == 'P') {
 8001772:	4b2e      	ldr	r3, [pc, #184]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b50      	cmp	r3, #80	; 0x50
 8001778:	d104      	bne.n	8001784 <HAL_UARTEx_RxEventCallback+0x1c8>
			look_direction = Rx1_Buff[1];
 800177a:	4b2c      	ldr	r3, [pc, #176]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 800177c:	785a      	ldrb	r2, [r3, #1]
 800177e:	4b3b      	ldr	r3, [pc, #236]	; (800186c <HAL_UARTEx_RxEventCallback+0x2b0>)
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	e03a      	b.n	80017fa <HAL_UARTEx_RxEventCallback+0x23e>
		}
		else if(Rx1_Buff[0] == 'H') {
 8001784:	4b29      	ldr	r3, [pc, #164]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b48      	cmp	r3, #72	; 0x48
 800178a:	d136      	bne.n	80017fa <HAL_UARTEx_RxEventCallback+0x23e>
			tx_data[0] = (uint8_t) (Heading + 360) >> 8;
 800178c:	4b38      	ldr	r3, [pc, #224]	; (8001870 <HAL_UARTEx_RxEventCallback+0x2b4>)
 800178e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	3368      	adds	r3, #104	; 0x68
 8001796:	b2db      	uxtb	r3, r3
 8001798:	121b      	asrs	r3, r3, #8
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b35      	ldr	r3, [pc, #212]	; (8001874 <HAL_UARTEx_RxEventCallback+0x2b8>)
 800179e:	701a      	strb	r2, [r3, #0]
			tx_data[1] = (uint8_t) (Heading + 360) & 0xFF;
 80017a0:	4b33      	ldr	r3, [pc, #204]	; (8001870 <HAL_UARTEx_RxEventCallback+0x2b4>)
 80017a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	3368      	adds	r3, #104	; 0x68
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	4b31      	ldr	r3, [pc, #196]	; (8001874 <HAL_UARTEx_RxEventCallback+0x2b8>)
 80017ae:	705a      	strb	r2, [r3, #1]
			tx_data[2] = (uint8_t) (thetaD + 360) >> 8;
 80017b0:	4b31      	ldr	r3, [pc, #196]	; (8001878 <HAL_UARTEx_RxEventCallback+0x2bc>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4931      	ldr	r1, [pc, #196]	; (800187c <HAL_UARTEx_RxEventCallback+0x2c0>)
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fa52 	bl	8000c60 <__addsf3>
 80017bc:	4603      	mov	r3, r0
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fbf2 	bl	8000fa8 <__aeabi_f2uiz>
 80017c4:	4603      	mov	r3, r0
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	121b      	asrs	r3, r3, #8
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	4b29      	ldr	r3, [pc, #164]	; (8001874 <HAL_UARTEx_RxEventCallback+0x2b8>)
 80017ce:	709a      	strb	r2, [r3, #2]
			tx_data[3] = (uint8_t) (thetaD + 360) & 0xFF;
 80017d0:	4b29      	ldr	r3, [pc, #164]	; (8001878 <HAL_UARTEx_RxEventCallback+0x2bc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4929      	ldr	r1, [pc, #164]	; (800187c <HAL_UARTEx_RxEventCallback+0x2c0>)
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fa42 	bl	8000c60 <__addsf3>
 80017dc:	4603      	mov	r3, r0
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fbe2 	bl	8000fa8 <__aeabi_f2uiz>
 80017e4:	4603      	mov	r3, r0
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b22      	ldr	r3, [pc, #136]	; (8001874 <HAL_UARTEx_RxEventCallback+0x2b8>)
 80017ea:	70da      	strb	r2, [r3, #3]
			HAL_UART_Transmit(&huart1, tx_data, 4, PHY_FULLDUPLEX_10M);
 80017ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f0:	2204      	movs	r2, #4
 80017f2:	4920      	ldr	r1, [pc, #128]	; (8001874 <HAL_UARTEx_RxEventCallback+0x2b8>)
 80017f4:	481c      	ldr	r0, [pc, #112]	; (8001868 <HAL_UARTEx_RxEventCallback+0x2ac>)
 80017f6:	f003 f87e 	bl	80048f6 <HAL_UART_Transmit>
		}

		RED_OFF;
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001800:	4809      	ldr	r0, [pc, #36]	; (8001828 <HAL_UARTEx_RxEventCallback+0x26c>)
 8001802:	f001 fdd0 	bl	80033a6 <HAL_GPIO_WritePin>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx1_Buff, RX1_Size);
 8001806:	2209      	movs	r2, #9
 8001808:	4908      	ldr	r1, [pc, #32]	; (800182c <HAL_UARTEx_RxEventCallback+0x270>)
 800180a:	4817      	ldr	r0, [pc, #92]	; (8001868 <HAL_UARTEx_RxEventCallback+0x2ac>)
 800180c:	f003 f905 	bl	8004a1a <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <HAL_UARTEx_RxEventCallback+0x2c4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0204 	bic.w	r2, r2, #4
 800181e:	601a      	str	r2, [r3, #0]
		GREEN_OFF;
		HAL_UART_Transmit(&huart2, GY_Request_Command, 2, PHY_FULLDUPLEX_10M);
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx2_Buff, RX2_Size);
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
	}
}
 8001820:	e16d      	b.n	8001afe <HAL_UARTEx_RxEventCallback+0x542>
 8001822:	bf00      	nop
 8001824:	40013800 	.word	0x40013800
 8001828:	40011000 	.word	0x40011000
 800182c:	200001e4 	.word	0x200001e4
 8001830:	20000204 	.word	0x20000204
 8001834:	20000200 	.word	0x20000200
 8001838:	200001fc 	.word	0x200001fc
 800183c:	200001f8 	.word	0x200001f8
 8001840:	20000018 	.word	0x20000018
 8001844:	20000118 	.word	0x20000118
 8001848:	000186a0 	.word	0x000186a0
 800184c:	20000230 	.word	0x20000230
 8001850:	20000214 	.word	0x20000214
 8001854:	20000250 	.word	0x20000250
 8001858:	20000234 	.word	0x20000234
 800185c:	2000023c 	.word	0x2000023c
 8001860:	20000238 	.word	0x20000238
 8001864:	20000240 	.word	0x20000240
 8001868:	200000d4 	.word	0x200000d4
 800186c:	20000000 	.word	0x20000000
 8001870:	2000020c 	.word	0x2000020c
 8001874:	20000248 	.word	0x20000248
 8001878:	20000210 	.word	0x20000210
 800187c:	43b40000 	.word	0x43b40000
 8001880:	2000015c 	.word	0x2000015c
	else if(huart->Instance == USART2){
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a9f      	ldr	r2, [pc, #636]	; (8001b08 <HAL_UARTEx_RxEventCallback+0x54c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	f040 8137 	bne.w	8001afe <HAL_UARTEx_RxEventCallback+0x542>
		GREEN_ON;
 8001890:	2201      	movs	r2, #1
 8001892:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001896:	489d      	ldr	r0, [pc, #628]	; (8001b0c <HAL_UARTEx_RxEventCallback+0x550>)
 8001898:	f001 fd85 	bl	80033a6 <HAL_GPIO_WritePin>
		for(int i=0; i<RX2_Size; i++){
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e10f      	b.n	8001ac2 <HAL_UARTEx_RxEventCallback+0x506>
			if(Rx2_Buff[i] == 0xAA){
 80018a2:	4a9b      	ldr	r2, [pc, #620]	; (8001b10 <HAL_UARTEx_RxEventCallback+0x554>)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	4413      	add	r3, r2
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2baa      	cmp	r3, #170	; 0xaa
 80018ac:	f040 8106 	bne.w	8001abc <HAL_UARTEx_RxEventCallback+0x500>
				Heading_f = (int16_t)(Rx2_Buff[(i+1)%8]<<8 | Rx2_Buff[(i+2)%8])/100.00;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3301      	adds	r3, #1
 80018b4:	425a      	negs	r2, r3
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	f002 0207 	and.w	r2, r2, #7
 80018be:	bf58      	it	pl
 80018c0:	4253      	negpl	r3, r2
 80018c2:	4a93      	ldr	r2, [pc, #588]	; (8001b10 <HAL_UARTEx_RxEventCallback+0x554>)
 80018c4:	5cd3      	ldrb	r3, [r2, r3]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3302      	adds	r3, #2
 80018ce:	4259      	negs	r1, r3
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	f001 0107 	and.w	r1, r1, #7
 80018d8:	bf58      	it	pl
 80018da:	424b      	negpl	r3, r1
 80018dc:	498c      	ldr	r1, [pc, #560]	; (8001b10 <HAL_UARTEx_RxEventCallback+0x554>)
 80018de:	5ccb      	ldrb	r3, [r1, r3]
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	4313      	orrs	r3, r2
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe38 	bl	800055c <__aeabi_i2d>
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	4b88      	ldr	r3, [pc, #544]	; (8001b14 <HAL_UARTEx_RxEventCallback+0x558>)
 80018f2:	f7fe ffc7 	bl	8000884 <__aeabi_ddiv>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f7ff f959 	bl	8000bb4 <__aeabi_d2f>
 8001902:	4603      	mov	r3, r0
 8001904:	4a84      	ldr	r2, [pc, #528]	; (8001b18 <HAL_UARTEx_RxEventCallback+0x55c>)
 8001906:	6013      	str	r3, [r2, #0]
				Heading = (int16_t)(Rx2_Buff[(i+1)%8]<<8 | Rx2_Buff[(i+2)%8])/100.00;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	3301      	adds	r3, #1
 800190c:	425a      	negs	r2, r3
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	f002 0207 	and.w	r2, r2, #7
 8001916:	bf58      	it	pl
 8001918:	4253      	negpl	r3, r2
 800191a:	4a7d      	ldr	r2, [pc, #500]	; (8001b10 <HAL_UARTEx_RxEventCallback+0x554>)
 800191c:	5cd3      	ldrb	r3, [r2, r3]
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	b21a      	sxth	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3302      	adds	r3, #2
 8001926:	4259      	negs	r1, r3
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	f001 0107 	and.w	r1, r1, #7
 8001930:	bf58      	it	pl
 8001932:	424b      	negpl	r3, r1
 8001934:	4976      	ldr	r1, [pc, #472]	; (8001b10 <HAL_UARTEx_RxEventCallback+0x554>)
 8001936:	5ccb      	ldrb	r3, [r1, r3]
 8001938:	b21b      	sxth	r3, r3
 800193a:	4313      	orrs	r3, r2
 800193c:	b21b      	sxth	r3, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fe0c 	bl	800055c <__aeabi_i2d>
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	4b72      	ldr	r3, [pc, #456]	; (8001b14 <HAL_UARTEx_RxEventCallback+0x558>)
 800194a:	f7fe ff9b 	bl	8000884 <__aeabi_ddiv>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	f7ff f905 	bl	8000b64 <__aeabi_d2iz>
 800195a:	4603      	mov	r3, r0
 800195c:	b21a      	sxth	r2, r3
 800195e:	4b6f      	ldr	r3, [pc, #444]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x560>)
 8001960:	801a      	strh	r2, [r3, #0]
				Pitch = (int16_t)(Rx2_Buff[(i+3)%8]<<8 | Rx2_Buff[(i+4)%8])/100.00;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3303      	adds	r3, #3
 8001966:	425a      	negs	r2, r3
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	f002 0207 	and.w	r2, r2, #7
 8001970:	bf58      	it	pl
 8001972:	4253      	negpl	r3, r2
 8001974:	4a66      	ldr	r2, [pc, #408]	; (8001b10 <HAL_UARTEx_RxEventCallback+0x554>)
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	b21a      	sxth	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	3304      	adds	r3, #4
 8001980:	4259      	negs	r1, r3
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	f001 0107 	and.w	r1, r1, #7
 800198a:	bf58      	it	pl
 800198c:	424b      	negpl	r3, r1
 800198e:	4960      	ldr	r1, [pc, #384]	; (8001b10 <HAL_UARTEx_RxEventCallback+0x554>)
 8001990:	5ccb      	ldrb	r3, [r1, r3]
 8001992:	b21b      	sxth	r3, r3
 8001994:	4313      	orrs	r3, r2
 8001996:	b21b      	sxth	r3, r3
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fddf 	bl	800055c <__aeabi_i2d>
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	4b5c      	ldr	r3, [pc, #368]	; (8001b14 <HAL_UARTEx_RxEventCallback+0x558>)
 80019a4:	f7fe ff6e 	bl	8000884 <__aeabi_ddiv>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	f7ff f8d8 	bl	8000b64 <__aeabi_d2iz>
 80019b4:	4603      	mov	r3, r0
 80019b6:	b21a      	sxth	r2, r3
 80019b8:	4b59      	ldr	r3, [pc, #356]	; (8001b20 <HAL_UARTEx_RxEventCallback+0x564>)
 80019ba:	801a      	strh	r2, [r3, #0]
				Roll = (int16_t)(Rx2_Buff[(i+5)%8]<<8 | Rx2_Buff[(i+6)%8])/100.00;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3305      	adds	r3, #5
 80019c0:	425a      	negs	r2, r3
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	f002 0207 	and.w	r2, r2, #7
 80019ca:	bf58      	it	pl
 80019cc:	4253      	negpl	r3, r2
 80019ce:	4a50      	ldr	r2, [pc, #320]	; (8001b10 <HAL_UARTEx_RxEventCallback+0x554>)
 80019d0:	5cd3      	ldrb	r3, [r2, r3]
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	b21a      	sxth	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3306      	adds	r3, #6
 80019da:	4259      	negs	r1, r3
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	f001 0107 	and.w	r1, r1, #7
 80019e4:	bf58      	it	pl
 80019e6:	424b      	negpl	r3, r1
 80019e8:	4949      	ldr	r1, [pc, #292]	; (8001b10 <HAL_UARTEx_RxEventCallback+0x554>)
 80019ea:	5ccb      	ldrb	r3, [r1, r3]
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	4313      	orrs	r3, r2
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fdb2 	bl	800055c <__aeabi_i2d>
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	4b45      	ldr	r3, [pc, #276]	; (8001b14 <HAL_UARTEx_RxEventCallback+0x558>)
 80019fe:	f7fe ff41 	bl	8000884 <__aeabi_ddiv>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f7ff f8ab 	bl	8000b64 <__aeabi_d2iz>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	b21a      	sxth	r2, r3
 8001a12:	4b44      	ldr	r3, [pc, #272]	; (8001b24 <HAL_UARTEx_RxEventCallback+0x568>)
 8001a14:	801a      	strh	r2, [r3, #0]
				if(look_direction == 'W'){
 8001a16:	4b44      	ldr	r3, [pc, #272]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x56c>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b57      	cmp	r3, #87	; 0x57
 8001a1c:	d108      	bne.n	8001a30 <HAL_UARTEx_RxEventCallback+0x474>
					Heading -= 90;
 8001a1e:	4b3f      	ldr	r3, [pc, #252]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x560>)
 8001a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	3b5a      	subs	r3, #90	; 0x5a
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	b21a      	sxth	r2, r3
 8001a2c:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x560>)
 8001a2e:	801a      	strh	r2, [r3, #0]
				if(look_direction == 'E'){
 8001a30:	4b3d      	ldr	r3, [pc, #244]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x56c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b45      	cmp	r3, #69	; 0x45
 8001a36:	d108      	bne.n	8001a4a <HAL_UARTEx_RxEventCallback+0x48e>
					Heading += 90;
 8001a38:	4b38      	ldr	r3, [pc, #224]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x560>)
 8001a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	335a      	adds	r3, #90	; 0x5a
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	b21a      	sxth	r2, r3
 8001a46:	4b35      	ldr	r3, [pc, #212]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x560>)
 8001a48:	801a      	strh	r2, [r3, #0]
				if(look_direction == 'S'){
 8001a4a:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x56c>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b53      	cmp	r3, #83	; 0x53
 8001a50:	d117      	bne.n	8001a82 <HAL_UARTEx_RxEventCallback+0x4c6>
					if(Heading > 0) Heading = Heading - 180;
 8001a52:	4b32      	ldr	r3, [pc, #200]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x560>)
 8001a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	dd09      	ble.n	8001a70 <HAL_UARTEx_RxEventCallback+0x4b4>
 8001a5c:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x560>)
 8001a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	3bb4      	subs	r3, #180	; 0xb4
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	b21a      	sxth	r2, r3
 8001a6a:	4b2c      	ldr	r3, [pc, #176]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x560>)
 8001a6c:	801a      	strh	r2, [r3, #0]
 8001a6e:	e008      	b.n	8001a82 <HAL_UARTEx_RxEventCallback+0x4c6>
					else		    Heading = Heading + 180;
 8001a70:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x560>)
 8001a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	33b4      	adds	r3, #180	; 0xb4
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	4b27      	ldr	r3, [pc, #156]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x560>)
 8001a80:	801a      	strh	r2, [r3, #0]
				if(Heading > 180) Heading -= 180;
 8001a82:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x560>)
 8001a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a88:	2bb4      	cmp	r3, #180	; 0xb4
 8001a8a:	dd08      	ble.n	8001a9e <HAL_UARTEx_RxEventCallback+0x4e2>
 8001a8c:	4b23      	ldr	r3, [pc, #140]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x560>)
 8001a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	3bb4      	subs	r3, #180	; 0xb4
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	b21a      	sxth	r2, r3
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x560>)
 8001a9c:	801a      	strh	r2, [r3, #0]
				if(Heading <-180) Heading += 180;
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x560>)
 8001aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa4:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001aa8:	da08      	bge.n	8001abc <HAL_UARTEx_RxEventCallback+0x500>
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x560>)
 8001aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	33b4      	adds	r3, #180	; 0xb4
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b21a      	sxth	r2, r3
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x560>)
 8001aba:	801a      	strh	r2, [r3, #0]
		for(int i=0; i<RX2_Size; i++){
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2b07      	cmp	r3, #7
 8001ac6:	f77f aeec 	ble.w	80018a2 <HAL_UARTEx_RxEventCallback+0x2e6>
		GREEN_OFF;
 8001aca:	2200      	movs	r2, #0
 8001acc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad0:	480e      	ldr	r0, [pc, #56]	; (8001b0c <HAL_UARTEx_RxEventCallback+0x550>)
 8001ad2:	f001 fc68 	bl	80033a6 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, GY_Request_Command, 2, PHY_FULLDUPLEX_10M);
 8001ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ada:	2202      	movs	r2, #2
 8001adc:	4913      	ldr	r1, [pc, #76]	; (8001b2c <HAL_UARTEx_RxEventCallback+0x570>)
 8001ade:	4814      	ldr	r0, [pc, #80]	; (8001b30 <HAL_UARTEx_RxEventCallback+0x574>)
 8001ae0:	f002 ff09 	bl	80048f6 <HAL_UART_Transmit>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx2_Buff, RX2_Size);
 8001ae4:	2208      	movs	r2, #8
 8001ae6:	490a      	ldr	r1, [pc, #40]	; (8001b10 <HAL_UARTEx_RxEventCallback+0x554>)
 8001ae8:	4811      	ldr	r0, [pc, #68]	; (8001b30 <HAL_UARTEx_RxEventCallback+0x574>)
 8001aea:	f002 ff96 	bl	8004a1a <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_UARTEx_RxEventCallback+0x578>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_UARTEx_RxEventCallback+0x578>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0204 	bic.w	r2, r2, #4
 8001afc:	601a      	str	r2, [r3, #0]
}
 8001afe:	bf00      	nop
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40004400 	.word	0x40004400
 8001b0c:	40011000 	.word	0x40011000
 8001b10:	200001f0 	.word	0x200001f0
 8001b14:	40590000 	.word	0x40590000
 8001b18:	20000218 	.word	0x20000218
 8001b1c:	2000020c 	.word	0x2000020c
 8001b20:	20000208 	.word	0x20000208
 8001b24:	2000020a 	.word	0x2000020a
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000014 	.word	0x20000014
 8001b30:	20000118 	.word	0x20000118
 8001b34:	200001a0 	.word	0x200001a0

08001b38 <chirp>:
float u(float t){
	if(t > 0)	return 1;
	return 0;
}
double chirp(double t) {
 8001b38:	b5b0      	push	{r4, r5, r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	e9c7 0100 	strd	r0, r1, [r7]
	double s = 0;
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int i=1; i<100; i++){
 8001b4e:	2301      	movs	r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	e04c      	b.n	8001bee <chirp+0xb6>
		s += (1.0/(i*M_PI))*cos(2.0 * i * M_PI * t + M_PI/2.0);
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f7fe fd01 	bl	800055c <__aeabi_i2d>
 8001b5a:	a32d      	add	r3, pc, #180	; (adr r3, 8001c10 <chirp+0xd8>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	f7fe fd66 	bl	8000630 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	f04f 0000 	mov.w	r0, #0
 8001b6c:	492c      	ldr	r1, [pc, #176]	; (8001c20 <chirp+0xe8>)
 8001b6e:	f7fe fe89 	bl	8000884 <__aeabi_ddiv>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4614      	mov	r4, r2
 8001b78:	461d      	mov	r5, r3
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f7fe fcee 	bl	800055c <__aeabi_i2d>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	f7fe fb9e 	bl	80002c4 <__adddf3>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	a31f      	add	r3, pc, #124	; (adr r3, 8001c10 <chirp+0xd8>)
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	f7fe fd4b 	bl	8000630 <__aeabi_dmul>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ba6:	f7fe fd43 	bl	8000630 <__aeabi_dmul>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4610      	mov	r0, r2
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	a319      	add	r3, pc, #100	; (adr r3, 8001c18 <chirp+0xe0>)
 8001bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb8:	f7fe fb84 	bl	80002c4 <__adddf3>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f003 fcc4 	bl	8005550 <cos>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4620      	mov	r0, r4
 8001bce:	4629      	mov	r1, r5
 8001bd0:	f7fe fd2e 	bl	8000630 <__aeabi_dmul>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bdc:	f7fe fb72 	bl	80002c4 <__adddf3>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int i=1; i<100; i++){
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	3301      	adds	r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b63      	cmp	r3, #99	; 0x63
 8001bf2:	ddaf      	ble.n	8001b54 <chirp+0x1c>
	}
	return 0.5 + s;
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <chirp+0xec>)
 8001bfa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bfe:	f7fe fb61 	bl	80002c4 <__adddf3>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
}
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c10:	54442d18 	.word	0x54442d18
 8001c14:	400921fb 	.word	0x400921fb
 8001c18:	54442d18 	.word	0x54442d18
 8001c1c:	3ff921fb 	.word	0x3ff921fb
 8001c20:	3ff00000 	.word	0x3ff00000
 8001c24:	3fe00000 	.word	0x3fe00000

08001c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001c2e:	f000 fded 	bl	800280c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c32:	f000 f9d3 	bl	8001fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c36:	f000 fb57 	bl	80022e8 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001c3a:	f000 fa61 	bl	8002100 <MX_TIM4_Init>
  MX_DMA_Init();
 8001c3e:	f000 fb2d 	bl	800229c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001c42:	f000 fad7 	bl	80021f4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001c46:	f000 faff 	bl	8002248 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001c4a:	f000 fa09 	bl	8002060 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4877      	ldr	r0, [pc, #476]	; (8001e30 <main+0x208>)
 8001c52:	f002 f8dd 	bl	8003e10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001c56:	2104      	movs	r1, #4
 8001c58:	4875      	ldr	r0, [pc, #468]	; (8001e30 <main+0x208>)
 8001c5a:	f002 f8d9 	bl	8003e10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001c5e:	2108      	movs	r1, #8
 8001c60:	4873      	ldr	r0, [pc, #460]	; (8001e30 <main+0x208>)
 8001c62:	f002 f8d5 	bl	8003e10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001c66:	210c      	movs	r1, #12
 8001c68:	4871      	ldr	r0, [pc, #452]	; (8001e30 <main+0x208>)
 8001c6a:	f002 f8d1 	bl	8003e10 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim1);
 8001c6e:	4871      	ldr	r0, [pc, #452]	; (8001e34 <main+0x20c>)
 8001c70:	f002 f834 	bl	8003cdc <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(MOTORS_EN_GPIO_Port, MOTORS_EN_Pin, 1);
 8001c74:	2201      	movs	r2, #1
 8001c76:	2108      	movs	r1, #8
 8001c78:	486f      	ldr	r0, [pc, #444]	; (8001e38 <main+0x210>)
 8001c7a:	f001 fb94 	bl	80033a6 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // Red LED
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c84:	486d      	ldr	r0, [pc, #436]	; (8001e3c <main+0x214>)
 8001c86:	f001 fb8e 	bl	80033a6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0); // Red LED
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c90:	486a      	ldr	r0, [pc, #424]	; (8001e3c <main+0x214>)
 8001c92:	f001 fb88 	bl	80033a6 <HAL_GPIO_WritePin>
  for(int i=0; i<5; i++){
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	e00f      	b.n	8001cbc <main+0x94>
	  HAL_Delay(100);
 8001c9c:	2064      	movs	r0, #100	; 0x64
 8001c9e:	f000 fe17 	bl	80028d0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14); // Red LED
 8001ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ca6:	4865      	ldr	r0, [pc, #404]	; (8001e3c <main+0x214>)
 8001ca8:	f001 fb95 	bl	80033d6 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Green LED
 8001cac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb0:	4862      	ldr	r0, [pc, #392]	; (8001e3c <main+0x214>)
 8001cb2:	f001 fb90 	bl	80033d6 <HAL_GPIO_TogglePin>
  for(int i=0; i<5; i++){
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	ddec      	ble.n	8001c9c <main+0x74>
  }
  RED_OFF;
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cc8:	485c      	ldr	r0, [pc, #368]	; (8001e3c <main+0x214>)
 8001cca:	f001 fb6c 	bl	80033a6 <HAL_GPIO_WritePin>
  GREEN_OFF;
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cd4:	4859      	ldr	r0, [pc, #356]	; (8001e3c <main+0x214>)
 8001cd6:	f001 fb66 	bl	80033a6 <HAL_GPIO_WritePin>

  initGY();
 8001cda:	f7ff fb05 	bl	80012e8 <initGY>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx1_Buff, RX1_Size);
 8001cde:	2209      	movs	r2, #9
 8001ce0:	4957      	ldr	r1, [pc, #348]	; (8001e40 <main+0x218>)
 8001ce2:	4858      	ldr	r0, [pc, #352]	; (8001e44 <main+0x21c>)
 8001ce4:	f002 fe99 	bl	8004a1a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001ce8:	4b57      	ldr	r3, [pc, #348]	; (8001e48 <main+0x220>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	4b56      	ldr	r3, [pc, #344]	; (8001e48 <main+0x220>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0204 	bic.w	r2, r2, #4
 8001cf6:	601a      	str	r2, [r3, #0]

  HAL_UART_Transmit(&huart2, GY_Request_Command, 2, PHY_FULLDUPLEX_10M);
 8001cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	4953      	ldr	r1, [pc, #332]	; (8001e4c <main+0x224>)
 8001d00:	4853      	ldr	r0, [pc, #332]	; (8001e50 <main+0x228>)
 8001d02:	f002 fdf8 	bl	80048f6 <HAL_UART_Transmit>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx2_Buff, RX2_Size);
 8001d06:	2208      	movs	r2, #8
 8001d08:	4952      	ldr	r1, [pc, #328]	; (8001e54 <main+0x22c>)
 8001d0a:	4851      	ldr	r0, [pc, #324]	; (8001e50 <main+0x228>)
 8001d0c:	f002 fe85 	bl	8004a1a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001d10:	4b51      	ldr	r3, [pc, #324]	; (8001e58 <main+0x230>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4b50      	ldr	r3, [pc, #320]	; (8001e58 <main+0x230>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0204 	bic.w	r2, r2, #4
 8001d1e:	601a      	str	r2, [r3, #0]


  Last_Time = HAL_GetTick();
 8001d20:	f000 fdcc 	bl	80028bc <HAL_GetTick>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4a4d      	ldr	r2, [pc, #308]	; (8001e5c <main+0x234>)
 8001d28:	6013      	str	r3, [r2, #0]
  beginTime = HAL_GetTick();
 8001d2a:	f000 fdc7 	bl	80028bc <HAL_GetTick>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b4b      	ldr	r3, [pc, #300]	; (8001e60 <main+0x238>)
 8001d34:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  time = (HAL_GetTick() - beginTime)/1000.0;
 8001d36:	f000 fdc1 	bl	80028bc <HAL_GetTick>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4a48      	ldr	r2, [pc, #288]	; (8001e60 <main+0x238>)
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	1a9b      	subs	r3, r3, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fbfa 	bl	800053c <__aeabi_ui2d>
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	4b45      	ldr	r3, [pc, #276]	; (8001e64 <main+0x23c>)
 8001d4e:	f7fe fd99 	bl	8000884 <__aeabi_ddiv>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f7fe ff2b 	bl	8000bb4 <__aeabi_d2f>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4a41      	ldr	r2, [pc, #260]	; (8001e68 <main+0x240>)
 8001d62:	6013      	str	r3, [r2, #0]

//	  thetaD = 50 * sin(time*2.0);
	  thetaD = 50 * chirp(time * 0.07);
 8001d64:	4b40      	ldr	r3, [pc, #256]	; (8001e68 <main+0x240>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fc09 	bl	8000580 <__aeabi_f2d>
 8001d6e:	a32e      	add	r3, pc, #184	; (adr r3, 8001e28 <main+0x200>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe fc5c 	bl	8000630 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f7ff feda 	bl	8001b38 <chirp>
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <main+0x244>)
 8001d8a:	f7fe fc51 	bl	8000630 <__aeabi_dmul>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7fe ff0d 	bl	8000bb4 <__aeabi_d2f>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4a34      	ldr	r2, [pc, #208]	; (8001e70 <main+0x248>)
 8001d9e:	6013      	str	r3, [r2, #0]

	  if(thetaD >  180) thetaD = thetaD - 360;
 8001da0:	4b33      	ldr	r3, [pc, #204]	; (8001e70 <main+0x248>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4933      	ldr	r1, [pc, #204]	; (8001e74 <main+0x24c>)
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f8ce 	bl	8000f48 <__aeabi_fcmpgt>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d009      	beq.n	8001dc6 <main+0x19e>
 8001db2:	4b2f      	ldr	r3, [pc, #188]	; (8001e70 <main+0x248>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4930      	ldr	r1, [pc, #192]	; (8001e78 <main+0x250>)
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe ff4f 	bl	8000c5c <__aeabi_fsub>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <main+0x248>)
 8001dc4:	601a      	str	r2, [r3, #0]
	  if(thetaD < -180) thetaD = thetaD + 360;
 8001dc6:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <main+0x248>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	492c      	ldr	r1, [pc, #176]	; (8001e7c <main+0x254>)
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff f89d 	bl	8000f0c <__aeabi_fcmplt>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d009      	beq.n	8001dec <main+0x1c4>
 8001dd8:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <main+0x248>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4926      	ldr	r1, [pc, #152]	; (8001e78 <main+0x250>)
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe ff3e 	bl	8000c60 <__addsf3>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <main+0x248>)
 8001dea:	601a      	str	r2, [r3, #0]

	  K_P = Heading_f;
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <main+0x258>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a24      	ldr	r2, [pc, #144]	; (8001e84 <main+0x25c>)
 8001df2:	6013      	str	r3, [r2, #0]
	  if(HAL_GetTick() - Last_Time >= 100){
 8001df4:	f000 fd62 	bl	80028bc <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <main+0x234>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b63      	cmp	r3, #99	; 0x63
 8001e02:	f240 808c 	bls.w	8001f1e <main+0x2f6>
		  if(Heading == 0) {
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <main+0x260>)
 8001e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d141      	bne.n	8001e94 <main+0x26c>
			  K_I = 0;
 8001e10:	4b1e      	ldr	r3, [pc, #120]	; (8001e8c <main+0x264>)
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
			  K_D = 0;
 8001e18:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <main+0x268>)
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	e074      	b.n	8001f0c <main+0x2e4>
 8001e22:	bf00      	nop
 8001e24:	f3af 8000 	nop.w
 8001e28:	1eb851ec 	.word	0x1eb851ec
 8001e2c:	3fb1eb85 	.word	0x3fb1eb85
 8001e30:	2000008c 	.word	0x2000008c
 8001e34:	20000044 	.word	0x20000044
 8001e38:	40010c00 	.word	0x40010c00
 8001e3c:	40011000 	.word	0x40011000
 8001e40:	200001e4 	.word	0x200001e4
 8001e44:	200000d4 	.word	0x200000d4
 8001e48:	2000015c 	.word	0x2000015c
 8001e4c:	20000014 	.word	0x20000014
 8001e50:	20000118 	.word	0x20000118
 8001e54:	200001f0 	.word	0x200001f0
 8001e58:	200001a0 	.word	0x200001a0
 8001e5c:	2000024c 	.word	0x2000024c
 8001e60:	20000250 	.word	0x20000250
 8001e64:	408f4000 	.word	0x408f4000
 8001e68:	20000214 	.word	0x20000214
 8001e6c:	40490000 	.word	0x40490000
 8001e70:	20000210 	.word	0x20000210
 8001e74:	43340000 	.word	0x43340000
 8001e78:	43b40000 	.word	0x43b40000
 8001e7c:	c3340000 	.word	0xc3340000
 8001e80:	20000218 	.word	0x20000218
 8001e84:	20000224 	.word	0x20000224
 8001e88:	2000020c 	.word	0x2000020c
 8001e8c:	20000228 	.word	0x20000228
 8001e90:	2000022c 	.word	0x2000022c
		  }else{
			  K_I =( (Heading_f) * (0.1))+K_I ;
 8001e94:	4b44      	ldr	r3, [pc, #272]	; (8001fa8 <main+0x380>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb71 	bl	8000580 <__aeabi_f2d>
 8001e9e:	a340      	add	r3, pc, #256	; (adr r3, 8001fa0 <main+0x378>)
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	f7fe fbc4 	bl	8000630 <__aeabi_dmul>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4614      	mov	r4, r2
 8001eae:	461d      	mov	r5, r3
 8001eb0:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <main+0x384>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fb63 	bl	8000580 <__aeabi_f2d>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	4629      	mov	r1, r5
 8001ec2:	f7fe f9ff 	bl	80002c4 <__adddf3>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f7fe fe71 	bl	8000bb4 <__aeabi_d2f>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4a35      	ldr	r2, [pc, #212]	; (8001fac <main+0x384>)
 8001ed6:	6013      	str	r3, [r2, #0]
			  K_D = (Heading_f - Last_Heading)/0.1;
 8001ed8:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <main+0x380>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a34      	ldr	r2, [pc, #208]	; (8001fb0 <main+0x388>)
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe feba 	bl	8000c5c <__aeabi_fsub>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fb48 	bl	8000580 <__aeabi_f2d>
 8001ef0:	a32b      	add	r3, pc, #172	; (adr r3, 8001fa0 <main+0x378>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	f7fe fcc5 	bl	8000884 <__aeabi_ddiv>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	f7fe fe57 	bl	8000bb4 <__aeabi_d2f>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4a2a      	ldr	r2, [pc, #168]	; (8001fb4 <main+0x38c>)
 8001f0a:	6013      	str	r3, [r2, #0]
		  }
		  Last_Time = HAL_GetTick();
 8001f0c:	f000 fcd6 	bl	80028bc <HAL_GetTick>
 8001f10:	4603      	mov	r3, r0
 8001f12:	4a29      	ldr	r2, [pc, #164]	; (8001fb8 <main+0x390>)
 8001f14:	6013      	str	r3, [r2, #0]
		  Last_Heading = Heading_f;
 8001f16:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <main+0x380>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a25      	ldr	r2, [pc, #148]	; (8001fb0 <main+0x388>)
 8001f1c:	6013      	str	r3, [r2, #0]
	  }
	  // correction = 2.1 * K_P + 0.43 * K_I + 0.0 * K_D;
	  correction = 4 * (Heading - thetaD);//1 * K_P + 100 * K_I + 1 * K_D;
 8001f1e:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <main+0x394>)
 8001f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe ff4f 	bl	8000dc8 <__aeabi_i2f>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <main+0x398>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	4610      	mov	r0, r2
 8001f34:	f7fe fe92 	bl	8000c5c <__aeabi_fsub>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe f906 	bl	8000150 <__aeabi_fmul>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff f808 	bl	8000f5c <__aeabi_f2iz>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <main+0x39c>)
 8001f50:	6013      	str	r3, [r2, #0]


	  if(Correction_EN == 1)
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <main+0x3a0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d117      	bne.n	8001f8a <main+0x362>
		  motor(l1 + correction, l2 + correction, r2 + correction, r1 + correction);
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <main+0x3a4>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <main+0x39c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	18d0      	adds	r0, r2, r3
 8001f64:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <main+0x3a8>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <main+0x39c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	18d1      	adds	r1, r2, r3
 8001f6e:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <main+0x3ac>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <main+0x39c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	18d4      	adds	r4, r2, r3
 8001f78:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <main+0x3b0>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <main+0x39c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4413      	add	r3, r2
 8001f82:	4622      	mov	r2, r4
 8001f84:	f7ff f848 	bl	8001018 <motor>
 8001f88:	e6d5      	b.n	8001d36 <main+0x10e>
	  else
		  motor(l1, l2, r2, r1);
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <main+0x3a4>)
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <main+0x3a8>)
 8001f90:	6819      	ldr	r1, [r3, #0]
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <main+0x3ac>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <main+0x3b0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f7ff f83d 	bl	8001018 <motor>
	  time = (HAL_GetTick() - beginTime)/1000.0;
 8001f9e:	e6ca      	b.n	8001d36 <main+0x10e>
 8001fa0:	9999999a 	.word	0x9999999a
 8001fa4:	3fb99999 	.word	0x3fb99999
 8001fa8:	20000218 	.word	0x20000218
 8001fac:	20000228 	.word	0x20000228
 8001fb0:	2000021c 	.word	0x2000021c
 8001fb4:	2000022c 	.word	0x2000022c
 8001fb8:	2000024c 	.word	0x2000024c
 8001fbc:	2000020c 	.word	0x2000020c
 8001fc0:	20000210 	.word	0x20000210
 8001fc4:	20000220 	.word	0x20000220
 8001fc8:	20000230 	.word	0x20000230
 8001fcc:	200001f8 	.word	0x200001f8
 8001fd0:	200001fc 	.word	0x200001fc
 8001fd4:	20000200 	.word	0x20000200
 8001fd8:	20000204 	.word	0x20000204

08001fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b090      	sub	sp, #64	; 0x40
 8001fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fe2:	f107 0318 	add.w	r3, r7, #24
 8001fe6:	2228      	movs	r2, #40	; 0x28
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f003 faa8 	bl	8005540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
 8001ffc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ffe:	2302      	movs	r3, #2
 8002000:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002002:	2301      	movs	r3, #1
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002006:	2310      	movs	r3, #16
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800200a:	2302      	movs	r3, #2
 800200c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800200e:	2300      	movs	r3, #0
 8002010:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002012:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002016:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002018:	f107 0318 	add.w	r3, r7, #24
 800201c:	4618      	mov	r0, r3
 800201e:	f001 f9f3 	bl	8003408 <HAL_RCC_OscConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002028:	f000 f9e4 	bl	80023f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800202c:	230f      	movs	r3, #15
 800202e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002030:	2302      	movs	r3, #2
 8002032:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800203c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	2102      	movs	r1, #2
 8002046:	4618      	mov	r0, r3
 8002048:	f001 fc60 	bl	800390c <HAL_RCC_ClockConfig>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002052:	f000 f9cf 	bl	80023f4 <Error_Handler>
  }
}
 8002056:	bf00      	nop
 8002058:	3740      	adds	r7, #64	; 0x40
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002066:	f107 0308 	add.w	r3, r7, #8
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002074:	463b      	mov	r3, r7
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800207c:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <MX_TIM1_Init+0x98>)
 800207e:	4a1f      	ldr	r2, [pc, #124]	; (80020fc <MX_TIM1_Init+0x9c>)
 8002080:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <MX_TIM1_Init+0x98>)
 8002084:	223f      	movs	r2, #63	; 0x3f
 8002086:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002088:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <MX_TIM1_Init+0x98>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <MX_TIM1_Init+0x98>)
 8002090:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002094:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002096:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <MX_TIM1_Init+0x98>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800209c:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <MX_TIM1_Init+0x98>)
 800209e:	2200      	movs	r2, #0
 80020a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <MX_TIM1_Init+0x98>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020a8:	4813      	ldr	r0, [pc, #76]	; (80020f8 <MX_TIM1_Init+0x98>)
 80020aa:	f001 fdc7 	bl	8003c3c <HAL_TIM_Base_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80020b4:	f000 f99e 	bl	80023f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020be:	f107 0308 	add.w	r3, r7, #8
 80020c2:	4619      	mov	r1, r3
 80020c4:	480c      	ldr	r0, [pc, #48]	; (80020f8 <MX_TIM1_Init+0x98>)
 80020c6:	f002 f803 	bl	80040d0 <HAL_TIM_ConfigClockSource>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80020d0:	f000 f990 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d4:	2300      	movs	r3, #0
 80020d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020dc:	463b      	mov	r3, r7
 80020de:	4619      	mov	r1, r3
 80020e0:	4805      	ldr	r0, [pc, #20]	; (80020f8 <MX_TIM1_Init+0x98>)
 80020e2:	f002 fb5d 	bl	80047a0 <HAL_TIMEx_MasterConfigSynchronization>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80020ec:	f000 f982 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020f0:	bf00      	nop
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20000044 	.word	0x20000044
 80020fc:	40012c00 	.word	0x40012c00

08002100 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	; 0x28
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002106:	f107 0320 	add.w	r3, r7, #32
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]
 800211c:	611a      	str	r2, [r3, #16]
 800211e:	615a      	str	r2, [r3, #20]
 8002120:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002122:	4b32      	ldr	r3, [pc, #200]	; (80021ec <MX_TIM4_Init+0xec>)
 8002124:	4a32      	ldr	r2, [pc, #200]	; (80021f0 <MX_TIM4_Init+0xf0>)
 8002126:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002128:	4b30      	ldr	r3, [pc, #192]	; (80021ec <MX_TIM4_Init+0xec>)
 800212a:	2200      	movs	r2, #0
 800212c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212e:	4b2f      	ldr	r3, [pc, #188]	; (80021ec <MX_TIM4_Init+0xec>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002134:	4b2d      	ldr	r3, [pc, #180]	; (80021ec <MX_TIM4_Init+0xec>)
 8002136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800213a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213c:	4b2b      	ldr	r3, [pc, #172]	; (80021ec <MX_TIM4_Init+0xec>)
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002142:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <MX_TIM4_Init+0xec>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002148:	4828      	ldr	r0, [pc, #160]	; (80021ec <MX_TIM4_Init+0xec>)
 800214a:	f001 fe11 	bl	8003d70 <HAL_TIM_PWM_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002154:	f000 f94e 	bl	80023f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002158:	2300      	movs	r3, #0
 800215a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002160:	f107 0320 	add.w	r3, r7, #32
 8002164:	4619      	mov	r1, r3
 8002166:	4821      	ldr	r0, [pc, #132]	; (80021ec <MX_TIM4_Init+0xec>)
 8002168:	f002 fb1a 	bl	80047a0 <HAL_TIMEx_MasterConfigSynchronization>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002172:	f000 f93f 	bl	80023f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002176:	2360      	movs	r3, #96	; 0x60
 8002178:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	2200      	movs	r2, #0
 800218a:	4619      	mov	r1, r3
 800218c:	4817      	ldr	r0, [pc, #92]	; (80021ec <MX_TIM4_Init+0xec>)
 800218e:	f001 fee1 	bl	8003f54 <HAL_TIM_PWM_ConfigChannel>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002198:	f000 f92c 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	2204      	movs	r2, #4
 80021a0:	4619      	mov	r1, r3
 80021a2:	4812      	ldr	r0, [pc, #72]	; (80021ec <MX_TIM4_Init+0xec>)
 80021a4:	f001 fed6 	bl	8003f54 <HAL_TIM_PWM_ConfigChannel>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80021ae:	f000 f921 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	2208      	movs	r2, #8
 80021b6:	4619      	mov	r1, r3
 80021b8:	480c      	ldr	r0, [pc, #48]	; (80021ec <MX_TIM4_Init+0xec>)
 80021ba:	f001 fecb 	bl	8003f54 <HAL_TIM_PWM_ConfigChannel>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80021c4:	f000 f916 	bl	80023f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	220c      	movs	r2, #12
 80021cc:	4619      	mov	r1, r3
 80021ce:	4807      	ldr	r0, [pc, #28]	; (80021ec <MX_TIM4_Init+0xec>)
 80021d0:	f001 fec0 	bl	8003f54 <HAL_TIM_PWM_ConfigChannel>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80021da:	f000 f90b 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80021de:	4803      	ldr	r0, [pc, #12]	; (80021ec <MX_TIM4_Init+0xec>)
 80021e0:	f000 f97c 	bl	80024dc <HAL_TIM_MspPostInit>

}
 80021e4:	bf00      	nop
 80021e6:	3728      	adds	r7, #40	; 0x28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	2000008c 	.word	0x2000008c
 80021f0:	40000800 	.word	0x40000800

080021f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <MX_USART1_UART_Init+0x4c>)
 80021fa:	4a12      	ldr	r2, [pc, #72]	; (8002244 <MX_USART1_UART_Init+0x50>)
 80021fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <MX_USART1_UART_Init+0x4c>)
 8002200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002204:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <MX_USART1_UART_Init+0x4c>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <MX_USART1_UART_Init+0x4c>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <MX_USART1_UART_Init+0x4c>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <MX_USART1_UART_Init+0x4c>)
 800221a:	220c      	movs	r2, #12
 800221c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <MX_USART1_UART_Init+0x4c>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <MX_USART1_UART_Init+0x4c>)
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800222a:	4805      	ldr	r0, [pc, #20]	; (8002240 <MX_USART1_UART_Init+0x4c>)
 800222c:	f002 fb16 	bl	800485c <HAL_UART_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002236:	f000 f8dd 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200000d4 	.word	0x200000d4
 8002244:	40013800 	.word	0x40013800

08002248 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <MX_USART2_UART_Init+0x50>)
 8002250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 800226e:	220c      	movs	r2, #12
 8002270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800227e:	4805      	ldr	r0, [pc, #20]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002280:	f002 faec 	bl	800485c <HAL_UART_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800228a:	f000 f8b3 	bl	80023f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000118 	.word	0x20000118
 8002298:	40004400 	.word	0x40004400

0800229c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <MX_DMA_Init+0x48>)
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	4a0f      	ldr	r2, [pc, #60]	; (80022e4 <MX_DMA_Init+0x48>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6153      	str	r3, [r2, #20]
 80022ae:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <MX_DMA_Init+0x48>)
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	200f      	movs	r0, #15
 80022c0:	f000 fc01 	bl	8002ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80022c4:	200f      	movs	r0, #15
 80022c6:	f000 fc1a 	bl	8002afe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2100      	movs	r1, #0
 80022ce:	2010      	movs	r0, #16
 80022d0:	f000 fbf9 	bl	8002ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80022d4:	2010      	movs	r0, #16
 80022d6:	f000 fc12 	bl	8002afe <HAL_NVIC_EnableIRQ>

}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000

080022e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ee:	f107 0310 	add.w	r3, r7, #16
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022fc:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <MX_GPIO_Init+0xfc>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	4a38      	ldr	r2, [pc, #224]	; (80023e4 <MX_GPIO_Init+0xfc>)
 8002302:	f043 0310 	orr.w	r3, r3, #16
 8002306:	6193      	str	r3, [r2, #24]
 8002308:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <MX_GPIO_Init+0xfc>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002314:	4b33      	ldr	r3, [pc, #204]	; (80023e4 <MX_GPIO_Init+0xfc>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	4a32      	ldr	r2, [pc, #200]	; (80023e4 <MX_GPIO_Init+0xfc>)
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	6193      	str	r3, [r2, #24]
 8002320:	4b30      	ldr	r3, [pc, #192]	; (80023e4 <MX_GPIO_Init+0xfc>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800232c:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <MX_GPIO_Init+0xfc>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	4a2c      	ldr	r2, [pc, #176]	; (80023e4 <MX_GPIO_Init+0xfc>)
 8002332:	f043 0308 	orr.w	r3, r3, #8
 8002336:	6193      	str	r3, [r2, #24]
 8002338:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <MX_GPIO_Init+0xfc>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002344:	2200      	movs	r2, #0
 8002346:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800234a:	4827      	ldr	r0, [pc, #156]	; (80023e8 <MX_GPIO_Init+0x100>)
 800234c:	f001 f82b 	bl	80033a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|INA3_Pin
 8002350:	2200      	movs	r2, #0
 8002352:	f641 0170 	movw	r1, #6256	; 0x1870
 8002356:	4825      	ldr	r0, [pc, #148]	; (80023ec <MX_GPIO_Init+0x104>)
 8002358:	f001 f825 	bl	80033a6 <HAL_GPIO_WritePin>
                          |INB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INA2_Pin|INB2_Pin|INA1_Pin|INB1_Pin
 800235c:	2200      	movs	r2, #0
 800235e:	f24f 0138 	movw	r1, #61496	; 0xf038
 8002362:	4823      	ldr	r0, [pc, #140]	; (80023f0 <MX_GPIO_Init+0x108>)
 8002364:	f001 f81f 	bl	80033a6 <HAL_GPIO_WritePin>
                          |MOTORS_EN_Pin|INA4_Pin|INB4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002368:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800236c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800236e:	2301      	movs	r3, #1
 8002370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	2302      	movs	r3, #2
 8002378:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800237a:	f107 0310 	add.w	r3, r7, #16
 800237e:	4619      	mov	r1, r3
 8002380:	4819      	ldr	r0, [pc, #100]	; (80023e8 <MX_GPIO_Init+0x100>)
 8002382:	f000 fe75 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002386:	2302      	movs	r3, #2
 8002388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002392:	f107 0310 	add.w	r3, r7, #16
 8002396:	4619      	mov	r1, r3
 8002398:	4814      	ldr	r0, [pc, #80]	; (80023ec <MX_GPIO_Init+0x104>)
 800239a:	f000 fe69 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 INA3_Pin
                           INB3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|INA3_Pin
 800239e:	f641 0370 	movw	r3, #6256	; 0x1870
 80023a2:	613b      	str	r3, [r7, #16]
                          |INB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a4:	2301      	movs	r3, #1
 80023a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2302      	movs	r3, #2
 80023ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b0:	f107 0310 	add.w	r3, r7, #16
 80023b4:	4619      	mov	r1, r3
 80023b6:	480d      	ldr	r0, [pc, #52]	; (80023ec <MX_GPIO_Init+0x104>)
 80023b8:	f000 fe5a 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : INA2_Pin INB2_Pin INA1_Pin INB1_Pin
                           MOTORS_EN_Pin INA4_Pin INB4_Pin */
  GPIO_InitStruct.Pin = INA2_Pin|INB2_Pin|INA1_Pin|INB1_Pin
 80023bc:	f24f 0338 	movw	r3, #61496	; 0xf038
 80023c0:	613b      	str	r3, [r7, #16]
                          |MOTORS_EN_Pin|INA4_Pin|INB4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c2:	2301      	movs	r3, #1
 80023c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ca:	2302      	movs	r3, #2
 80023cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ce:	f107 0310 	add.w	r3, r7, #16
 80023d2:	4619      	mov	r1, r3
 80023d4:	4806      	ldr	r0, [pc, #24]	; (80023f0 <MX_GPIO_Init+0x108>)
 80023d6:	f000 fe4b 	bl	8003070 <HAL_GPIO_Init>

}
 80023da:	bf00      	nop
 80023dc:	3720      	adds	r7, #32
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40011000 	.word	0x40011000
 80023ec:	40010800 	.word	0x40010800
 80023f0:	40010c00 	.word	0x40010c00

080023f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023f8:	b672      	cpsid	i
}
 80023fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023fc:	e7fe      	b.n	80023fc <Error_Handler+0x8>
	...

08002400 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <HAL_MspInit+0x5c>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	4a14      	ldr	r2, [pc, #80]	; (800245c <HAL_MspInit+0x5c>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6193      	str	r3, [r2, #24]
 8002412:	4b12      	ldr	r3, [pc, #72]	; (800245c <HAL_MspInit+0x5c>)
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <HAL_MspInit+0x5c>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	4a0e      	ldr	r2, [pc, #56]	; (800245c <HAL_MspInit+0x5c>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002428:	61d3      	str	r3, [r2, #28]
 800242a:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_MspInit+0x5c>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_MspInit+0x60>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <HAL_MspInit+0x60>)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	40021000 	.word	0x40021000
 8002460:	40010000 	.word	0x40010000

08002464 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a09      	ldr	r2, [pc, #36]	; (8002498 <HAL_TIM_Base_MspInit+0x34>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d10b      	bne.n	800248e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <HAL_TIM_Base_MspInit+0x38>)
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	4a08      	ldr	r2, [pc, #32]	; (800249c <HAL_TIM_Base_MspInit+0x38>)
 800247c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002480:	6193      	str	r3, [r2, #24]
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_TIM_Base_MspInit+0x38>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800248e:	bf00      	nop
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	40012c00 	.word	0x40012c00
 800249c:	40021000 	.word	0x40021000

080024a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <HAL_TIM_PWM_MspInit+0x34>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d10b      	bne.n	80024ca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_TIM_PWM_MspInit+0x38>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <HAL_TIM_PWM_MspInit+0x38>)
 80024b8:	f043 0304 	orr.w	r3, r3, #4
 80024bc:	61d3      	str	r3, [r2, #28]
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_TIM_PWM_MspInit+0x38>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80024ca:	bf00      	nop
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr
 80024d4:	40000800 	.word	0x40000800
 80024d8:	40021000 	.word	0x40021000

080024dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 0310 	add.w	r3, r7, #16
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a10      	ldr	r2, [pc, #64]	; (8002538 <HAL_TIM_MspPostInit+0x5c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d118      	bne.n	800252e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <HAL_TIM_MspPostInit+0x60>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	4a0e      	ldr	r2, [pc, #56]	; (800253c <HAL_TIM_MspPostInit+0x60>)
 8002502:	f043 0308 	orr.w	r3, r3, #8
 8002506:	6193      	str	r3, [r2, #24]
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <HAL_TIM_MspPostInit+0x60>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002514:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2302      	movs	r3, #2
 8002520:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002522:	f107 0310 	add.w	r3, r7, #16
 8002526:	4619      	mov	r1, r3
 8002528:	4805      	ldr	r0, [pc, #20]	; (8002540 <HAL_TIM_MspPostInit+0x64>)
 800252a:	f000 fda1 	bl	8003070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800252e:	bf00      	nop
 8002530:	3720      	adds	r7, #32
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40000800 	.word	0x40000800
 800253c:	40021000 	.word	0x40021000
 8002540:	40010c00 	.word	0x40010c00

08002544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 0318 	add.w	r3, r7, #24
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a65      	ldr	r2, [pc, #404]	; (80026f4 <HAL_UART_MspInit+0x1b0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d160      	bne.n	8002626 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002564:	4b64      	ldr	r3, [pc, #400]	; (80026f8 <HAL_UART_MspInit+0x1b4>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	4a63      	ldr	r2, [pc, #396]	; (80026f8 <HAL_UART_MspInit+0x1b4>)
 800256a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800256e:	6193      	str	r3, [r2, #24]
 8002570:	4b61      	ldr	r3, [pc, #388]	; (80026f8 <HAL_UART_MspInit+0x1b4>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257c:	4b5e      	ldr	r3, [pc, #376]	; (80026f8 <HAL_UART_MspInit+0x1b4>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	4a5d      	ldr	r2, [pc, #372]	; (80026f8 <HAL_UART_MspInit+0x1b4>)
 8002582:	f043 0304 	orr.w	r3, r3, #4
 8002586:	6193      	str	r3, [r2, #24]
 8002588:	4b5b      	ldr	r3, [pc, #364]	; (80026f8 <HAL_UART_MspInit+0x1b4>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2302      	movs	r3, #2
 800259c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800259e:	2303      	movs	r3, #3
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a2:	f107 0318 	add.w	r3, r7, #24
 80025a6:	4619      	mov	r1, r3
 80025a8:	4854      	ldr	r0, [pc, #336]	; (80026fc <HAL_UART_MspInit+0x1b8>)
 80025aa:	f000 fd61 	bl	8003070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025bc:	f107 0318 	add.w	r3, r7, #24
 80025c0:	4619      	mov	r1, r3
 80025c2:	484e      	ldr	r0, [pc, #312]	; (80026fc <HAL_UART_MspInit+0x1b8>)
 80025c4:	f000 fd54 	bl	8003070 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80025c8:	4b4d      	ldr	r3, [pc, #308]	; (8002700 <HAL_UART_MspInit+0x1bc>)
 80025ca:	4a4e      	ldr	r2, [pc, #312]	; (8002704 <HAL_UART_MspInit+0x1c0>)
 80025cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025ce:	4b4c      	ldr	r3, [pc, #304]	; (8002700 <HAL_UART_MspInit+0x1bc>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d4:	4b4a      	ldr	r3, [pc, #296]	; (8002700 <HAL_UART_MspInit+0x1bc>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025da:	4b49      	ldr	r3, [pc, #292]	; (8002700 <HAL_UART_MspInit+0x1bc>)
 80025dc:	2280      	movs	r2, #128	; 0x80
 80025de:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025e0:	4b47      	ldr	r3, [pc, #284]	; (8002700 <HAL_UART_MspInit+0x1bc>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025e6:	4b46      	ldr	r3, [pc, #280]	; (8002700 <HAL_UART_MspInit+0x1bc>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80025ec:	4b44      	ldr	r3, [pc, #272]	; (8002700 <HAL_UART_MspInit+0x1bc>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025f2:	4b43      	ldr	r3, [pc, #268]	; (8002700 <HAL_UART_MspInit+0x1bc>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025f8:	4841      	ldr	r0, [pc, #260]	; (8002700 <HAL_UART_MspInit+0x1bc>)
 80025fa:	f000 fa9b 	bl	8002b34 <HAL_DMA_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002604:	f7ff fef6 	bl	80023f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a3d      	ldr	r2, [pc, #244]	; (8002700 <HAL_UART_MspInit+0x1bc>)
 800260c:	639a      	str	r2, [r3, #56]	; 0x38
 800260e:	4a3c      	ldr	r2, [pc, #240]	; (8002700 <HAL_UART_MspInit+0x1bc>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002614:	2200      	movs	r2, #0
 8002616:	2100      	movs	r1, #0
 8002618:	2025      	movs	r0, #37	; 0x25
 800261a:	f000 fa54 	bl	8002ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800261e:	2025      	movs	r0, #37	; 0x25
 8002620:	f000 fa6d 	bl	8002afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002624:	e062      	b.n	80026ec <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a37      	ldr	r2, [pc, #220]	; (8002708 <HAL_UART_MspInit+0x1c4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d15d      	bne.n	80026ec <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002630:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <HAL_UART_MspInit+0x1b4>)
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	4a30      	ldr	r2, [pc, #192]	; (80026f8 <HAL_UART_MspInit+0x1b4>)
 8002636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800263a:	61d3      	str	r3, [r2, #28]
 800263c:	4b2e      	ldr	r3, [pc, #184]	; (80026f8 <HAL_UART_MspInit+0x1b4>)
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002648:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <HAL_UART_MspInit+0x1b4>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	4a2a      	ldr	r2, [pc, #168]	; (80026f8 <HAL_UART_MspInit+0x1b4>)
 800264e:	f043 0304 	orr.w	r3, r3, #4
 8002652:	6193      	str	r3, [r2, #24]
 8002654:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <HAL_UART_MspInit+0x1b4>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002660:	2304      	movs	r3, #4
 8002662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002668:	2303      	movs	r3, #3
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266c:	f107 0318 	add.w	r3, r7, #24
 8002670:	4619      	mov	r1, r3
 8002672:	4822      	ldr	r0, [pc, #136]	; (80026fc <HAL_UART_MspInit+0x1b8>)
 8002674:	f000 fcfc 	bl	8003070 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002678:	2308      	movs	r3, #8
 800267a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800267c:	2300      	movs	r3, #0
 800267e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	f107 0318 	add.w	r3, r7, #24
 8002688:	4619      	mov	r1, r3
 800268a:	481c      	ldr	r0, [pc, #112]	; (80026fc <HAL_UART_MspInit+0x1b8>)
 800268c:	f000 fcf0 	bl	8003070 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002690:	4b1e      	ldr	r3, [pc, #120]	; (800270c <HAL_UART_MspInit+0x1c8>)
 8002692:	4a1f      	ldr	r2, [pc, #124]	; (8002710 <HAL_UART_MspInit+0x1cc>)
 8002694:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002696:	4b1d      	ldr	r3, [pc, #116]	; (800270c <HAL_UART_MspInit+0x1c8>)
 8002698:	2200      	movs	r2, #0
 800269a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800269c:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_UART_MspInit+0x1c8>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026a2:	4b1a      	ldr	r3, [pc, #104]	; (800270c <HAL_UART_MspInit+0x1c8>)
 80026a4:	2280      	movs	r2, #128	; 0x80
 80026a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026a8:	4b18      	ldr	r3, [pc, #96]	; (800270c <HAL_UART_MspInit+0x1c8>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_UART_MspInit+0x1c8>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80026b4:	4b15      	ldr	r3, [pc, #84]	; (800270c <HAL_UART_MspInit+0x1c8>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <HAL_UART_MspInit+0x1c8>)
 80026bc:	2200      	movs	r2, #0
 80026be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026c0:	4812      	ldr	r0, [pc, #72]	; (800270c <HAL_UART_MspInit+0x1c8>)
 80026c2:	f000 fa37 	bl	8002b34 <HAL_DMA_Init>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80026cc:	f7ff fe92 	bl	80023f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a0e      	ldr	r2, [pc, #56]	; (800270c <HAL_UART_MspInit+0x1c8>)
 80026d4:	639a      	str	r2, [r3, #56]	; 0x38
 80026d6:	4a0d      	ldr	r2, [pc, #52]	; (800270c <HAL_UART_MspInit+0x1c8>)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026dc:	2200      	movs	r2, #0
 80026de:	2100      	movs	r1, #0
 80026e0:	2026      	movs	r0, #38	; 0x26
 80026e2:	f000 f9f0 	bl	8002ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026e6:	2026      	movs	r0, #38	; 0x26
 80026e8:	f000 fa09 	bl	8002afe <HAL_NVIC_EnableIRQ>
}
 80026ec:	bf00      	nop
 80026ee:	3728      	adds	r7, #40	; 0x28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40010800 	.word	0x40010800
 8002700:	2000015c 	.word	0x2000015c
 8002704:	40020058 	.word	0x40020058
 8002708:	40004400 	.word	0x40004400
 800270c:	200001a0 	.word	0x200001a0
 8002710:	4002006c 	.word	0x4002006c

08002714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002718:	e7fe      	b.n	8002718 <NMI_Handler+0x4>

0800271a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800271e:	e7fe      	b.n	800271e <HardFault_Handler+0x4>

08002720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002724:	e7fe      	b.n	8002724 <MemManage_Handler+0x4>

08002726 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800272a:	e7fe      	b.n	800272a <BusFault_Handler+0x4>

0800272c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002730:	e7fe      	b.n	8002730 <UsageFault_Handler+0x4>

08002732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800275a:	f000 f89d 	bl	8002898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <DMA1_Channel5_IRQHandler+0x10>)
 800276a:	f000 fb4d 	bl	8002e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	2000015c 	.word	0x2000015c

08002778 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <DMA1_Channel6_IRQHandler+0x10>)
 800277e:	f000 fb43 	bl	8002e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	200001a0 	.word	0x200001a0

0800278c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002790:	4802      	ldr	r0, [pc, #8]	; (800279c <USART1_IRQHandler+0x10>)
 8002792:	f002 f991 	bl	8004ab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	200000d4 	.word	0x200000d4

080027a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027a4:	4802      	ldr	r0, [pc, #8]	; (80027b0 <USART2_IRQHandler+0x10>)
 80027a6:	f002 f987 	bl	8004ab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000118 	.word	0x20000118

080027b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027c0:	480c      	ldr	r0, [pc, #48]	; (80027f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027c2:	490d      	ldr	r1, [pc, #52]	; (80027f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027c4:	4a0d      	ldr	r2, [pc, #52]	; (80027fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c8:	e002      	b.n	80027d0 <LoopCopyDataInit>

080027ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ce:	3304      	adds	r3, #4

080027d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d4:	d3f9      	bcc.n	80027ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027d8:	4c0a      	ldr	r4, [pc, #40]	; (8002804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027dc:	e001      	b.n	80027e2 <LoopFillZerobss>

080027de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e0:	3204      	adds	r2, #4

080027e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e4:	d3fb      	bcc.n	80027de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027e6:	f7ff ffe5 	bl	80027b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ea:	f002 fe85 	bl	80054f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027ee:	f7ff fa1b 	bl	8001c28 <main>
  bx lr
 80027f2:	4770      	bx	lr
  ldr r0, =_sdata
 80027f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f8:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80027fc:	08006768 	.word	0x08006768
  ldr r2, =_sbss
 8002800:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002804:	20000258 	.word	0x20000258

08002808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002808:	e7fe      	b.n	8002808 <ADC1_2_IRQHandler>
	...

0800280c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002810:	4b08      	ldr	r3, [pc, #32]	; (8002834 <HAL_Init+0x28>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a07      	ldr	r2, [pc, #28]	; (8002834 <HAL_Init+0x28>)
 8002816:	f043 0310 	orr.w	r3, r3, #16
 800281a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800281c:	2003      	movs	r0, #3
 800281e:	f000 f947 	bl	8002ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002822:	200f      	movs	r0, #15
 8002824:	f000 f808 	bl	8002838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002828:	f7ff fdea 	bl	8002400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40022000 	.word	0x40022000

08002838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_InitTick+0x54>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_InitTick+0x58>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	4619      	mov	r1, r3
 800284a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002852:	fbb2 f3f3 	udiv	r3, r2, r3
 8002856:	4618      	mov	r0, r3
 8002858:	f000 f95f 	bl	8002b1a <HAL_SYSTICK_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e00e      	b.n	8002884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b0f      	cmp	r3, #15
 800286a:	d80a      	bhi.n	8002882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800286c:	2200      	movs	r2, #0
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	f04f 30ff 	mov.w	r0, #4294967295
 8002874:	f000 f927 	bl	8002ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002878:	4a06      	ldr	r2, [pc, #24]	; (8002894 <HAL_InitTick+0x5c>)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	e000      	b.n	8002884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	2000001c 	.word	0x2000001c
 8002890:	20000024 	.word	0x20000024
 8002894:	20000020 	.word	0x20000020

08002898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_IncTick+0x1c>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_IncTick+0x20>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	4a03      	ldr	r2, [pc, #12]	; (80028b8 <HAL_IncTick+0x20>)
 80028aa:	6013      	str	r3, [r2, #0]
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	20000024 	.word	0x20000024
 80028b8:	20000254 	.word	0x20000254

080028bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return uwTick;
 80028c0:	4b02      	ldr	r3, [pc, #8]	; (80028cc <HAL_GetTick+0x10>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	20000254 	.word	0x20000254

080028d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d8:	f7ff fff0 	bl	80028bc <HAL_GetTick>
 80028dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d005      	beq.n	80028f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <HAL_Delay+0x44>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4413      	add	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028f6:	bf00      	nop
 80028f8:	f7ff ffe0 	bl	80028bc <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	429a      	cmp	r2, r3
 8002906:	d8f7      	bhi.n	80028f8 <HAL_Delay+0x28>
  {
  }
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000024 	.word	0x20000024

08002918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002928:	4b0c      	ldr	r3, [pc, #48]	; (800295c <__NVIC_SetPriorityGrouping+0x44>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002934:	4013      	ands	r3, r2
 8002936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294a:	4a04      	ldr	r2, [pc, #16]	; (800295c <__NVIC_SetPriorityGrouping+0x44>)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	60d3      	str	r3, [r2, #12]
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002964:	4b04      	ldr	r3, [pc, #16]	; (8002978 <__NVIC_GetPriorityGrouping+0x18>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	f003 0307 	and.w	r3, r3, #7
}
 800296e:	4618      	mov	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	2b00      	cmp	r3, #0
 800298c:	db0b      	blt.n	80029a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	f003 021f 	and.w	r2, r3, #31
 8002994:	4906      	ldr	r1, [pc, #24]	; (80029b0 <__NVIC_EnableIRQ+0x34>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	2001      	movs	r0, #1
 800299e:	fa00 f202 	lsl.w	r2, r0, r2
 80029a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	e000e100 	.word	0xe000e100

080029b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	db0a      	blt.n	80029de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	490c      	ldr	r1, [pc, #48]	; (8002a00 <__NVIC_SetPriority+0x4c>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	0112      	lsls	r2, r2, #4
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	440b      	add	r3, r1
 80029d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029dc:	e00a      	b.n	80029f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4908      	ldr	r1, [pc, #32]	; (8002a04 <__NVIC_SetPriority+0x50>)
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	3b04      	subs	r3, #4
 80029ec:	0112      	lsls	r2, r2, #4
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	440b      	add	r3, r1
 80029f2:	761a      	strb	r2, [r3, #24]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	e000e100 	.word	0xe000e100
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	; 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f1c3 0307 	rsb	r3, r3, #7
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	bf28      	it	cs
 8002a26:	2304      	movcs	r3, #4
 8002a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d902      	bls.n	8002a38 <NVIC_EncodePriority+0x30>
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3b03      	subs	r3, #3
 8002a36:	e000      	b.n	8002a3a <NVIC_EncodePriority+0x32>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	43d9      	mvns	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	4313      	orrs	r3, r2
         );
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3724      	adds	r7, #36	; 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a7c:	d301      	bcc.n	8002a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e00f      	b.n	8002aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a82:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <SysTick_Config+0x40>)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a8a:	210f      	movs	r1, #15
 8002a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a90:	f7ff ff90 	bl	80029b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <SysTick_Config+0x40>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a9a:	4b04      	ldr	r3, [pc, #16]	; (8002aac <SysTick_Config+0x40>)
 8002a9c:	2207      	movs	r2, #7
 8002a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	e000e010 	.word	0xe000e010

08002ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff ff2d 	bl	8002918 <__NVIC_SetPriorityGrouping>
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b086      	sub	sp, #24
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4603      	mov	r3, r0
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad8:	f7ff ff42 	bl	8002960 <__NVIC_GetPriorityGrouping>
 8002adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	6978      	ldr	r0, [r7, #20]
 8002ae4:	f7ff ff90 	bl	8002a08 <NVIC_EncodePriority>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aee:	4611      	mov	r1, r2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ff5f 	bl	80029b4 <__NVIC_SetPriority>
}
 8002af6:	bf00      	nop
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	4603      	mov	r3, r0
 8002b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff35 	bl	800297c <__NVIC_EnableIRQ>
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff ffa2 	bl	8002a6c <SysTick_Config>
 8002b28:	4603      	mov	r3, r0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e043      	b.n	8002bd2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <HAL_DMA_Init+0xa8>)
 8002b52:	4413      	add	r3, r2
 8002b54:	4a22      	ldr	r2, [pc, #136]	; (8002be0 <HAL_DMA_Init+0xac>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	009a      	lsls	r2, r3, #2
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a1f      	ldr	r2, [pc, #124]	; (8002be4 <HAL_DMA_Init+0xb0>)
 8002b66:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b7e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr
 8002bdc:	bffdfff8 	.word	0xbffdfff8
 8002be0:	cccccccd 	.word	0xcccccccd
 8002be4:	40020000 	.word	0x40020000

08002be8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_DMA_Start_IT+0x20>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e04a      	b.n	8002c9e <HAL_DMA_Start_IT+0xb6>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d13a      	bne.n	8002c90 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f9e8 	bl	8003014 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 020e 	orr.w	r2, r2, #14
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	e00f      	b.n	8002c7e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0204 	bic.w	r2, r2, #4
 8002c6c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 020a 	orr.w	r2, r2, #10
 8002c7c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0201 	orr.w	r2, r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	e005      	b.n	8002c9c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b085      	sub	sp, #20
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d008      	beq.n	8002cce <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e020      	b.n	8002d10 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 020e 	bic.w	r2, r2, #14
 8002cdc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d005      	beq.n	8002d3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2204      	movs	r2, #4
 8002d36:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
 8002d3c:	e051      	b.n	8002de2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 020e 	bic.w	r2, r2, #14
 8002d4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a22      	ldr	r2, [pc, #136]	; (8002dec <HAL_DMA_Abort_IT+0xd0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d029      	beq.n	8002dbc <HAL_DMA_Abort_IT+0xa0>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a20      	ldr	r2, [pc, #128]	; (8002df0 <HAL_DMA_Abort_IT+0xd4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d022      	beq.n	8002db8 <HAL_DMA_Abort_IT+0x9c>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1f      	ldr	r2, [pc, #124]	; (8002df4 <HAL_DMA_Abort_IT+0xd8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d01a      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x96>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <HAL_DMA_Abort_IT+0xdc>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d012      	beq.n	8002dac <HAL_DMA_Abort_IT+0x90>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <HAL_DMA_Abort_IT+0xe0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d00a      	beq.n	8002da6 <HAL_DMA_Abort_IT+0x8a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a1a      	ldr	r2, [pc, #104]	; (8002e00 <HAL_DMA_Abort_IT+0xe4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d102      	bne.n	8002da0 <HAL_DMA_Abort_IT+0x84>
 8002d9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d9e:	e00e      	b.n	8002dbe <HAL_DMA_Abort_IT+0xa2>
 8002da0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002da4:	e00b      	b.n	8002dbe <HAL_DMA_Abort_IT+0xa2>
 8002da6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002daa:	e008      	b.n	8002dbe <HAL_DMA_Abort_IT+0xa2>
 8002dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002db0:	e005      	b.n	8002dbe <HAL_DMA_Abort_IT+0xa2>
 8002db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002db6:	e002      	b.n	8002dbe <HAL_DMA_Abort_IT+0xa2>
 8002db8:	2310      	movs	r3, #16
 8002dba:	e000      	b.n	8002dbe <HAL_DMA_Abort_IT+0xa2>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	4a11      	ldr	r2, [pc, #68]	; (8002e04 <HAL_DMA_Abort_IT+0xe8>)
 8002dc0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4798      	blx	r3
    } 
  }
  return status;
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40020008 	.word	0x40020008
 8002df0:	4002001c 	.word	0x4002001c
 8002df4:	40020030 	.word	0x40020030
 8002df8:	40020044 	.word	0x40020044
 8002dfc:	40020058 	.word	0x40020058
 8002e00:	4002006c 	.word	0x4002006c
 8002e04:	40020000 	.word	0x40020000

08002e08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	2204      	movs	r2, #4
 8002e26:	409a      	lsls	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d04f      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0xc8>
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d04a      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d107      	bne.n	8002e58 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0204 	bic.w	r2, r2, #4
 8002e56:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a66      	ldr	r2, [pc, #408]	; (8002ff8 <HAL_DMA_IRQHandler+0x1f0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d029      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0xae>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a65      	ldr	r2, [pc, #404]	; (8002ffc <HAL_DMA_IRQHandler+0x1f4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d022      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xaa>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a63      	ldr	r2, [pc, #396]	; (8003000 <HAL_DMA_IRQHandler+0x1f8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d01a      	beq.n	8002eac <HAL_DMA_IRQHandler+0xa4>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a62      	ldr	r2, [pc, #392]	; (8003004 <HAL_DMA_IRQHandler+0x1fc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d012      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x9e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a60      	ldr	r2, [pc, #384]	; (8003008 <HAL_DMA_IRQHandler+0x200>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00a      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x98>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a5f      	ldr	r2, [pc, #380]	; (800300c <HAL_DMA_IRQHandler+0x204>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d102      	bne.n	8002e9a <HAL_DMA_IRQHandler+0x92>
 8002e94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e98:	e00e      	b.n	8002eb8 <HAL_DMA_IRQHandler+0xb0>
 8002e9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e9e:	e00b      	b.n	8002eb8 <HAL_DMA_IRQHandler+0xb0>
 8002ea0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ea4:	e008      	b.n	8002eb8 <HAL_DMA_IRQHandler+0xb0>
 8002ea6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eaa:	e005      	b.n	8002eb8 <HAL_DMA_IRQHandler+0xb0>
 8002eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eb0:	e002      	b.n	8002eb8 <HAL_DMA_IRQHandler+0xb0>
 8002eb2:	2340      	movs	r3, #64	; 0x40
 8002eb4:	e000      	b.n	8002eb8 <HAL_DMA_IRQHandler+0xb0>
 8002eb6:	2304      	movs	r3, #4
 8002eb8:	4a55      	ldr	r2, [pc, #340]	; (8003010 <HAL_DMA_IRQHandler+0x208>)
 8002eba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 8094 	beq.w	8002fee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ece:	e08e      	b.n	8002fee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d056      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x186>
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d051      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0320 	and.w	r3, r3, #32
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10b      	bne.n	8002f10 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 020a 	bic.w	r2, r2, #10
 8002f06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a38      	ldr	r2, [pc, #224]	; (8002ff8 <HAL_DMA_IRQHandler+0x1f0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d029      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x166>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a37      	ldr	r2, [pc, #220]	; (8002ffc <HAL_DMA_IRQHandler+0x1f4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d022      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x162>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a35      	ldr	r2, [pc, #212]	; (8003000 <HAL_DMA_IRQHandler+0x1f8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d01a      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x15c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a34      	ldr	r2, [pc, #208]	; (8003004 <HAL_DMA_IRQHandler+0x1fc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d012      	beq.n	8002f5e <HAL_DMA_IRQHandler+0x156>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a32      	ldr	r2, [pc, #200]	; (8003008 <HAL_DMA_IRQHandler+0x200>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00a      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x150>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a31      	ldr	r2, [pc, #196]	; (800300c <HAL_DMA_IRQHandler+0x204>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d102      	bne.n	8002f52 <HAL_DMA_IRQHandler+0x14a>
 8002f4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f50:	e00e      	b.n	8002f70 <HAL_DMA_IRQHandler+0x168>
 8002f52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f56:	e00b      	b.n	8002f70 <HAL_DMA_IRQHandler+0x168>
 8002f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f5c:	e008      	b.n	8002f70 <HAL_DMA_IRQHandler+0x168>
 8002f5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f62:	e005      	b.n	8002f70 <HAL_DMA_IRQHandler+0x168>
 8002f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f68:	e002      	b.n	8002f70 <HAL_DMA_IRQHandler+0x168>
 8002f6a:	2320      	movs	r3, #32
 8002f6c:	e000      	b.n	8002f70 <HAL_DMA_IRQHandler+0x168>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	4a27      	ldr	r2, [pc, #156]	; (8003010 <HAL_DMA_IRQHandler+0x208>)
 8002f72:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d034      	beq.n	8002fee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f8c:	e02f      	b.n	8002fee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	2208      	movs	r2, #8
 8002f94:	409a      	lsls	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d028      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x1e8>
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d023      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 020e 	bic.w	r2, r2, #14
 8002fb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d004      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	4798      	blx	r3
    }
  }
  return;
 8002fee:	bf00      	nop
 8002ff0:	bf00      	nop
}
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40020008 	.word	0x40020008
 8002ffc:	4002001c 	.word	0x4002001c
 8003000:	40020030 	.word	0x40020030
 8003004:	40020044 	.word	0x40020044
 8003008:	40020058 	.word	0x40020058
 800300c:	4002006c 	.word	0x4002006c
 8003010:	40020000 	.word	0x40020000

08003014 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302a:	2101      	movs	r1, #1
 800302c:	fa01 f202 	lsl.w	r2, r1, r2
 8003030:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b10      	cmp	r3, #16
 8003040:	d108      	bne.n	8003054 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003052:	e007      	b.n	8003064 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	60da      	str	r2, [r3, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
	...

08003070 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003070:	b480      	push	{r7}
 8003072:	b08b      	sub	sp, #44	; 0x2c
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800307a:	2300      	movs	r3, #0
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800307e:	2300      	movs	r3, #0
 8003080:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003082:	e169      	b.n	8003358 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003084:	2201      	movs	r2, #1
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	429a      	cmp	r2, r3
 800309e:	f040 8158 	bne.w	8003352 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4a9a      	ldr	r2, [pc, #616]	; (8003310 <HAL_GPIO_Init+0x2a0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d05e      	beq.n	800316a <HAL_GPIO_Init+0xfa>
 80030ac:	4a98      	ldr	r2, [pc, #608]	; (8003310 <HAL_GPIO_Init+0x2a0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d875      	bhi.n	800319e <HAL_GPIO_Init+0x12e>
 80030b2:	4a98      	ldr	r2, [pc, #608]	; (8003314 <HAL_GPIO_Init+0x2a4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d058      	beq.n	800316a <HAL_GPIO_Init+0xfa>
 80030b8:	4a96      	ldr	r2, [pc, #600]	; (8003314 <HAL_GPIO_Init+0x2a4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d86f      	bhi.n	800319e <HAL_GPIO_Init+0x12e>
 80030be:	4a96      	ldr	r2, [pc, #600]	; (8003318 <HAL_GPIO_Init+0x2a8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d052      	beq.n	800316a <HAL_GPIO_Init+0xfa>
 80030c4:	4a94      	ldr	r2, [pc, #592]	; (8003318 <HAL_GPIO_Init+0x2a8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d869      	bhi.n	800319e <HAL_GPIO_Init+0x12e>
 80030ca:	4a94      	ldr	r2, [pc, #592]	; (800331c <HAL_GPIO_Init+0x2ac>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d04c      	beq.n	800316a <HAL_GPIO_Init+0xfa>
 80030d0:	4a92      	ldr	r2, [pc, #584]	; (800331c <HAL_GPIO_Init+0x2ac>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d863      	bhi.n	800319e <HAL_GPIO_Init+0x12e>
 80030d6:	4a92      	ldr	r2, [pc, #584]	; (8003320 <HAL_GPIO_Init+0x2b0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d046      	beq.n	800316a <HAL_GPIO_Init+0xfa>
 80030dc:	4a90      	ldr	r2, [pc, #576]	; (8003320 <HAL_GPIO_Init+0x2b0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d85d      	bhi.n	800319e <HAL_GPIO_Init+0x12e>
 80030e2:	2b12      	cmp	r3, #18
 80030e4:	d82a      	bhi.n	800313c <HAL_GPIO_Init+0xcc>
 80030e6:	2b12      	cmp	r3, #18
 80030e8:	d859      	bhi.n	800319e <HAL_GPIO_Init+0x12e>
 80030ea:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <HAL_GPIO_Init+0x80>)
 80030ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f0:	0800316b 	.word	0x0800316b
 80030f4:	08003145 	.word	0x08003145
 80030f8:	08003157 	.word	0x08003157
 80030fc:	08003199 	.word	0x08003199
 8003100:	0800319f 	.word	0x0800319f
 8003104:	0800319f 	.word	0x0800319f
 8003108:	0800319f 	.word	0x0800319f
 800310c:	0800319f 	.word	0x0800319f
 8003110:	0800319f 	.word	0x0800319f
 8003114:	0800319f 	.word	0x0800319f
 8003118:	0800319f 	.word	0x0800319f
 800311c:	0800319f 	.word	0x0800319f
 8003120:	0800319f 	.word	0x0800319f
 8003124:	0800319f 	.word	0x0800319f
 8003128:	0800319f 	.word	0x0800319f
 800312c:	0800319f 	.word	0x0800319f
 8003130:	0800319f 	.word	0x0800319f
 8003134:	0800314d 	.word	0x0800314d
 8003138:	08003161 	.word	0x08003161
 800313c:	4a79      	ldr	r2, [pc, #484]	; (8003324 <HAL_GPIO_Init+0x2b4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003142:	e02c      	b.n	800319e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	623b      	str	r3, [r7, #32]
          break;
 800314a:	e029      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	3304      	adds	r3, #4
 8003152:	623b      	str	r3, [r7, #32]
          break;
 8003154:	e024      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	3308      	adds	r3, #8
 800315c:	623b      	str	r3, [r7, #32]
          break;
 800315e:	e01f      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	330c      	adds	r3, #12
 8003166:	623b      	str	r3, [r7, #32]
          break;
 8003168:	e01a      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d102      	bne.n	8003178 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003172:	2304      	movs	r3, #4
 8003174:	623b      	str	r3, [r7, #32]
          break;
 8003176:	e013      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d105      	bne.n	800318c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003180:	2308      	movs	r3, #8
 8003182:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	611a      	str	r2, [r3, #16]
          break;
 800318a:	e009      	b.n	80031a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800318c:	2308      	movs	r3, #8
 800318e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	615a      	str	r2, [r3, #20]
          break;
 8003196:	e003      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003198:	2300      	movs	r3, #0
 800319a:	623b      	str	r3, [r7, #32]
          break;
 800319c:	e000      	b.n	80031a0 <HAL_GPIO_Init+0x130>
          break;
 800319e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2bff      	cmp	r3, #255	; 0xff
 80031a4:	d801      	bhi.n	80031aa <HAL_GPIO_Init+0x13a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	e001      	b.n	80031ae <HAL_GPIO_Init+0x13e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2bff      	cmp	r3, #255	; 0xff
 80031b4:	d802      	bhi.n	80031bc <HAL_GPIO_Init+0x14c>
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	e002      	b.n	80031c2 <HAL_GPIO_Init+0x152>
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	3b08      	subs	r3, #8
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	210f      	movs	r1, #15
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	fa01 f303 	lsl.w	r3, r1, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	401a      	ands	r2, r3
 80031d4:	6a39      	ldr	r1, [r7, #32]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	fa01 f303 	lsl.w	r3, r1, r3
 80031dc:	431a      	orrs	r2, r3
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 80b1 	beq.w	8003352 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031f0:	4b4d      	ldr	r3, [pc, #308]	; (8003328 <HAL_GPIO_Init+0x2b8>)
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	4a4c      	ldr	r2, [pc, #304]	; (8003328 <HAL_GPIO_Init+0x2b8>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6193      	str	r3, [r2, #24]
 80031fc:	4b4a      	ldr	r3, [pc, #296]	; (8003328 <HAL_GPIO_Init+0x2b8>)
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003208:	4a48      	ldr	r2, [pc, #288]	; (800332c <HAL_GPIO_Init+0x2bc>)
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	089b      	lsrs	r3, r3, #2
 800320e:	3302      	adds	r3, #2
 8003210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003214:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	220f      	movs	r2, #15
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4013      	ands	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a40      	ldr	r2, [pc, #256]	; (8003330 <HAL_GPIO_Init+0x2c0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d013      	beq.n	800325c <HAL_GPIO_Init+0x1ec>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a3f      	ldr	r2, [pc, #252]	; (8003334 <HAL_GPIO_Init+0x2c4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d00d      	beq.n	8003258 <HAL_GPIO_Init+0x1e8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a3e      	ldr	r2, [pc, #248]	; (8003338 <HAL_GPIO_Init+0x2c8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d007      	beq.n	8003254 <HAL_GPIO_Init+0x1e4>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a3d      	ldr	r2, [pc, #244]	; (800333c <HAL_GPIO_Init+0x2cc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d101      	bne.n	8003250 <HAL_GPIO_Init+0x1e0>
 800324c:	2303      	movs	r3, #3
 800324e:	e006      	b.n	800325e <HAL_GPIO_Init+0x1ee>
 8003250:	2304      	movs	r3, #4
 8003252:	e004      	b.n	800325e <HAL_GPIO_Init+0x1ee>
 8003254:	2302      	movs	r3, #2
 8003256:	e002      	b.n	800325e <HAL_GPIO_Init+0x1ee>
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <HAL_GPIO_Init+0x1ee>
 800325c:	2300      	movs	r3, #0
 800325e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003260:	f002 0203 	and.w	r2, r2, #3
 8003264:	0092      	lsls	r2, r2, #2
 8003266:	4093      	lsls	r3, r2
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800326e:	492f      	ldr	r1, [pc, #188]	; (800332c <HAL_GPIO_Init+0x2bc>)
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	089b      	lsrs	r3, r3, #2
 8003274:	3302      	adds	r3, #2
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d006      	beq.n	8003296 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003288:	4b2d      	ldr	r3, [pc, #180]	; (8003340 <HAL_GPIO_Init+0x2d0>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	492c      	ldr	r1, [pc, #176]	; (8003340 <HAL_GPIO_Init+0x2d0>)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	4313      	orrs	r3, r2
 8003292:	600b      	str	r3, [r1, #0]
 8003294:	e006      	b.n	80032a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003296:	4b2a      	ldr	r3, [pc, #168]	; (8003340 <HAL_GPIO_Init+0x2d0>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	43db      	mvns	r3, r3
 800329e:	4928      	ldr	r1, [pc, #160]	; (8003340 <HAL_GPIO_Init+0x2d0>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d006      	beq.n	80032be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032b0:	4b23      	ldr	r3, [pc, #140]	; (8003340 <HAL_GPIO_Init+0x2d0>)
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	4922      	ldr	r1, [pc, #136]	; (8003340 <HAL_GPIO_Init+0x2d0>)
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
 80032bc:	e006      	b.n	80032cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032be:	4b20      	ldr	r3, [pc, #128]	; (8003340 <HAL_GPIO_Init+0x2d0>)
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	491e      	ldr	r1, [pc, #120]	; (8003340 <HAL_GPIO_Init+0x2d0>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d006      	beq.n	80032e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032d8:	4b19      	ldr	r3, [pc, #100]	; (8003340 <HAL_GPIO_Init+0x2d0>)
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	4918      	ldr	r1, [pc, #96]	; (8003340 <HAL_GPIO_Init+0x2d0>)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	608b      	str	r3, [r1, #8]
 80032e4:	e006      	b.n	80032f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032e6:	4b16      	ldr	r3, [pc, #88]	; (8003340 <HAL_GPIO_Init+0x2d0>)
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	4914      	ldr	r1, [pc, #80]	; (8003340 <HAL_GPIO_Init+0x2d0>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d021      	beq.n	8003344 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003300:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <HAL_GPIO_Init+0x2d0>)
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	490e      	ldr	r1, [pc, #56]	; (8003340 <HAL_GPIO_Init+0x2d0>)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	60cb      	str	r3, [r1, #12]
 800330c:	e021      	b.n	8003352 <HAL_GPIO_Init+0x2e2>
 800330e:	bf00      	nop
 8003310:	10320000 	.word	0x10320000
 8003314:	10310000 	.word	0x10310000
 8003318:	10220000 	.word	0x10220000
 800331c:	10210000 	.word	0x10210000
 8003320:	10120000 	.word	0x10120000
 8003324:	10110000 	.word	0x10110000
 8003328:	40021000 	.word	0x40021000
 800332c:	40010000 	.word	0x40010000
 8003330:	40010800 	.word	0x40010800
 8003334:	40010c00 	.word	0x40010c00
 8003338:	40011000 	.word	0x40011000
 800333c:	40011400 	.word	0x40011400
 8003340:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <HAL_GPIO_Init+0x304>)
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	43db      	mvns	r3, r3
 800334c:	4909      	ldr	r1, [pc, #36]	; (8003374 <HAL_GPIO_Init+0x304>)
 800334e:	4013      	ands	r3, r2
 8003350:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	3301      	adds	r3, #1
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	fa22 f303 	lsr.w	r3, r2, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	f47f ae8e 	bne.w	8003084 <HAL_GPIO_Init+0x14>
  }
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	372c      	adds	r7, #44	; 0x2c
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40010400 	.word	0x40010400

08003378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
 8003394:	e001      	b.n	800339a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003396:	2300      	movs	r3, #0
 8003398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800339a:	7bfb      	ldrb	r3, [r7, #15]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr

080033a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	460b      	mov	r3, r1
 80033b0:	807b      	strh	r3, [r7, #2]
 80033b2:	4613      	mov	r3, r2
 80033b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033b6:	787b      	ldrb	r3, [r7, #1]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033bc:	887a      	ldrh	r2, [r7, #2]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033c2:	e003      	b.n	80033cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033c4:	887b      	ldrh	r3, [r7, #2]
 80033c6:	041a      	lsls	r2, r3, #16
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	611a      	str	r2, [r3, #16]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr

080033d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b085      	sub	sp, #20
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	460b      	mov	r3, r1
 80033e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033e8:	887a      	ldrh	r2, [r7, #2]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4013      	ands	r3, r2
 80033ee:	041a      	lsls	r2, r3, #16
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	43d9      	mvns	r1, r3
 80033f4:	887b      	ldrh	r3, [r7, #2]
 80033f6:	400b      	ands	r3, r1
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	611a      	str	r2, [r3, #16]
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e272      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8087 	beq.w	8003536 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003428:	4b92      	ldr	r3, [pc, #584]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b04      	cmp	r3, #4
 8003432:	d00c      	beq.n	800344e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003434:	4b8f      	ldr	r3, [pc, #572]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b08      	cmp	r3, #8
 800343e:	d112      	bne.n	8003466 <HAL_RCC_OscConfig+0x5e>
 8003440:	4b8c      	ldr	r3, [pc, #560]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800344c:	d10b      	bne.n	8003466 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344e:	4b89      	ldr	r3, [pc, #548]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d06c      	beq.n	8003534 <HAL_RCC_OscConfig+0x12c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d168      	bne.n	8003534 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e24c      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346e:	d106      	bne.n	800347e <HAL_RCC_OscConfig+0x76>
 8003470:	4b80      	ldr	r3, [pc, #512]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a7f      	ldr	r2, [pc, #508]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	e02e      	b.n	80034dc <HAL_RCC_OscConfig+0xd4>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x98>
 8003486:	4b7b      	ldr	r3, [pc, #492]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a7a      	ldr	r2, [pc, #488]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 800348c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	4b78      	ldr	r3, [pc, #480]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a77      	ldr	r2, [pc, #476]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	e01d      	b.n	80034dc <HAL_RCC_OscConfig+0xd4>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCC_OscConfig+0xbc>
 80034aa:	4b72      	ldr	r3, [pc, #456]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a71      	ldr	r2, [pc, #452]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	4b6f      	ldr	r3, [pc, #444]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a6e      	ldr	r2, [pc, #440]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	e00b      	b.n	80034dc <HAL_RCC_OscConfig+0xd4>
 80034c4:	4b6b      	ldr	r3, [pc, #428]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a6a      	ldr	r2, [pc, #424]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	4b68      	ldr	r3, [pc, #416]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a67      	ldr	r2, [pc, #412]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d013      	beq.n	800350c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7ff f9ea 	bl	80028bc <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ec:	f7ff f9e6 	bl	80028bc <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e200      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fe:	4b5d      	ldr	r3, [pc, #372]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0xe4>
 800350a:	e014      	b.n	8003536 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7ff f9d6 	bl	80028bc <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003514:	f7ff f9d2 	bl	80028bc <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	; 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e1ec      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003526:	4b53      	ldr	r3, [pc, #332]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x10c>
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d063      	beq.n	800360a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003542:	4b4c      	ldr	r3, [pc, #304]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800354e:	4b49      	ldr	r3, [pc, #292]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b08      	cmp	r3, #8
 8003558:	d11c      	bne.n	8003594 <HAL_RCC_OscConfig+0x18c>
 800355a:	4b46      	ldr	r3, [pc, #280]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d116      	bne.n	8003594 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003566:	4b43      	ldr	r3, [pc, #268]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <HAL_RCC_OscConfig+0x176>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d001      	beq.n	800357e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e1c0      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357e:	4b3d      	ldr	r3, [pc, #244]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4939      	ldr	r1, [pc, #228]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003592:	e03a      	b.n	800360a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d020      	beq.n	80035de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800359c:	4b36      	ldr	r3, [pc, #216]	; (8003678 <HAL_RCC_OscConfig+0x270>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a2:	f7ff f98b 	bl	80028bc <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035aa:	f7ff f987 	bl	80028bc <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e1a1      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035bc:	4b2d      	ldr	r3, [pc, #180]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c8:	4b2a      	ldr	r3, [pc, #168]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4927      	ldr	r1, [pc, #156]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	600b      	str	r3, [r1, #0]
 80035dc:	e015      	b.n	800360a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035de:	4b26      	ldr	r3, [pc, #152]	; (8003678 <HAL_RCC_OscConfig+0x270>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7ff f96a 	bl	80028bc <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ec:	f7ff f966 	bl	80028bc <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e180      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fe:	4b1d      	ldr	r3, [pc, #116]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d03a      	beq.n	800368c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d019      	beq.n	8003652 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361e:	4b17      	ldr	r3, [pc, #92]	; (800367c <HAL_RCC_OscConfig+0x274>)
 8003620:	2201      	movs	r2, #1
 8003622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003624:	f7ff f94a 	bl	80028bc <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800362c:	f7ff f946 	bl	80028bc <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e160      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363e:	4b0d      	ldr	r3, [pc, #52]	; (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800364a:	2001      	movs	r0, #1
 800364c:	f000 fad8 	bl	8003c00 <RCC_Delay>
 8003650:	e01c      	b.n	800368c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <HAL_RCC_OscConfig+0x274>)
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003658:	f7ff f930 	bl	80028bc <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800365e:	e00f      	b.n	8003680 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003660:	f7ff f92c 	bl	80028bc <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d908      	bls.n	8003680 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e146      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
 8003672:	bf00      	nop
 8003674:	40021000 	.word	0x40021000
 8003678:	42420000 	.word	0x42420000
 800367c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003680:	4b92      	ldr	r3, [pc, #584]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e9      	bne.n	8003660 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80a6 	beq.w	80037e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800369a:	2300      	movs	r3, #0
 800369c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800369e:	4b8b      	ldr	r3, [pc, #556]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10d      	bne.n	80036c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036aa:	4b88      	ldr	r3, [pc, #544]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	4a87      	ldr	r2, [pc, #540]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b4:	61d3      	str	r3, [r2, #28]
 80036b6:	4b85      	ldr	r3, [pc, #532]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c2:	2301      	movs	r3, #1
 80036c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c6:	4b82      	ldr	r3, [pc, #520]	; (80038d0 <HAL_RCC_OscConfig+0x4c8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d118      	bne.n	8003704 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d2:	4b7f      	ldr	r3, [pc, #508]	; (80038d0 <HAL_RCC_OscConfig+0x4c8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a7e      	ldr	r2, [pc, #504]	; (80038d0 <HAL_RCC_OscConfig+0x4c8>)
 80036d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036de:	f7ff f8ed 	bl	80028bc <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e6:	f7ff f8e9 	bl	80028bc <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b64      	cmp	r3, #100	; 0x64
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e103      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f8:	4b75      	ldr	r3, [pc, #468]	; (80038d0 <HAL_RCC_OscConfig+0x4c8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d106      	bne.n	800371a <HAL_RCC_OscConfig+0x312>
 800370c:	4b6f      	ldr	r3, [pc, #444]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	4a6e      	ldr	r2, [pc, #440]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6213      	str	r3, [r2, #32]
 8003718:	e02d      	b.n	8003776 <HAL_RCC_OscConfig+0x36e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10c      	bne.n	800373c <HAL_RCC_OscConfig+0x334>
 8003722:	4b6a      	ldr	r3, [pc, #424]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	4a69      	ldr	r2, [pc, #420]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	6213      	str	r3, [r2, #32]
 800372e:	4b67      	ldr	r3, [pc, #412]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	4a66      	ldr	r2, [pc, #408]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003734:	f023 0304 	bic.w	r3, r3, #4
 8003738:	6213      	str	r3, [r2, #32]
 800373a:	e01c      	b.n	8003776 <HAL_RCC_OscConfig+0x36e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	2b05      	cmp	r3, #5
 8003742:	d10c      	bne.n	800375e <HAL_RCC_OscConfig+0x356>
 8003744:	4b61      	ldr	r3, [pc, #388]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	4a60      	ldr	r2, [pc, #384]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 800374a:	f043 0304 	orr.w	r3, r3, #4
 800374e:	6213      	str	r3, [r2, #32]
 8003750:	4b5e      	ldr	r3, [pc, #376]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	4a5d      	ldr	r2, [pc, #372]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	6213      	str	r3, [r2, #32]
 800375c:	e00b      	b.n	8003776 <HAL_RCC_OscConfig+0x36e>
 800375e:	4b5b      	ldr	r3, [pc, #364]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	4a5a      	ldr	r2, [pc, #360]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	6213      	str	r3, [r2, #32]
 800376a:	4b58      	ldr	r3, [pc, #352]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	4a57      	ldr	r2, [pc, #348]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003770:	f023 0304 	bic.w	r3, r3, #4
 8003774:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d015      	beq.n	80037aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377e:	f7ff f89d 	bl	80028bc <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003784:	e00a      	b.n	800379c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003786:	f7ff f899 	bl	80028bc <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	; 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e0b1      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379c:	4b4b      	ldr	r3, [pc, #300]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0ee      	beq.n	8003786 <HAL_RCC_OscConfig+0x37e>
 80037a8:	e014      	b.n	80037d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037aa:	f7ff f887 	bl	80028bc <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b0:	e00a      	b.n	80037c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b2:	f7ff f883 	bl	80028bc <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e09b      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c8:	4b40      	ldr	r3, [pc, #256]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ee      	bne.n	80037b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d105      	bne.n	80037e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037da:	4b3c      	ldr	r3, [pc, #240]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	4a3b      	ldr	r2, [pc, #236]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8087 	beq.w	80038fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f0:	4b36      	ldr	r3, [pc, #216]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d061      	beq.n	80038c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d146      	bne.n	8003892 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003804:	4b33      	ldr	r3, [pc, #204]	; (80038d4 <HAL_RCC_OscConfig+0x4cc>)
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380a:	f7ff f857 	bl	80028bc <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003812:	f7ff f853 	bl	80028bc <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e06d      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003824:	4b29      	ldr	r3, [pc, #164]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f0      	bne.n	8003812 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003838:	d108      	bne.n	800384c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800383a:	4b24      	ldr	r3, [pc, #144]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	4921      	ldr	r1, [pc, #132]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800384c:	4b1f      	ldr	r3, [pc, #124]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a19      	ldr	r1, [r3, #32]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	430b      	orrs	r3, r1
 800385e:	491b      	ldr	r1, [pc, #108]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_RCC_OscConfig+0x4cc>)
 8003866:	2201      	movs	r2, #1
 8003868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386a:	f7ff f827 	bl	80028bc <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003872:	f7ff f823 	bl	80028bc <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e03d      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x46a>
 8003890:	e035      	b.n	80038fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <HAL_RCC_OscConfig+0x4cc>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7ff f810 	bl	80028bc <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a0:	f7ff f80c 	bl	80028bc <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e026      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x498>
 80038be:	e01e      	b.n	80038fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d107      	bne.n	80038d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e019      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40007000 	.word	0x40007000
 80038d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_RCC_OscConfig+0x500>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d106      	bne.n	80038fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d001      	beq.n	80038fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000

0800390c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0d0      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003920:	4b6a      	ldr	r3, [pc, #424]	; (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d910      	bls.n	8003950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b67      	ldr	r3, [pc, #412]	; (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 0207 	bic.w	r2, r3, #7
 8003936:	4965      	ldr	r1, [pc, #404]	; (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b63      	ldr	r3, [pc, #396]	; (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0b8      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d020      	beq.n	800399e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003968:	4b59      	ldr	r3, [pc, #356]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4a58      	ldr	r2, [pc, #352]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003972:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003980:	4b53      	ldr	r3, [pc, #332]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4a52      	ldr	r2, [pc, #328]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003986:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800398a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800398c:	4b50      	ldr	r3, [pc, #320]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	494d      	ldr	r1, [pc, #308]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800399a:	4313      	orrs	r3, r2
 800399c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d040      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	4b47      	ldr	r3, [pc, #284]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d115      	bne.n	80039ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e07f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d107      	bne.n	80039da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ca:	4b41      	ldr	r3, [pc, #260]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e073      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039da:	4b3d      	ldr	r3, [pc, #244]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e06b      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ea:	4b39      	ldr	r3, [pc, #228]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f023 0203 	bic.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4936      	ldr	r1, [pc, #216]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039fc:	f7fe ff5e 	bl	80028bc <HAL_GetTick>
 8003a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a04:	f7fe ff5a 	bl	80028bc <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e053      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	4b2d      	ldr	r3, [pc, #180]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f003 020c 	and.w	r2, r3, #12
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d1eb      	bne.n	8003a04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a2c:	4b27      	ldr	r3, [pc, #156]	; (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d210      	bcs.n	8003a5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4b24      	ldr	r3, [pc, #144]	; (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 0207 	bic.w	r2, r3, #7
 8003a42:	4922      	ldr	r1, [pc, #136]	; (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b20      	ldr	r3, [pc, #128]	; (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e032      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a68:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4916      	ldr	r1, [pc, #88]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d009      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a86:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	490e      	ldr	r1, [pc, #56]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a9a:	f000 f821 	bl	8003ae0 <HAL_RCC_GetSysClockFreq>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	490a      	ldr	r1, [pc, #40]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8003aac:	5ccb      	ldrb	r3, [r1, r3]
 8003aae:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab2:	4a09      	ldr	r2, [pc, #36]	; (8003ad8 <HAL_RCC_ClockConfig+0x1cc>)
 8003ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <HAL_RCC_ClockConfig+0x1d0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe febc 	bl	8002838 <HAL_InitTick>

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40022000 	.word	0x40022000
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	08006570 	.word	0x08006570
 8003ad8:	2000001c 	.word	0x2000001c
 8003adc:	20000020 	.word	0x20000020

08003ae0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae0:	b490      	push	{r4, r7}
 8003ae2:	b08a      	sub	sp, #40	; 0x28
 8003ae4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ae6:	4b29      	ldr	r3, [pc, #164]	; (8003b8c <HAL_RCC_GetSysClockFreq+0xac>)
 8003ae8:	1d3c      	adds	r4, r7, #4
 8003aea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003aec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003af0:	f240 2301 	movw	r3, #513	; 0x201
 8003af4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	2300      	movs	r3, #0
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	2300      	movs	r3, #0
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b0a:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d002      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0x40>
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d003      	beq.n	8003b26 <HAL_RCC_GetSysClockFreq+0x46>
 8003b1e:	e02b      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b20:	4b1c      	ldr	r3, [pc, #112]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b22:	623b      	str	r3, [r7, #32]
      break;
 8003b24:	e02b      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	0c9b      	lsrs	r3, r3, #18
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	3328      	adds	r3, #40	; 0x28
 8003b30:	443b      	add	r3, r7
 8003b32:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b36:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d012      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b42:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	0c5b      	lsrs	r3, r3, #17
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	3328      	adds	r3, #40	; 0x28
 8003b4e:	443b      	add	r3, r7
 8003b50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	4a0e      	ldr	r2, [pc, #56]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b5a:	fb03 f202 	mul.w	r2, r3, r2
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
 8003b66:	e004      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	4a0b      	ldr	r2, [pc, #44]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b6c:	fb02 f303 	mul.w	r3, r2, r3
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	623b      	str	r3, [r7, #32]
      break;
 8003b76:	e002      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b7a:	623b      	str	r3, [r7, #32]
      break;
 8003b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3728      	adds	r7, #40	; 0x28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc90      	pop	{r4, r7}
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	08006560 	.word	0x08006560
 8003b90:	40021000 	.word	0x40021000
 8003b94:	007a1200 	.word	0x007a1200
 8003b98:	003d0900 	.word	0x003d0900

08003b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba0:	4b02      	ldr	r3, [pc, #8]	; (8003bac <HAL_RCC_GetHCLKFreq+0x10>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr
 8003bac:	2000001c 	.word	0x2000001c

08003bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bb4:	f7ff fff2 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	0a1b      	lsrs	r3, r3, #8
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	4903      	ldr	r1, [pc, #12]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc6:	5ccb      	ldrb	r3, [r1, r3]
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	08006580 	.word	0x08006580

08003bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bdc:	f7ff ffde 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	0adb      	lsrs	r3, r3, #11
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4903      	ldr	r1, [pc, #12]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	08006580 	.word	0x08006580

08003c00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <RCC_Delay+0x34>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <RCC_Delay+0x38>)
 8003c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c12:	0a5b      	lsrs	r3, r3, #9
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	fb02 f303 	mul.w	r3, r2, r3
 8003c1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c1c:	bf00      	nop
  }
  while (Delay --);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1e5a      	subs	r2, r3, #1
 8003c22:	60fa      	str	r2, [r7, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1f9      	bne.n	8003c1c <RCC_Delay+0x1c>
}
 8003c28:	bf00      	nop
 8003c2a:	bf00      	nop
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	2000001c 	.word	0x2000001c
 8003c38:	10624dd3 	.word	0x10624dd3

08003c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e041      	b.n	8003cd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fe fbfe 	bl	8002464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3304      	adds	r3, #4
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	f000 faec 	bl	8004258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d001      	beq.n	8003cf4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e032      	b.n	8003d5a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a18      	ldr	r2, [pc, #96]	; (8003d64 <HAL_TIM_Base_Start+0x88>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00e      	beq.n	8003d24 <HAL_TIM_Base_Start+0x48>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0e:	d009      	beq.n	8003d24 <HAL_TIM_Base_Start+0x48>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a14      	ldr	r2, [pc, #80]	; (8003d68 <HAL_TIM_Base_Start+0x8c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d004      	beq.n	8003d24 <HAL_TIM_Base_Start+0x48>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a13      	ldr	r2, [pc, #76]	; (8003d6c <HAL_TIM_Base_Start+0x90>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d111      	bne.n	8003d48 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b06      	cmp	r3, #6
 8003d34:	d010      	beq.n	8003d58 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0201 	orr.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d46:	e007      	b.n	8003d58 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr
 8003d64:	40012c00 	.word	0x40012c00
 8003d68:	40000400 	.word	0x40000400
 8003d6c:	40000800 	.word	0x40000800

08003d70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e041      	b.n	8003e06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fe fb82 	bl	80024a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	4619      	mov	r1, r3
 8003dae:	4610      	mov	r0, r2
 8003db0:	f000 fa52 	bl	8004258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d109      	bne.n	8003e34 <HAL_TIM_PWM_Start+0x24>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	bf14      	ite	ne
 8003e2c:	2301      	movne	r3, #1
 8003e2e:	2300      	moveq	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	e022      	b.n	8003e7a <HAL_TIM_PWM_Start+0x6a>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d109      	bne.n	8003e4e <HAL_TIM_PWM_Start+0x3e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	bf14      	ite	ne
 8003e46:	2301      	movne	r3, #1
 8003e48:	2300      	moveq	r3, #0
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	e015      	b.n	8003e7a <HAL_TIM_PWM_Start+0x6a>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d109      	bne.n	8003e68 <HAL_TIM_PWM_Start+0x58>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	bf14      	ite	ne
 8003e60:	2301      	movne	r3, #1
 8003e62:	2300      	moveq	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	e008      	b.n	8003e7a <HAL_TIM_PWM_Start+0x6a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	bf14      	ite	ne
 8003e74:	2301      	movne	r3, #1
 8003e76:	2300      	moveq	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e05e      	b.n	8003f40 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d104      	bne.n	8003e92 <HAL_TIM_PWM_Start+0x82>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e90:	e013      	b.n	8003eba <HAL_TIM_PWM_Start+0xaa>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d104      	bne.n	8003ea2 <HAL_TIM_PWM_Start+0x92>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ea0:	e00b      	b.n	8003eba <HAL_TIM_PWM_Start+0xaa>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d104      	bne.n	8003eb2 <HAL_TIM_PWM_Start+0xa2>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb0:	e003      	b.n	8003eba <HAL_TIM_PWM_Start+0xaa>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	6839      	ldr	r1, [r7, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fc48 	bl	8004758 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <HAL_TIM_PWM_Start+0x138>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d107      	bne.n	8003ee2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ee0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a18      	ldr	r2, [pc, #96]	; (8003f48 <HAL_TIM_PWM_Start+0x138>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00e      	beq.n	8003f0a <HAL_TIM_PWM_Start+0xfa>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef4:	d009      	beq.n	8003f0a <HAL_TIM_PWM_Start+0xfa>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a14      	ldr	r2, [pc, #80]	; (8003f4c <HAL_TIM_PWM_Start+0x13c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d004      	beq.n	8003f0a <HAL_TIM_PWM_Start+0xfa>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a12      	ldr	r2, [pc, #72]	; (8003f50 <HAL_TIM_PWM_Start+0x140>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d111      	bne.n	8003f2e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b06      	cmp	r3, #6
 8003f1a:	d010      	beq.n	8003f3e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2c:	e007      	b.n	8003f3e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40012c00 	.word	0x40012c00
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40000800 	.word	0x40000800

08003f54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e0ac      	b.n	80040c8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b0c      	cmp	r3, #12
 8003f7a:	f200 809f 	bhi.w	80040bc <HAL_TIM_PWM_ConfigChannel+0x168>
 8003f7e:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f84:	08003fb9 	.word	0x08003fb9
 8003f88:	080040bd 	.word	0x080040bd
 8003f8c:	080040bd 	.word	0x080040bd
 8003f90:	080040bd 	.word	0x080040bd
 8003f94:	08003ff9 	.word	0x08003ff9
 8003f98:	080040bd 	.word	0x080040bd
 8003f9c:	080040bd 	.word	0x080040bd
 8003fa0:	080040bd 	.word	0x080040bd
 8003fa4:	0800403b 	.word	0x0800403b
 8003fa8:	080040bd 	.word	0x080040bd
 8003fac:	080040bd 	.word	0x080040bd
 8003fb0:	080040bd 	.word	0x080040bd
 8003fb4:	0800407b 	.word	0x0800407b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 f9ac 	bl	800431c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699a      	ldr	r2, [r3, #24]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0208 	orr.w	r2, r2, #8
 8003fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0204 	bic.w	r2, r2, #4
 8003fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6999      	ldr	r1, [r3, #24]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	619a      	str	r2, [r3, #24]
      break;
 8003ff6:	e062      	b.n	80040be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 f9f2 	bl	80043e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699a      	ldr	r2, [r3, #24]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6999      	ldr	r1, [r3, #24]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	021a      	lsls	r2, r3, #8
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	619a      	str	r2, [r3, #24]
      break;
 8004038:	e041      	b.n	80040be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68b9      	ldr	r1, [r7, #8]
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fa3b 	bl	80044bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69da      	ldr	r2, [r3, #28]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0208 	orr.w	r2, r2, #8
 8004054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0204 	bic.w	r2, r2, #4
 8004064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69d9      	ldr	r1, [r3, #28]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	61da      	str	r2, [r3, #28]
      break;
 8004078:	e021      	b.n	80040be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fa85 	bl	8004590 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69d9      	ldr	r1, [r3, #28]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	021a      	lsls	r2, r3, #8
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	61da      	str	r2, [r3, #28]
      break;
 80040ba:	e000      	b.n	80040be <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80040bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_TIM_ConfigClockSource+0x18>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e0b3      	b.n	8004250 <HAL_TIM_ConfigClockSource+0x180>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004106:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800410e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004120:	d03e      	beq.n	80041a0 <HAL_TIM_ConfigClockSource+0xd0>
 8004122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004126:	f200 8087 	bhi.w	8004238 <HAL_TIM_ConfigClockSource+0x168>
 800412a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412e:	f000 8085 	beq.w	800423c <HAL_TIM_ConfigClockSource+0x16c>
 8004132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004136:	d87f      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x168>
 8004138:	2b70      	cmp	r3, #112	; 0x70
 800413a:	d01a      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0xa2>
 800413c:	2b70      	cmp	r3, #112	; 0x70
 800413e:	d87b      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x168>
 8004140:	2b60      	cmp	r3, #96	; 0x60
 8004142:	d050      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0x116>
 8004144:	2b60      	cmp	r3, #96	; 0x60
 8004146:	d877      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x168>
 8004148:	2b50      	cmp	r3, #80	; 0x50
 800414a:	d03c      	beq.n	80041c6 <HAL_TIM_ConfigClockSource+0xf6>
 800414c:	2b50      	cmp	r3, #80	; 0x50
 800414e:	d873      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x168>
 8004150:	2b40      	cmp	r3, #64	; 0x40
 8004152:	d058      	beq.n	8004206 <HAL_TIM_ConfigClockSource+0x136>
 8004154:	2b40      	cmp	r3, #64	; 0x40
 8004156:	d86f      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x168>
 8004158:	2b30      	cmp	r3, #48	; 0x30
 800415a:	d064      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x156>
 800415c:	2b30      	cmp	r3, #48	; 0x30
 800415e:	d86b      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x168>
 8004160:	2b20      	cmp	r3, #32
 8004162:	d060      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x156>
 8004164:	2b20      	cmp	r3, #32
 8004166:	d867      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x168>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d05c      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x156>
 800416c:	2b10      	cmp	r3, #16
 800416e:	d05a      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004170:	e062      	b.n	8004238 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	6899      	ldr	r1, [r3, #8]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f000 faca 	bl	800471a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004194:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	609a      	str	r2, [r3, #8]
      break;
 800419e:	e04e      	b.n	800423e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6899      	ldr	r1, [r3, #8]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f000 fab3 	bl	800471a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041c2:	609a      	str	r2, [r3, #8]
      break;
 80041c4:	e03b      	b.n	800423e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	6859      	ldr	r1, [r3, #4]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f000 fa2a 	bl	800462c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2150      	movs	r1, #80	; 0x50
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fa81 	bl	80046e6 <TIM_ITRx_SetConfig>
      break;
 80041e4:	e02b      	b.n	800423e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6859      	ldr	r1, [r3, #4]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	461a      	mov	r2, r3
 80041f4:	f000 fa48 	bl	8004688 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2160      	movs	r1, #96	; 0x60
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fa71 	bl	80046e6 <TIM_ITRx_SetConfig>
      break;
 8004204:	e01b      	b.n	800423e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6859      	ldr	r1, [r3, #4]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	461a      	mov	r2, r3
 8004214:	f000 fa0a 	bl	800462c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2140      	movs	r1, #64	; 0x40
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fa61 	bl	80046e6 <TIM_ITRx_SetConfig>
      break;
 8004224:	e00b      	b.n	800423e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4619      	mov	r1, r3
 8004230:	4610      	mov	r0, r2
 8004232:	f000 fa58 	bl	80046e6 <TIM_ITRx_SetConfig>
        break;
 8004236:	e002      	b.n	800423e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004238:	bf00      	nop
 800423a:	e000      	b.n	800423e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800423c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a29      	ldr	r2, [pc, #164]	; (8004310 <TIM_Base_SetConfig+0xb8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00b      	beq.n	8004288 <TIM_Base_SetConfig+0x30>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004276:	d007      	beq.n	8004288 <TIM_Base_SetConfig+0x30>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a26      	ldr	r2, [pc, #152]	; (8004314 <TIM_Base_SetConfig+0xbc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d003      	beq.n	8004288 <TIM_Base_SetConfig+0x30>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a25      	ldr	r2, [pc, #148]	; (8004318 <TIM_Base_SetConfig+0xc0>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d108      	bne.n	800429a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a1c      	ldr	r2, [pc, #112]	; (8004310 <TIM_Base_SetConfig+0xb8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00b      	beq.n	80042ba <TIM_Base_SetConfig+0x62>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a8:	d007      	beq.n	80042ba <TIM_Base_SetConfig+0x62>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a19      	ldr	r2, [pc, #100]	; (8004314 <TIM_Base_SetConfig+0xbc>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d003      	beq.n	80042ba <TIM_Base_SetConfig+0x62>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a18      	ldr	r2, [pc, #96]	; (8004318 <TIM_Base_SetConfig+0xc0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d108      	bne.n	80042cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a07      	ldr	r2, [pc, #28]	; (8004310 <TIM_Base_SetConfig+0xb8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d103      	bne.n	8004300 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	615a      	str	r2, [r3, #20]
}
 8004306:	bf00      	nop
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr
 8004310:	40012c00 	.word	0x40012c00
 8004314:	40000400 	.word	0x40000400
 8004318:	40000800 	.word	0x40000800

0800431c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	f023 0201 	bic.w	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0303 	bic.w	r3, r3, #3
 8004352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f023 0302 	bic.w	r3, r3, #2
 8004364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	4313      	orrs	r3, r2
 800436e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a1c      	ldr	r2, [pc, #112]	; (80043e4 <TIM_OC1_SetConfig+0xc8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d10c      	bne.n	8004392 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f023 0308 	bic.w	r3, r3, #8
 800437e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f023 0304 	bic.w	r3, r3, #4
 8004390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a13      	ldr	r2, [pc, #76]	; (80043e4 <TIM_OC1_SetConfig+0xc8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d111      	bne.n	80043be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	621a      	str	r2, [r3, #32]
}
 80043d8:	bf00      	nop
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40012c00 	.word	0x40012c00

080043e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	f023 0210 	bic.w	r2, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800441e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f023 0320 	bic.w	r3, r3, #32
 8004432:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a1d      	ldr	r2, [pc, #116]	; (80044b8 <TIM_OC2_SetConfig+0xd0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d10d      	bne.n	8004464 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800444e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004462:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a14      	ldr	r2, [pc, #80]	; (80044b8 <TIM_OC2_SetConfig+0xd0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d113      	bne.n	8004494 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004472:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800447a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	621a      	str	r2, [r3, #32]
}
 80044ae:	bf00      	nop
 80044b0:	371c      	adds	r7, #28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr
 80044b8:	40012c00 	.word	0x40012c00

080044bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0303 	bic.w	r3, r3, #3
 80044f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	021b      	lsls	r3, r3, #8
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a1d      	ldr	r2, [pc, #116]	; (800458c <TIM_OC3_SetConfig+0xd0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d10d      	bne.n	8004536 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004520:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	021b      	lsls	r3, r3, #8
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	4313      	orrs	r3, r2
 800452c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a14      	ldr	r2, [pc, #80]	; (800458c <TIM_OC3_SetConfig+0xd0>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d113      	bne.n	8004566 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800454c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	621a      	str	r2, [r3, #32]
}
 8004580:	bf00      	nop
 8004582:	371c      	adds	r7, #28
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	40012c00 	.word	0x40012c00

08004590 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	031b      	lsls	r3, r3, #12
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a0f      	ldr	r2, [pc, #60]	; (8004628 <TIM_OC4_SetConfig+0x98>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d109      	bne.n	8004604 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	019b      	lsls	r3, r3, #6
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	621a      	str	r2, [r3, #32]
}
 800461e:	bf00      	nop
 8004620:	371c      	adds	r7, #28
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr
 8004628:	40012c00 	.word	0x40012c00

0800462c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f023 0201 	bic.w	r2, r3, #1
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f023 030a 	bic.w	r3, r3, #10
 8004668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr

08004688 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f023 0210 	bic.w	r2, r3, #16
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	031b      	lsls	r3, r3, #12
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	621a      	str	r2, [r3, #32]
}
 80046dc:	bf00      	nop
 80046de:	371c      	adds	r7, #28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr

080046e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	f043 0307 	orr.w	r3, r3, #7
 8004708:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	609a      	str	r2, [r3, #8]
}
 8004710:	bf00      	nop
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800471a:	b480      	push	{r7}
 800471c:	b087      	sub	sp, #28
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
 8004726:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004734:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	021a      	lsls	r2, r3, #8
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	431a      	orrs	r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	4313      	orrs	r3, r2
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	609a      	str	r2, [r3, #8]
}
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr

08004758 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f003 031f 	and.w	r3, r3, #31
 800476a:	2201      	movs	r2, #1
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a1a      	ldr	r2, [r3, #32]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	43db      	mvns	r3, r3
 800477a:	401a      	ands	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a1a      	ldr	r2, [r3, #32]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 031f 	and.w	r3, r3, #31
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	fa01 f303 	lsl.w	r3, r1, r3
 8004790:	431a      	orrs	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	621a      	str	r2, [r3, #32]
}
 8004796:	bf00      	nop
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e046      	b.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a16      	ldr	r2, [pc, #88]	; (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00e      	beq.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004804:	d009      	beq.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a12      	ldr	r2, [pc, #72]	; (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d004      	beq.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a10      	ldr	r2, [pc, #64]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d10c      	bne.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004820:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	4313      	orrs	r3, r2
 800482a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr
 8004850:	40012c00 	.word	0x40012c00
 8004854:	40000400 	.word	0x40000400
 8004858:	40000800 	.word	0x40000800

0800485c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e03f      	b.n	80048ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fd fe5e 	bl	8002544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2224      	movs	r2, #36	; 0x24
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800489e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fd9b 	bl	80053dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695a      	ldr	r2, [r3, #20]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2220      	movs	r2, #32
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b08a      	sub	sp, #40	; 0x28
 80048fa:	af02      	add	r7, sp, #8
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	603b      	str	r3, [r7, #0]
 8004902:	4613      	mov	r3, r2
 8004904:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b20      	cmp	r3, #32
 8004914:	d17c      	bne.n	8004a10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <HAL_UART_Transmit+0x2c>
 800491c:	88fb      	ldrh	r3, [r7, #6]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e075      	b.n	8004a12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_UART_Transmit+0x3e>
 8004930:	2302      	movs	r3, #2
 8004932:	e06e      	b.n	8004a12 <HAL_UART_Transmit+0x11c>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2221      	movs	r2, #33	; 0x21
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800494a:	f7fd ffb7 	bl	80028bc <HAL_GetTick>
 800494e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	88fa      	ldrh	r2, [r7, #6]
 800495a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004964:	d108      	bne.n	8004978 <HAL_UART_Transmit+0x82>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d104      	bne.n	8004978 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800496e:	2300      	movs	r3, #0
 8004970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	e003      	b.n	8004980 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800497c:	2300      	movs	r3, #0
 800497e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004988:	e02a      	b.n	80049e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2200      	movs	r2, #0
 8004992:	2180      	movs	r1, #128	; 0x80
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fb0d 	bl	8004fb4 <UART_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e036      	b.n	8004a12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10b      	bne.n	80049c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	3302      	adds	r3, #2
 80049be:	61bb      	str	r3, [r7, #24]
 80049c0:	e007      	b.n	80049d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	781a      	ldrb	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	3301      	adds	r3, #1
 80049d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1cf      	bne.n	800498a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2200      	movs	r2, #0
 80049f2:	2140      	movs	r1, #64	; 0x40
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 fadd 	bl	8004fb4 <UART_WaitOnFlagUntilTimeout>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e006      	b.n	8004a12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e000      	b.n	8004a12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a10:	2302      	movs	r3, #2
  }
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b086      	sub	sp, #24
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	4613      	mov	r3, r2
 8004a26:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b20      	cmp	r3, #32
 8004a32:	d13c      	bne.n	8004aae <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e035      	b.n	8004ab0 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d101      	bne.n	8004a52 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e02e      	b.n	8004ab0 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004a60:	88fb      	ldrh	r3, [r7, #6]
 8004a62:	461a      	mov	r2, r3
 8004a64:	68b9      	ldr	r1, [r7, #8]
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 faee 	bl	8005048 <UART_Start_Receive_DMA>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004a70:	7dfb      	ldrb	r3, [r7, #23]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d119      	bne.n	8004aaa <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d113      	bne.n	8004aa6 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a7e:	2300      	movs	r3, #0
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	613b      	str	r3, [r7, #16]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0210 	orr.w	r2, r2, #16
 8004aa2:	60da      	str	r2, [r3, #12]
 8004aa4:	e001      	b.n	8004aaa <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8004aaa:	7dfb      	ldrb	r3, [r7, #23]
 8004aac:	e000      	b.n	8004ab0 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8004aae:	2302      	movs	r3, #2
  }
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08a      	sub	sp, #40	; 0x28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10d      	bne.n	8004b0a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_UART_IRQHandler+0x52>
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fbc0 	bl	8005288 <UART_Receive_IT>
      return;
 8004b08:	e17b      	b.n	8004e02 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 80b1 	beq.w	8004c74 <HAL_UART_IRQHandler+0x1bc>
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d105      	bne.n	8004b28 <HAL_UART_IRQHandler+0x70>
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 80a6 	beq.w	8004c74 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_UART_IRQHandler+0x90>
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	f043 0201 	orr.w	r2, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_UART_IRQHandler+0xb0>
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	f043 0202 	orr.w	r2, r3, #2
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <HAL_UART_IRQHandler+0xd0>
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	f043 0204 	orr.w	r2, r3, #4
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00f      	beq.n	8004bb2 <HAL_UART_IRQHandler+0xfa>
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d104      	bne.n	8004ba6 <HAL_UART_IRQHandler+0xee>
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d005      	beq.n	8004bb2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	f043 0208 	orr.w	r2, r3, #8
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 811e 	beq.w	8004df8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d007      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x11e>
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d002      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fb59 	bl	8005288 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bf14      	ite	ne
 8004be4:	2301      	movne	r3, #1
 8004be6:	2300      	moveq	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d102      	bne.n	8004bfe <HAL_UART_IRQHandler+0x146>
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d031      	beq.n	8004c62 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa9b 	bl	800513a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d023      	beq.n	8004c5a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	695a      	ldr	r2, [r3, #20]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c20:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d013      	beq.n	8004c52 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	4a76      	ldr	r2, [pc, #472]	; (8004e08 <HAL_UART_IRQHandler+0x350>)
 8004c30:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe f870 	bl	8002d1c <HAL_DMA_Abort_IT>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d016      	beq.n	8004c70 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c50:	e00e      	b.n	8004c70 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f8f5 	bl	8004e42 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c58:	e00a      	b.n	8004c70 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f8f1 	bl	8004e42 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c60:	e006      	b.n	8004c70 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f8ed 	bl	8004e42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c6e:	e0c3      	b.n	8004df8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c70:	bf00      	nop
    return;
 8004c72:	e0c1      	b.n	8004df8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	f040 80a1 	bne.w	8004dc0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 809b 	beq.w	8004dc0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 8095 	beq.w	8004dc0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d04e      	beq.n	8004d58 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004cc4:	8a3b      	ldrh	r3, [r7, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 8098 	beq.w	8004dfc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cd0:	8a3a      	ldrh	r2, [r7, #16]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	f080 8092 	bcs.w	8004dfc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	8a3a      	ldrh	r2, [r7, #16]
 8004cdc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d02b      	beq.n	8004d40 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cf6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695a      	ldr	r2, [r3, #20]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0201 	bic.w	r2, r2, #1
 8004d06:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695a      	ldr	r2, [r3, #20]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d16:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0210 	bic.w	r2, r2, #16
 8004d34:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fd ffb3 	bl	8002ca6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	4619      	mov	r1, r3
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7fc fc33 	bl	80015bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004d56:	e051      	b.n	8004dfc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d047      	beq.n	8004e00 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004d70:	8a7b      	ldrh	r3, [r7, #18]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d044      	beq.n	8004e00 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d84:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695a      	ldr	r2, [r3, #20]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0201 	bic.w	r2, r2, #1
 8004d94:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0210 	bic.w	r2, r2, #16
 8004db2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004db4:	8a7b      	ldrh	r3, [r7, #18]
 8004db6:	4619      	mov	r1, r3
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7fc fbff 	bl	80015bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004dbe:	e01f      	b.n	8004e00 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d008      	beq.n	8004ddc <HAL_UART_IRQHandler+0x324>
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f9f0 	bl	80051ba <UART_Transmit_IT>
    return;
 8004dda:	e012      	b.n	8004e02 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00d      	beq.n	8004e02 <HAL_UART_IRQHandler+0x34a>
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d008      	beq.n	8004e02 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fa31 	bl	8005258 <UART_EndTransmit_IT>
    return;
 8004df6:	e004      	b.n	8004e02 <HAL_UART_IRQHandler+0x34a>
    return;
 8004df8:	bf00      	nop
 8004dfa:	e002      	b.n	8004e02 <HAL_UART_IRQHandler+0x34a>
      return;
 8004dfc:	bf00      	nop
 8004dfe:	e000      	b.n	8004e02 <HAL_UART_IRQHandler+0x34a>
      return;
 8004e00:	bf00      	nop
  }
}
 8004e02:	3728      	adds	r7, #40	; 0x28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	08005193 	.word	0x08005193

08004e0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr

08004e1e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr

08004e30 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bc80      	pop	{r7}
 8004e40:	4770      	bx	lr

08004e42 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bc80      	pop	{r7}
 8004e52:	4770      	bx	lr

08004e54 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0320 	and.w	r3, r3, #32
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d12a      	bne.n	8004ec6 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e84:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695a      	ldr	r2, [r3, #20]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0201 	bic.w	r2, r2, #1
 8004e94:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695a      	ldr	r2, [r3, #20]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d107      	bne.n	8004ec6 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0210 	bic.w	r2, r2, #16
 8004ec4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d106      	bne.n	8004edc <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f7fc fb71 	bl	80015bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004eda:	e002      	b.n	8004ee2 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff ff9e 	bl	8004e1e <HAL_UART_RxCpltCallback>
}
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d108      	bne.n	8004f12 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f04:	085b      	lsrs	r3, r3, #1
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	4619      	mov	r1, r3
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f7fc fb56 	bl	80015bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f10:	e002      	b.n	8004f18 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f7ff ff8c 	bl	8004e30 <HAL_UART_RxHalfCpltCallback>
}
 8004f18:	bf00      	nop
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bf14      	ite	ne
 8004f40:	2301      	movne	r3, #1
 8004f42:	2300      	moveq	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b21      	cmp	r3, #33	; 0x21
 8004f52:	d108      	bne.n	8004f66 <UART_DMAError+0x46>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004f60:	68b8      	ldr	r0, [r7, #8]
 8004f62:	f000 f8d5 	bl	8005110 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	bf14      	ite	ne
 8004f74:	2301      	movne	r3, #1
 8004f76:	2300      	moveq	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b22      	cmp	r3, #34	; 0x22
 8004f86:	d108      	bne.n	8004f9a <UART_DMAError+0x7a>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d005      	beq.n	8004f9a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2200      	movs	r2, #0
 8004f92:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004f94:	68b8      	ldr	r0, [r7, #8]
 8004f96:	f000 f8d0 	bl	800513a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	f043 0210 	orr.w	r2, r3, #16
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fa6:	68b8      	ldr	r0, [r7, #8]
 8004fa8:	f7ff ff4b 	bl	8004e42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fac:	bf00      	nop
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc4:	e02c      	b.n	8005020 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fcc:	d028      	beq.n	8005020 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d007      	beq.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fd4:	f7fd fc72 	bl	80028bc <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d21d      	bcs.n	8005020 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ff2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695a      	ldr	r2, [r3, #20]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0201 	bic.w	r2, r2, #1
 8005002:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e00f      	b.n	8005040 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	4013      	ands	r3, r2
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	429a      	cmp	r2, r3
 800502e:	bf0c      	ite	eq
 8005030:	2301      	moveq	r3, #1
 8005032:	2300      	movne	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	79fb      	ldrb	r3, [r7, #7]
 800503a:	429a      	cmp	r2, r3
 800503c:	d0c3      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	4613      	mov	r3, r2
 8005054:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	88fa      	ldrh	r2, [r7, #6]
 8005060:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2222      	movs	r2, #34	; 0x22
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	4a23      	ldr	r2, [pc, #140]	; (8005104 <UART_Start_Receive_DMA+0xbc>)
 8005076:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	4a22      	ldr	r2, [pc, #136]	; (8005108 <UART_Start_Receive_DMA+0xc0>)
 800507e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	4a21      	ldr	r2, [pc, #132]	; (800510c <UART_Start_Receive_DMA+0xc4>)
 8005086:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	2200      	movs	r2, #0
 800508e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005090:	f107 0308 	add.w	r3, r7, #8
 8005094:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	f7fd fd9e 	bl	8002be8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80050ac:	2300      	movs	r3, #0
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	613b      	str	r3, [r7, #16]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050d8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695a      	ldr	r2, [r3, #20]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0201 	orr.w	r2, r2, #1
 80050e8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695a      	ldr	r2, [r3, #20]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050f8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3718      	adds	r7, #24
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	08004e55 	.word	0x08004e55
 8005108:	08004eeb 	.word	0x08004eeb
 800510c:	08004f21 	.word	0x08004f21

08005110 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005126:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	bc80      	pop	{r7}
 8005138:	4770      	bx	lr

0800513a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005150:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695a      	ldr	r2, [r3, #20]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0201 	bic.w	r2, r2, #1
 8005160:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	2b01      	cmp	r3, #1
 8005168:	d107      	bne.n	800517a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0210 	bic.w	r2, r2, #16
 8005178:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2220      	movs	r2, #32
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr

08005192 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f7ff fe48 	bl	8004e42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051b2:	bf00      	nop
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b21      	cmp	r3, #33	; 0x21
 80051cc:	d13e      	bne.n	800524c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d6:	d114      	bne.n	8005202 <UART_Transmit_IT+0x48>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d110      	bne.n	8005202 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	461a      	mov	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	1c9a      	adds	r2, r3, #2
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	621a      	str	r2, [r3, #32]
 8005200:	e008      	b.n	8005214 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	1c59      	adds	r1, r3, #1
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6211      	str	r1, [r2, #32]
 800520c:	781a      	ldrb	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29b      	uxth	r3, r3
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	4619      	mov	r1, r3
 8005222:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10f      	bne.n	8005248 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005236:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005246:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e000      	b.n	800524e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800524c:	2302      	movs	r3, #2
  }
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr

08005258 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800526e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff fdc7 	bl	8004e0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b22      	cmp	r3, #34	; 0x22
 800529a:	f040 8099 	bne.w	80053d0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a6:	d117      	bne.n	80052d8 <UART_Receive_IT+0x50>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d113      	bne.n	80052d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d0:	1c9a      	adds	r2, r3, #2
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	629a      	str	r2, [r3, #40]	; 0x28
 80052d6:	e026      	b.n	8005326 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80052de:	2300      	movs	r3, #0
 80052e0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ea:	d007      	beq.n	80052fc <UART_Receive_IT+0x74>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <UART_Receive_IT+0x82>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d106      	bne.n	800530a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	b2da      	uxtb	r2, r3
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	701a      	strb	r2, [r3, #0]
 8005308:	e008      	b.n	800531c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005316:	b2da      	uxtb	r2, r3
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29b      	uxth	r3, r3
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	4619      	mov	r1, r3
 8005334:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005336:	2b00      	cmp	r3, #0
 8005338:	d148      	bne.n	80053cc <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0220 	bic.w	r2, r2, #32
 8005348:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005358:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695a      	ldr	r2, [r3, #20]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	2b01      	cmp	r3, #1
 8005378:	d123      	bne.n	80053c2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0210 	bic.w	r2, r2, #16
 800538e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0310 	and.w	r3, r3, #16
 800539a:	2b10      	cmp	r3, #16
 800539c:	d10a      	bne.n	80053b4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053b8:	4619      	mov	r1, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fc f8fe 	bl	80015bc <HAL_UARTEx_RxEventCallback>
 80053c0:	e002      	b.n	80053c8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff fd2b 	bl	8004e1e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	e002      	b.n	80053d2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e000      	b.n	80053d2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
  }
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005416:	f023 030c 	bic.w	r3, r3, #12
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6812      	ldr	r2, [r2, #0]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	430b      	orrs	r3, r1
 8005422:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a2c      	ldr	r2, [pc, #176]	; (80054f0 <UART_SetConfig+0x114>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d103      	bne.n	800544c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005444:	f7fe fbc8 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	e002      	b.n	8005452 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800544c:	f7fe fbb0 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 8005450:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	009a      	lsls	r2, r3, #2
 800545c:	441a      	add	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	fbb2 f3f3 	udiv	r3, r2, r3
 8005468:	4a22      	ldr	r2, [pc, #136]	; (80054f4 <UART_SetConfig+0x118>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	0119      	lsls	r1, r3, #4
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	009a      	lsls	r2, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	fbb2 f2f3 	udiv	r2, r2, r3
 8005488:	4b1a      	ldr	r3, [pc, #104]	; (80054f4 <UART_SetConfig+0x118>)
 800548a:	fba3 0302 	umull	r0, r3, r3, r2
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	2064      	movs	r0, #100	; 0x64
 8005492:	fb00 f303 	mul.w	r3, r0, r3
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	3332      	adds	r3, #50	; 0x32
 800549c:	4a15      	ldr	r2, [pc, #84]	; (80054f4 <UART_SetConfig+0x118>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054a8:	4419      	add	r1, r3
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	009a      	lsls	r2, r3, #2
 80054b4:	441a      	add	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80054c0:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <UART_SetConfig+0x118>)
 80054c2:	fba3 0302 	umull	r0, r3, r3, r2
 80054c6:	095b      	lsrs	r3, r3, #5
 80054c8:	2064      	movs	r0, #100	; 0x64
 80054ca:	fb00 f303 	mul.w	r3, r0, r3
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	3332      	adds	r3, #50	; 0x32
 80054d4:	4a07      	ldr	r2, [pc, #28]	; (80054f4 <UART_SetConfig+0x118>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	f003 020f 	and.w	r2, r3, #15
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	440a      	add	r2, r1
 80054e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40013800 	.word	0x40013800
 80054f4:	51eb851f 	.word	0x51eb851f

080054f8 <__libc_init_array>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	2600      	movs	r6, #0
 80054fc:	4d0c      	ldr	r5, [pc, #48]	; (8005530 <__libc_init_array+0x38>)
 80054fe:	4c0d      	ldr	r4, [pc, #52]	; (8005534 <__libc_init_array+0x3c>)
 8005500:	1b64      	subs	r4, r4, r5
 8005502:	10a4      	asrs	r4, r4, #2
 8005504:	42a6      	cmp	r6, r4
 8005506:	d109      	bne.n	800551c <__libc_init_array+0x24>
 8005508:	f001 f81c 	bl	8006544 <_init>
 800550c:	2600      	movs	r6, #0
 800550e:	4d0a      	ldr	r5, [pc, #40]	; (8005538 <__libc_init_array+0x40>)
 8005510:	4c0a      	ldr	r4, [pc, #40]	; (800553c <__libc_init_array+0x44>)
 8005512:	1b64      	subs	r4, r4, r5
 8005514:	10a4      	asrs	r4, r4, #2
 8005516:	42a6      	cmp	r6, r4
 8005518:	d105      	bne.n	8005526 <__libc_init_array+0x2e>
 800551a:	bd70      	pop	{r4, r5, r6, pc}
 800551c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005520:	4798      	blx	r3
 8005522:	3601      	adds	r6, #1
 8005524:	e7ee      	b.n	8005504 <__libc_init_array+0xc>
 8005526:	f855 3b04 	ldr.w	r3, [r5], #4
 800552a:	4798      	blx	r3
 800552c:	3601      	adds	r6, #1
 800552e:	e7f2      	b.n	8005516 <__libc_init_array+0x1e>
 8005530:	08006760 	.word	0x08006760
 8005534:	08006760 	.word	0x08006760
 8005538:	08006760 	.word	0x08006760
 800553c:	08006764 	.word	0x08006764

08005540 <memset>:
 8005540:	4603      	mov	r3, r0
 8005542:	4402      	add	r2, r0
 8005544:	4293      	cmp	r3, r2
 8005546:	d100      	bne.n	800554a <memset+0xa>
 8005548:	4770      	bx	lr
 800554a:	f803 1b01 	strb.w	r1, [r3], #1
 800554e:	e7f9      	b.n	8005544 <memset+0x4>

08005550 <cos>:
 8005550:	b530      	push	{r4, r5, lr}
 8005552:	4a20      	ldr	r2, [pc, #128]	; (80055d4 <cos+0x84>)
 8005554:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005558:	4293      	cmp	r3, r2
 800555a:	b087      	sub	sp, #28
 800555c:	dc06      	bgt.n	800556c <cos+0x1c>
 800555e:	2200      	movs	r2, #0
 8005560:	2300      	movs	r3, #0
 8005562:	b007      	add	sp, #28
 8005564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005568:	f000 ba32 	b.w	80059d0 <__kernel_cos>
 800556c:	4a1a      	ldr	r2, [pc, #104]	; (80055d8 <cos+0x88>)
 800556e:	4293      	cmp	r3, r2
 8005570:	dd05      	ble.n	800557e <cos+0x2e>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	f7fa fea3 	bl	80002c0 <__aeabi_dsub>
 800557a:	b007      	add	sp, #28
 800557c:	bd30      	pop	{r4, r5, pc}
 800557e:	aa02      	add	r2, sp, #8
 8005580:	f000 f82e 	bl	80055e0 <__ieee754_rem_pio2>
 8005584:	f000 0003 	and.w	r0, r0, #3
 8005588:	2801      	cmp	r0, #1
 800558a:	d009      	beq.n	80055a0 <cos+0x50>
 800558c:	2802      	cmp	r0, #2
 800558e:	d011      	beq.n	80055b4 <cos+0x64>
 8005590:	b9b8      	cbnz	r0, 80055c2 <cos+0x72>
 8005592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800559a:	f000 fa19 	bl	80059d0 <__kernel_cos>
 800559e:	e7ec      	b.n	800557a <cos+0x2a>
 80055a0:	9000      	str	r0, [sp, #0]
 80055a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055aa:	f000 fe11 	bl	80061d0 <__kernel_sin>
 80055ae:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80055b2:	e7e2      	b.n	800557a <cos+0x2a>
 80055b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055bc:	f000 fa08 	bl	80059d0 <__kernel_cos>
 80055c0:	e7f5      	b.n	80055ae <cos+0x5e>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055ce:	f000 fdff 	bl	80061d0 <__kernel_sin>
 80055d2:	e7d2      	b.n	800557a <cos+0x2a>
 80055d4:	3fe921fb 	.word	0x3fe921fb
 80055d8:	7fefffff 	.word	0x7fefffff
 80055dc:	00000000 	.word	0x00000000

080055e0 <__ieee754_rem_pio2>:
 80055e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e4:	4614      	mov	r4, r2
 80055e6:	4ac4      	ldr	r2, [pc, #784]	; (80058f8 <__ieee754_rem_pio2+0x318>)
 80055e8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80055ec:	b08d      	sub	sp, #52	; 0x34
 80055ee:	4592      	cmp	sl, r2
 80055f0:	9104      	str	r1, [sp, #16]
 80055f2:	dc07      	bgt.n	8005604 <__ieee754_rem_pio2+0x24>
 80055f4:	2200      	movs	r2, #0
 80055f6:	2300      	movs	r3, #0
 80055f8:	e9c4 0100 	strd	r0, r1, [r4]
 80055fc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005600:	2500      	movs	r5, #0
 8005602:	e024      	b.n	800564e <__ieee754_rem_pio2+0x6e>
 8005604:	4abd      	ldr	r2, [pc, #756]	; (80058fc <__ieee754_rem_pio2+0x31c>)
 8005606:	4592      	cmp	sl, r2
 8005608:	dc72      	bgt.n	80056f0 <__ieee754_rem_pio2+0x110>
 800560a:	9b04      	ldr	r3, [sp, #16]
 800560c:	4dbc      	ldr	r5, [pc, #752]	; (8005900 <__ieee754_rem_pio2+0x320>)
 800560e:	2b00      	cmp	r3, #0
 8005610:	a3ab      	add	r3, pc, #684	; (adr r3, 80058c0 <__ieee754_rem_pio2+0x2e0>)
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	dd36      	ble.n	8005686 <__ieee754_rem_pio2+0xa6>
 8005618:	f7fa fe52 	bl	80002c0 <__aeabi_dsub>
 800561c:	45aa      	cmp	sl, r5
 800561e:	4606      	mov	r6, r0
 8005620:	460f      	mov	r7, r1
 8005622:	d018      	beq.n	8005656 <__ieee754_rem_pio2+0x76>
 8005624:	a3a8      	add	r3, pc, #672	; (adr r3, 80058c8 <__ieee754_rem_pio2+0x2e8>)
 8005626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562a:	f7fa fe49 	bl	80002c0 <__aeabi_dsub>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4630      	mov	r0, r6
 8005634:	e9c4 2300 	strd	r2, r3, [r4]
 8005638:	4639      	mov	r1, r7
 800563a:	f7fa fe41 	bl	80002c0 <__aeabi_dsub>
 800563e:	a3a2      	add	r3, pc, #648	; (adr r3, 80058c8 <__ieee754_rem_pio2+0x2e8>)
 8005640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005644:	f7fa fe3c 	bl	80002c0 <__aeabi_dsub>
 8005648:	2501      	movs	r5, #1
 800564a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800564e:	4628      	mov	r0, r5
 8005650:	b00d      	add	sp, #52	; 0x34
 8005652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005656:	a39e      	add	r3, pc, #632	; (adr r3, 80058d0 <__ieee754_rem_pio2+0x2f0>)
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	f7fa fe30 	bl	80002c0 <__aeabi_dsub>
 8005660:	a39d      	add	r3, pc, #628	; (adr r3, 80058d8 <__ieee754_rem_pio2+0x2f8>)
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	4606      	mov	r6, r0
 8005668:	460f      	mov	r7, r1
 800566a:	f7fa fe29 	bl	80002c0 <__aeabi_dsub>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	4630      	mov	r0, r6
 8005674:	e9c4 2300 	strd	r2, r3, [r4]
 8005678:	4639      	mov	r1, r7
 800567a:	f7fa fe21 	bl	80002c0 <__aeabi_dsub>
 800567e:	a396      	add	r3, pc, #600	; (adr r3, 80058d8 <__ieee754_rem_pio2+0x2f8>)
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	e7de      	b.n	8005644 <__ieee754_rem_pio2+0x64>
 8005686:	f7fa fe1d 	bl	80002c4 <__adddf3>
 800568a:	45aa      	cmp	sl, r5
 800568c:	4606      	mov	r6, r0
 800568e:	460f      	mov	r7, r1
 8005690:	d016      	beq.n	80056c0 <__ieee754_rem_pio2+0xe0>
 8005692:	a38d      	add	r3, pc, #564	; (adr r3, 80058c8 <__ieee754_rem_pio2+0x2e8>)
 8005694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005698:	f7fa fe14 	bl	80002c4 <__adddf3>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4630      	mov	r0, r6
 80056a2:	e9c4 2300 	strd	r2, r3, [r4]
 80056a6:	4639      	mov	r1, r7
 80056a8:	f7fa fe0a 	bl	80002c0 <__aeabi_dsub>
 80056ac:	a386      	add	r3, pc, #536	; (adr r3, 80058c8 <__ieee754_rem_pio2+0x2e8>)
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	f7fa fe07 	bl	80002c4 <__adddf3>
 80056b6:	f04f 35ff 	mov.w	r5, #4294967295
 80056ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80056be:	e7c6      	b.n	800564e <__ieee754_rem_pio2+0x6e>
 80056c0:	a383      	add	r3, pc, #524	; (adr r3, 80058d0 <__ieee754_rem_pio2+0x2f0>)
 80056c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c6:	f7fa fdfd 	bl	80002c4 <__adddf3>
 80056ca:	a383      	add	r3, pc, #524	; (adr r3, 80058d8 <__ieee754_rem_pio2+0x2f8>)
 80056cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d0:	4606      	mov	r6, r0
 80056d2:	460f      	mov	r7, r1
 80056d4:	f7fa fdf6 	bl	80002c4 <__adddf3>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4630      	mov	r0, r6
 80056de:	e9c4 2300 	strd	r2, r3, [r4]
 80056e2:	4639      	mov	r1, r7
 80056e4:	f7fa fdec 	bl	80002c0 <__aeabi_dsub>
 80056e8:	a37b      	add	r3, pc, #492	; (adr r3, 80058d8 <__ieee754_rem_pio2+0x2f8>)
 80056ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ee:	e7e0      	b.n	80056b2 <__ieee754_rem_pio2+0xd2>
 80056f0:	4a84      	ldr	r2, [pc, #528]	; (8005904 <__ieee754_rem_pio2+0x324>)
 80056f2:	4592      	cmp	sl, r2
 80056f4:	f300 80d5 	bgt.w	80058a2 <__ieee754_rem_pio2+0x2c2>
 80056f8:	f000 fe20 	bl	800633c <fabs>
 80056fc:	a378      	add	r3, pc, #480	; (adr r3, 80058e0 <__ieee754_rem_pio2+0x300>)
 80056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005702:	4606      	mov	r6, r0
 8005704:	460f      	mov	r7, r1
 8005706:	f7fa ff93 	bl	8000630 <__aeabi_dmul>
 800570a:	2200      	movs	r2, #0
 800570c:	4b7e      	ldr	r3, [pc, #504]	; (8005908 <__ieee754_rem_pio2+0x328>)
 800570e:	f7fa fdd9 	bl	80002c4 <__adddf3>
 8005712:	f7fb fa27 	bl	8000b64 <__aeabi_d2iz>
 8005716:	4605      	mov	r5, r0
 8005718:	f7fa ff20 	bl	800055c <__aeabi_i2d>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005724:	a366      	add	r3, pc, #408	; (adr r3, 80058c0 <__ieee754_rem_pio2+0x2e0>)
 8005726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572a:	f7fa ff81 	bl	8000630 <__aeabi_dmul>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4630      	mov	r0, r6
 8005734:	4639      	mov	r1, r7
 8005736:	f7fa fdc3 	bl	80002c0 <__aeabi_dsub>
 800573a:	a363      	add	r3, pc, #396	; (adr r3, 80058c8 <__ieee754_rem_pio2+0x2e8>)
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	4680      	mov	r8, r0
 8005742:	4689      	mov	r9, r1
 8005744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005748:	f7fa ff72 	bl	8000630 <__aeabi_dmul>
 800574c:	2d1f      	cmp	r5, #31
 800574e:	4606      	mov	r6, r0
 8005750:	460f      	mov	r7, r1
 8005752:	dc0e      	bgt.n	8005772 <__ieee754_rem_pio2+0x192>
 8005754:	4b6d      	ldr	r3, [pc, #436]	; (800590c <__ieee754_rem_pio2+0x32c>)
 8005756:	1e6a      	subs	r2, r5, #1
 8005758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800575c:	4553      	cmp	r3, sl
 800575e:	d008      	beq.n	8005772 <__ieee754_rem_pio2+0x192>
 8005760:	4632      	mov	r2, r6
 8005762:	463b      	mov	r3, r7
 8005764:	4640      	mov	r0, r8
 8005766:	4649      	mov	r1, r9
 8005768:	f7fa fdaa 	bl	80002c0 <__aeabi_dsub>
 800576c:	e9c4 0100 	strd	r0, r1, [r4]
 8005770:	e013      	b.n	800579a <__ieee754_rem_pio2+0x1ba>
 8005772:	463b      	mov	r3, r7
 8005774:	4632      	mov	r2, r6
 8005776:	4640      	mov	r0, r8
 8005778:	4649      	mov	r1, r9
 800577a:	f7fa fda1 	bl	80002c0 <__aeabi_dsub>
 800577e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8005782:	9305      	str	r3, [sp, #20]
 8005784:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005788:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800578c:	f1ba 0f10 	cmp.w	sl, #16
 8005790:	dc1f      	bgt.n	80057d2 <__ieee754_rem_pio2+0x1f2>
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	e9c4 2300 	strd	r2, r3, [r4]
 800579a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800579e:	4640      	mov	r0, r8
 80057a0:	4653      	mov	r3, sl
 80057a2:	4649      	mov	r1, r9
 80057a4:	f7fa fd8c 	bl	80002c0 <__aeabi_dsub>
 80057a8:	4632      	mov	r2, r6
 80057aa:	463b      	mov	r3, r7
 80057ac:	f7fa fd88 	bl	80002c0 <__aeabi_dsub>
 80057b0:	460b      	mov	r3, r1
 80057b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80057b6:	9904      	ldr	r1, [sp, #16]
 80057b8:	4602      	mov	r2, r0
 80057ba:	2900      	cmp	r1, #0
 80057bc:	f6bf af47 	bge.w	800564e <__ieee754_rem_pio2+0x6e>
 80057c0:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80057c4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80057c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80057cc:	60e3      	str	r3, [r4, #12]
 80057ce:	426d      	negs	r5, r5
 80057d0:	e73d      	b.n	800564e <__ieee754_rem_pio2+0x6e>
 80057d2:	a33f      	add	r3, pc, #252	; (adr r3, 80058d0 <__ieee754_rem_pio2+0x2f0>)
 80057d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057dc:	f7fa ff28 	bl	8000630 <__aeabi_dmul>
 80057e0:	4606      	mov	r6, r0
 80057e2:	460f      	mov	r7, r1
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	4640      	mov	r0, r8
 80057ea:	4649      	mov	r1, r9
 80057ec:	f7fa fd68 	bl	80002c0 <__aeabi_dsub>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4682      	mov	sl, r0
 80057f6:	468b      	mov	fp, r1
 80057f8:	4640      	mov	r0, r8
 80057fa:	4649      	mov	r1, r9
 80057fc:	f7fa fd60 	bl	80002c0 <__aeabi_dsub>
 8005800:	4632      	mov	r2, r6
 8005802:	463b      	mov	r3, r7
 8005804:	f7fa fd5c 	bl	80002c0 <__aeabi_dsub>
 8005808:	a333      	add	r3, pc, #204	; (adr r3, 80058d8 <__ieee754_rem_pio2+0x2f8>)
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	4606      	mov	r6, r0
 8005810:	460f      	mov	r7, r1
 8005812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005816:	f7fa ff0b 	bl	8000630 <__aeabi_dmul>
 800581a:	4632      	mov	r2, r6
 800581c:	463b      	mov	r3, r7
 800581e:	f7fa fd4f 	bl	80002c0 <__aeabi_dsub>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4606      	mov	r6, r0
 8005828:	460f      	mov	r7, r1
 800582a:	4650      	mov	r0, sl
 800582c:	4659      	mov	r1, fp
 800582e:	f7fa fd47 	bl	80002c0 <__aeabi_dsub>
 8005832:	9a05      	ldr	r2, [sp, #20]
 8005834:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b31      	cmp	r3, #49	; 0x31
 800583c:	dc06      	bgt.n	800584c <__ieee754_rem_pio2+0x26c>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	46d0      	mov	r8, sl
 8005844:	46d9      	mov	r9, fp
 8005846:	e9c4 2300 	strd	r2, r3, [r4]
 800584a:	e7a6      	b.n	800579a <__ieee754_rem_pio2+0x1ba>
 800584c:	a326      	add	r3, pc, #152	; (adr r3, 80058e8 <__ieee754_rem_pio2+0x308>)
 800584e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005852:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005856:	f7fa feeb 	bl	8000630 <__aeabi_dmul>
 800585a:	4606      	mov	r6, r0
 800585c:	460f      	mov	r7, r1
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4650      	mov	r0, sl
 8005864:	4659      	mov	r1, fp
 8005866:	f7fa fd2b 	bl	80002c0 <__aeabi_dsub>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	4680      	mov	r8, r0
 8005870:	4689      	mov	r9, r1
 8005872:	4650      	mov	r0, sl
 8005874:	4659      	mov	r1, fp
 8005876:	f7fa fd23 	bl	80002c0 <__aeabi_dsub>
 800587a:	4632      	mov	r2, r6
 800587c:	463b      	mov	r3, r7
 800587e:	f7fa fd1f 	bl	80002c0 <__aeabi_dsub>
 8005882:	a31b      	add	r3, pc, #108	; (adr r3, 80058f0 <__ieee754_rem_pio2+0x310>)
 8005884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005888:	4606      	mov	r6, r0
 800588a:	460f      	mov	r7, r1
 800588c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005890:	f7fa fece 	bl	8000630 <__aeabi_dmul>
 8005894:	4632      	mov	r2, r6
 8005896:	463b      	mov	r3, r7
 8005898:	f7fa fd12 	bl	80002c0 <__aeabi_dsub>
 800589c:	4606      	mov	r6, r0
 800589e:	460f      	mov	r7, r1
 80058a0:	e75e      	b.n	8005760 <__ieee754_rem_pio2+0x180>
 80058a2:	4a1b      	ldr	r2, [pc, #108]	; (8005910 <__ieee754_rem_pio2+0x330>)
 80058a4:	4592      	cmp	sl, r2
 80058a6:	dd35      	ble.n	8005914 <__ieee754_rem_pio2+0x334>
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	f7fa fd08 	bl	80002c0 <__aeabi_dsub>
 80058b0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80058b4:	e9c4 0100 	strd	r0, r1, [r4]
 80058b8:	e6a2      	b.n	8005600 <__ieee754_rem_pio2+0x20>
 80058ba:	bf00      	nop
 80058bc:	f3af 8000 	nop.w
 80058c0:	54400000 	.word	0x54400000
 80058c4:	3ff921fb 	.word	0x3ff921fb
 80058c8:	1a626331 	.word	0x1a626331
 80058cc:	3dd0b461 	.word	0x3dd0b461
 80058d0:	1a600000 	.word	0x1a600000
 80058d4:	3dd0b461 	.word	0x3dd0b461
 80058d8:	2e037073 	.word	0x2e037073
 80058dc:	3ba3198a 	.word	0x3ba3198a
 80058e0:	6dc9c883 	.word	0x6dc9c883
 80058e4:	3fe45f30 	.word	0x3fe45f30
 80058e8:	2e000000 	.word	0x2e000000
 80058ec:	3ba3198a 	.word	0x3ba3198a
 80058f0:	252049c1 	.word	0x252049c1
 80058f4:	397b839a 	.word	0x397b839a
 80058f8:	3fe921fb 	.word	0x3fe921fb
 80058fc:	4002d97b 	.word	0x4002d97b
 8005900:	3ff921fb 	.word	0x3ff921fb
 8005904:	413921fb 	.word	0x413921fb
 8005908:	3fe00000 	.word	0x3fe00000
 800590c:	08006588 	.word	0x08006588
 8005910:	7fefffff 	.word	0x7fefffff
 8005914:	ea4f 552a 	mov.w	r5, sl, asr #20
 8005918:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800591c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8005920:	460f      	mov	r7, r1
 8005922:	4606      	mov	r6, r0
 8005924:	f7fb f91e 	bl	8000b64 <__aeabi_d2iz>
 8005928:	f7fa fe18 	bl	800055c <__aeabi_i2d>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4630      	mov	r0, r6
 8005932:	4639      	mov	r1, r7
 8005934:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005938:	f7fa fcc2 	bl	80002c0 <__aeabi_dsub>
 800593c:	2200      	movs	r2, #0
 800593e:	4b22      	ldr	r3, [pc, #136]	; (80059c8 <__ieee754_rem_pio2+0x3e8>)
 8005940:	f7fa fe76 	bl	8000630 <__aeabi_dmul>
 8005944:	460f      	mov	r7, r1
 8005946:	4606      	mov	r6, r0
 8005948:	f7fb f90c 	bl	8000b64 <__aeabi_d2iz>
 800594c:	f7fa fe06 	bl	800055c <__aeabi_i2d>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	4630      	mov	r0, r6
 8005956:	4639      	mov	r1, r7
 8005958:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800595c:	f7fa fcb0 	bl	80002c0 <__aeabi_dsub>
 8005960:	2200      	movs	r2, #0
 8005962:	4b19      	ldr	r3, [pc, #100]	; (80059c8 <__ieee754_rem_pio2+0x3e8>)
 8005964:	f7fa fe64 	bl	8000630 <__aeabi_dmul>
 8005968:	f04f 0803 	mov.w	r8, #3
 800596c:	2600      	movs	r6, #0
 800596e:	2700      	movs	r7, #0
 8005970:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005974:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8005978:	4632      	mov	r2, r6
 800597a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800597e:	463b      	mov	r3, r7
 8005980:	46c2      	mov	sl, r8
 8005982:	f108 38ff 	add.w	r8, r8, #4294967295
 8005986:	f7fb f8bb 	bl	8000b00 <__aeabi_dcmpeq>
 800598a:	2800      	cmp	r0, #0
 800598c:	d1f4      	bne.n	8005978 <__ieee754_rem_pio2+0x398>
 800598e:	4b0f      	ldr	r3, [pc, #60]	; (80059cc <__ieee754_rem_pio2+0x3ec>)
 8005990:	462a      	mov	r2, r5
 8005992:	9301      	str	r3, [sp, #4]
 8005994:	2302      	movs	r3, #2
 8005996:	4621      	mov	r1, r4
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	a806      	add	r0, sp, #24
 800599c:	4653      	mov	r3, sl
 800599e:	f000 f8d5 	bl	8005b4c <__kernel_rem_pio2>
 80059a2:	9b04      	ldr	r3, [sp, #16]
 80059a4:	4605      	mov	r5, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f6bf ae51 	bge.w	800564e <__ieee754_rem_pio2+0x6e>
 80059ac:	e9d4 2100 	ldrd	r2, r1, [r4]
 80059b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059b4:	e9c4 2300 	strd	r2, r3, [r4]
 80059b8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80059bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059c0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80059c4:	e703      	b.n	80057ce <__ieee754_rem_pio2+0x1ee>
 80059c6:	bf00      	nop
 80059c8:	41700000 	.word	0x41700000
 80059cc:	08006608 	.word	0x08006608

080059d0 <__kernel_cos>:
 80059d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80059d8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80059dc:	4680      	mov	r8, r0
 80059de:	460f      	mov	r7, r1
 80059e0:	e9cd 2300 	strd	r2, r3, [sp]
 80059e4:	da04      	bge.n	80059f0 <__kernel_cos+0x20>
 80059e6:	f7fb f8bd 	bl	8000b64 <__aeabi_d2iz>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	f000 8086 	beq.w	8005afc <__kernel_cos+0x12c>
 80059f0:	4642      	mov	r2, r8
 80059f2:	463b      	mov	r3, r7
 80059f4:	4640      	mov	r0, r8
 80059f6:	4639      	mov	r1, r7
 80059f8:	f7fa fe1a 	bl	8000630 <__aeabi_dmul>
 80059fc:	2200      	movs	r2, #0
 80059fe:	4b4e      	ldr	r3, [pc, #312]	; (8005b38 <__kernel_cos+0x168>)
 8005a00:	4604      	mov	r4, r0
 8005a02:	460d      	mov	r5, r1
 8005a04:	f7fa fe14 	bl	8000630 <__aeabi_dmul>
 8005a08:	a33f      	add	r3, pc, #252	; (adr r3, 8005b08 <__kernel_cos+0x138>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	4682      	mov	sl, r0
 8005a10:	468b      	mov	fp, r1
 8005a12:	4620      	mov	r0, r4
 8005a14:	4629      	mov	r1, r5
 8005a16:	f7fa fe0b 	bl	8000630 <__aeabi_dmul>
 8005a1a:	a33d      	add	r3, pc, #244	; (adr r3, 8005b10 <__kernel_cos+0x140>)
 8005a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a20:	f7fa fc50 	bl	80002c4 <__adddf3>
 8005a24:	4622      	mov	r2, r4
 8005a26:	462b      	mov	r3, r5
 8005a28:	f7fa fe02 	bl	8000630 <__aeabi_dmul>
 8005a2c:	a33a      	add	r3, pc, #232	; (adr r3, 8005b18 <__kernel_cos+0x148>)
 8005a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a32:	f7fa fc45 	bl	80002c0 <__aeabi_dsub>
 8005a36:	4622      	mov	r2, r4
 8005a38:	462b      	mov	r3, r5
 8005a3a:	f7fa fdf9 	bl	8000630 <__aeabi_dmul>
 8005a3e:	a338      	add	r3, pc, #224	; (adr r3, 8005b20 <__kernel_cos+0x150>)
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	f7fa fc3e 	bl	80002c4 <__adddf3>
 8005a48:	4622      	mov	r2, r4
 8005a4a:	462b      	mov	r3, r5
 8005a4c:	f7fa fdf0 	bl	8000630 <__aeabi_dmul>
 8005a50:	a335      	add	r3, pc, #212	; (adr r3, 8005b28 <__kernel_cos+0x158>)
 8005a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a56:	f7fa fc33 	bl	80002c0 <__aeabi_dsub>
 8005a5a:	4622      	mov	r2, r4
 8005a5c:	462b      	mov	r3, r5
 8005a5e:	f7fa fde7 	bl	8000630 <__aeabi_dmul>
 8005a62:	a333      	add	r3, pc, #204	; (adr r3, 8005b30 <__kernel_cos+0x160>)
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	f7fa fc2c 	bl	80002c4 <__adddf3>
 8005a6c:	4622      	mov	r2, r4
 8005a6e:	462b      	mov	r3, r5
 8005a70:	f7fa fdde 	bl	8000630 <__aeabi_dmul>
 8005a74:	4622      	mov	r2, r4
 8005a76:	462b      	mov	r3, r5
 8005a78:	f7fa fdda 	bl	8000630 <__aeabi_dmul>
 8005a7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a80:	4604      	mov	r4, r0
 8005a82:	460d      	mov	r5, r1
 8005a84:	4640      	mov	r0, r8
 8005a86:	4639      	mov	r1, r7
 8005a88:	f7fa fdd2 	bl	8000630 <__aeabi_dmul>
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4602      	mov	r2, r0
 8005a90:	4629      	mov	r1, r5
 8005a92:	4620      	mov	r0, r4
 8005a94:	f7fa fc14 	bl	80002c0 <__aeabi_dsub>
 8005a98:	4b28      	ldr	r3, [pc, #160]	; (8005b3c <__kernel_cos+0x16c>)
 8005a9a:	4680      	mov	r8, r0
 8005a9c:	429e      	cmp	r6, r3
 8005a9e:	4689      	mov	r9, r1
 8005aa0:	dc0e      	bgt.n	8005ac0 <__kernel_cos+0xf0>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	4650      	mov	r0, sl
 8005aa8:	4659      	mov	r1, fp
 8005aaa:	f7fa fc09 	bl	80002c0 <__aeabi_dsub>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4922      	ldr	r1, [pc, #136]	; (8005b40 <__kernel_cos+0x170>)
 8005ab6:	f7fa fc03 	bl	80002c0 <__aeabi_dsub>
 8005aba:	b003      	add	sp, #12
 8005abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac0:	2400      	movs	r4, #0
 8005ac2:	4b20      	ldr	r3, [pc, #128]	; (8005b44 <__kernel_cos+0x174>)
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	429e      	cmp	r6, r3
 8005ac8:	bfcc      	ite	gt
 8005aca:	4d1f      	ldrgt	r5, [pc, #124]	; (8005b48 <__kernel_cos+0x178>)
 8005acc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8005ad0:	462b      	mov	r3, r5
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	491a      	ldr	r1, [pc, #104]	; (8005b40 <__kernel_cos+0x170>)
 8005ad6:	f7fa fbf3 	bl	80002c0 <__aeabi_dsub>
 8005ada:	4622      	mov	r2, r4
 8005adc:	4606      	mov	r6, r0
 8005ade:	460f      	mov	r7, r1
 8005ae0:	462b      	mov	r3, r5
 8005ae2:	4650      	mov	r0, sl
 8005ae4:	4659      	mov	r1, fp
 8005ae6:	f7fa fbeb 	bl	80002c0 <__aeabi_dsub>
 8005aea:	4642      	mov	r2, r8
 8005aec:	464b      	mov	r3, r9
 8005aee:	f7fa fbe7 	bl	80002c0 <__aeabi_dsub>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	4630      	mov	r0, r6
 8005af8:	4639      	mov	r1, r7
 8005afa:	e7dc      	b.n	8005ab6 <__kernel_cos+0xe6>
 8005afc:	2000      	movs	r0, #0
 8005afe:	4910      	ldr	r1, [pc, #64]	; (8005b40 <__kernel_cos+0x170>)
 8005b00:	e7db      	b.n	8005aba <__kernel_cos+0xea>
 8005b02:	bf00      	nop
 8005b04:	f3af 8000 	nop.w
 8005b08:	be8838d4 	.word	0xbe8838d4
 8005b0c:	bda8fae9 	.word	0xbda8fae9
 8005b10:	bdb4b1c4 	.word	0xbdb4b1c4
 8005b14:	3e21ee9e 	.word	0x3e21ee9e
 8005b18:	809c52ad 	.word	0x809c52ad
 8005b1c:	3e927e4f 	.word	0x3e927e4f
 8005b20:	19cb1590 	.word	0x19cb1590
 8005b24:	3efa01a0 	.word	0x3efa01a0
 8005b28:	16c15177 	.word	0x16c15177
 8005b2c:	3f56c16c 	.word	0x3f56c16c
 8005b30:	5555554c 	.word	0x5555554c
 8005b34:	3fa55555 	.word	0x3fa55555
 8005b38:	3fe00000 	.word	0x3fe00000
 8005b3c:	3fd33332 	.word	0x3fd33332
 8005b40:	3ff00000 	.word	0x3ff00000
 8005b44:	3fe90000 	.word	0x3fe90000
 8005b48:	3fd20000 	.word	0x3fd20000

08005b4c <__kernel_rem_pio2>:
 8005b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b50:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005b54:	9308      	str	r3, [sp, #32]
 8005b56:	9106      	str	r1, [sp, #24]
 8005b58:	4bb6      	ldr	r3, [pc, #728]	; (8005e34 <__kernel_rem_pio2+0x2e8>)
 8005b5a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8005b5c:	f112 0f14 	cmn.w	r2, #20
 8005b60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005b64:	bfa8      	it	ge
 8005b66:	1ed4      	subge	r4, r2, #3
 8005b68:	9302      	str	r3, [sp, #8]
 8005b6a:	9b08      	ldr	r3, [sp, #32]
 8005b6c:	bfb8      	it	lt
 8005b6e:	2400      	movlt	r4, #0
 8005b70:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b74:	9307      	str	r3, [sp, #28]
 8005b76:	bfa4      	itt	ge
 8005b78:	2318      	movge	r3, #24
 8005b7a:	fb94 f4f3 	sdivge	r4, r4, r3
 8005b7e:	f06f 0317 	mvn.w	r3, #23
 8005b82:	fb04 3303 	mla	r3, r4, r3, r3
 8005b86:	eb03 0b02 	add.w	fp, r3, r2
 8005b8a:	9a07      	ldr	r2, [sp, #28]
 8005b8c:	9b02      	ldr	r3, [sp, #8]
 8005b8e:	1aa7      	subs	r7, r4, r2
 8005b90:	eb03 0802 	add.w	r8, r3, r2
 8005b94:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005b96:	2500      	movs	r5, #0
 8005b98:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	9009      	str	r0, [sp, #36]	; 0x24
 8005ba2:	ae20      	add	r6, sp, #128	; 0x80
 8005ba4:	4545      	cmp	r5, r8
 8005ba6:	dd14      	ble.n	8005bd2 <__kernel_rem_pio2+0x86>
 8005ba8:	f04f 0800 	mov.w	r8, #0
 8005bac:	9a08      	ldr	r2, [sp, #32]
 8005bae:	ab20      	add	r3, sp, #128	; 0x80
 8005bb0:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8005bb4:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8005bb8:	9b02      	ldr	r3, [sp, #8]
 8005bba:	4598      	cmp	r8, r3
 8005bbc:	dc35      	bgt.n	8005c2a <__kernel_rem_pio2+0xde>
 8005bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f1a3 0908 	sub.w	r9, r3, #8
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	462f      	mov	r7, r5
 8005bca:	2600      	movs	r6, #0
 8005bcc:	e9cd 2300 	strd	r2, r3, [sp]
 8005bd0:	e01f      	b.n	8005c12 <__kernel_rem_pio2+0xc6>
 8005bd2:	42ef      	cmn	r7, r5
 8005bd4:	d40b      	bmi.n	8005bee <__kernel_rem_pio2+0xa2>
 8005bd6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005bda:	e9cd 2300 	strd	r2, r3, [sp]
 8005bde:	f7fa fcbd 	bl	800055c <__aeabi_i2d>
 8005be2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005be6:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005bea:	3501      	adds	r5, #1
 8005bec:	e7da      	b.n	8005ba4 <__kernel_rem_pio2+0x58>
 8005bee:	4610      	mov	r0, r2
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	e7f8      	b.n	8005be6 <__kernel_rem_pio2+0x9a>
 8005bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bf8:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8005bfc:	f7fa fd18 	bl	8000630 <__aeabi_dmul>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c08:	f7fa fb5c 	bl	80002c4 <__adddf3>
 8005c0c:	e9cd 0100 	strd	r0, r1, [sp]
 8005c10:	3601      	adds	r6, #1
 8005c12:	9b07      	ldr	r3, [sp, #28]
 8005c14:	3f08      	subs	r7, #8
 8005c16:	429e      	cmp	r6, r3
 8005c18:	ddec      	ble.n	8005bf4 <__kernel_rem_pio2+0xa8>
 8005c1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c1e:	f108 0801 	add.w	r8, r8, #1
 8005c22:	e8ea 2302 	strd	r2, r3, [sl], #8
 8005c26:	3508      	adds	r5, #8
 8005c28:	e7c6      	b.n	8005bb8 <__kernel_rem_pio2+0x6c>
 8005c2a:	9b02      	ldr	r3, [sp, #8]
 8005c2c:	aa0c      	add	r2, sp, #48	; 0x30
 8005c2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005c32:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c34:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005c36:	9e02      	ldr	r6, [sp, #8]
 8005c38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005c3c:	930a      	str	r3, [sp, #40]	; 0x28
 8005c3e:	ab98      	add	r3, sp, #608	; 0x260
 8005c40:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005c44:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8005c48:	ab70      	add	r3, sp, #448	; 0x1c0
 8005c4a:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8005c4e:	46d0      	mov	r8, sl
 8005c50:	46b1      	mov	r9, r6
 8005c52:	af0c      	add	r7, sp, #48	; 0x30
 8005c54:	9700      	str	r7, [sp, #0]
 8005c56:	f1b9 0f00 	cmp.w	r9, #0
 8005c5a:	f1a8 0808 	sub.w	r8, r8, #8
 8005c5e:	dc71      	bgt.n	8005d44 <__kernel_rem_pio2+0x1f8>
 8005c60:	465a      	mov	r2, fp
 8005c62:	4620      	mov	r0, r4
 8005c64:	4629      	mov	r1, r5
 8005c66:	f000 fbef 	bl	8006448 <scalbn>
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005c70:	4604      	mov	r4, r0
 8005c72:	460d      	mov	r5, r1
 8005c74:	f7fa fcdc 	bl	8000630 <__aeabi_dmul>
 8005c78:	f000 fb66 	bl	8006348 <floor>
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	4b6e      	ldr	r3, [pc, #440]	; (8005e38 <__kernel_rem_pio2+0x2ec>)
 8005c80:	f7fa fcd6 	bl	8000630 <__aeabi_dmul>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4620      	mov	r0, r4
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	f7fa fb18 	bl	80002c0 <__aeabi_dsub>
 8005c90:	460d      	mov	r5, r1
 8005c92:	4604      	mov	r4, r0
 8005c94:	f7fa ff66 	bl	8000b64 <__aeabi_d2iz>
 8005c98:	9004      	str	r0, [sp, #16]
 8005c9a:	f7fa fc5f 	bl	800055c <__aeabi_i2d>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	f7fa fb0b 	bl	80002c0 <__aeabi_dsub>
 8005caa:	f1bb 0f00 	cmp.w	fp, #0
 8005cae:	4680      	mov	r8, r0
 8005cb0:	4689      	mov	r9, r1
 8005cb2:	dd70      	ble.n	8005d96 <__kernel_rem_pio2+0x24a>
 8005cb4:	1e72      	subs	r2, r6, #1
 8005cb6:	ab0c      	add	r3, sp, #48	; 0x30
 8005cb8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005cbc:	9c04      	ldr	r4, [sp, #16]
 8005cbe:	f1cb 0118 	rsb	r1, fp, #24
 8005cc2:	fa40 f301 	asr.w	r3, r0, r1
 8005cc6:	441c      	add	r4, r3
 8005cc8:	408b      	lsls	r3, r1
 8005cca:	1ac0      	subs	r0, r0, r3
 8005ccc:	ab0c      	add	r3, sp, #48	; 0x30
 8005cce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005cd2:	f1cb 0317 	rsb	r3, fp, #23
 8005cd6:	9404      	str	r4, [sp, #16]
 8005cd8:	fa40 f303 	asr.w	r3, r0, r3
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	9b00      	ldr	r3, [sp, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	dd66      	ble.n	8005db2 <__kernel_rem_pio2+0x266>
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005cea:	4614      	mov	r4, r2
 8005cec:	9b04      	ldr	r3, [sp, #16]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	9304      	str	r3, [sp, #16]
 8005cf2:	4296      	cmp	r6, r2
 8005cf4:	f300 80ac 	bgt.w	8005e50 <__kernel_rem_pio2+0x304>
 8005cf8:	f1bb 0f00 	cmp.w	fp, #0
 8005cfc:	dd07      	ble.n	8005d0e <__kernel_rem_pio2+0x1c2>
 8005cfe:	f1bb 0f01 	cmp.w	fp, #1
 8005d02:	f000 80b4 	beq.w	8005e6e <__kernel_rem_pio2+0x322>
 8005d06:	f1bb 0f02 	cmp.w	fp, #2
 8005d0a:	f000 80ba 	beq.w	8005e82 <__kernel_rem_pio2+0x336>
 8005d0e:	9b00      	ldr	r3, [sp, #0]
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d14e      	bne.n	8005db2 <__kernel_rem_pio2+0x266>
 8005d14:	4642      	mov	r2, r8
 8005d16:	464b      	mov	r3, r9
 8005d18:	2000      	movs	r0, #0
 8005d1a:	4948      	ldr	r1, [pc, #288]	; (8005e3c <__kernel_rem_pio2+0x2f0>)
 8005d1c:	f7fa fad0 	bl	80002c0 <__aeabi_dsub>
 8005d20:	4680      	mov	r8, r0
 8005d22:	4689      	mov	r9, r1
 8005d24:	2c00      	cmp	r4, #0
 8005d26:	d044      	beq.n	8005db2 <__kernel_rem_pio2+0x266>
 8005d28:	465a      	mov	r2, fp
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	4943      	ldr	r1, [pc, #268]	; (8005e3c <__kernel_rem_pio2+0x2f0>)
 8005d2e:	f000 fb8b 	bl	8006448 <scalbn>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4640      	mov	r0, r8
 8005d38:	4649      	mov	r1, r9
 8005d3a:	f7fa fac1 	bl	80002c0 <__aeabi_dsub>
 8005d3e:	4680      	mov	r8, r0
 8005d40:	4689      	mov	r9, r1
 8005d42:	e036      	b.n	8005db2 <__kernel_rem_pio2+0x266>
 8005d44:	2200      	movs	r2, #0
 8005d46:	4b3e      	ldr	r3, [pc, #248]	; (8005e40 <__kernel_rem_pio2+0x2f4>)
 8005d48:	4620      	mov	r0, r4
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	f7fa fc70 	bl	8000630 <__aeabi_dmul>
 8005d50:	f7fa ff08 	bl	8000b64 <__aeabi_d2iz>
 8005d54:	f7fa fc02 	bl	800055c <__aeabi_i2d>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d60:	2200      	movs	r2, #0
 8005d62:	4b38      	ldr	r3, [pc, #224]	; (8005e44 <__kernel_rem_pio2+0x2f8>)
 8005d64:	f7fa fc64 	bl	8000630 <__aeabi_dmul>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	4629      	mov	r1, r5
 8005d70:	f7fa faa6 	bl	80002c0 <__aeabi_dsub>
 8005d74:	f7fa fef6 	bl	8000b64 <__aeabi_d2iz>
 8005d78:	9b00      	ldr	r3, [sp, #0]
 8005d7a:	f109 39ff 	add.w	r9, r9, #4294967295
 8005d7e:	f843 0b04 	str.w	r0, [r3], #4
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d88:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005d8c:	f7fa fa9a 	bl	80002c4 <__adddf3>
 8005d90:	4604      	mov	r4, r0
 8005d92:	460d      	mov	r5, r1
 8005d94:	e75f      	b.n	8005c56 <__kernel_rem_pio2+0x10a>
 8005d96:	d105      	bne.n	8005da4 <__kernel_rem_pio2+0x258>
 8005d98:	1e73      	subs	r3, r6, #1
 8005d9a:	aa0c      	add	r2, sp, #48	; 0x30
 8005d9c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005da0:	15c3      	asrs	r3, r0, #23
 8005da2:	e79b      	b.n	8005cdc <__kernel_rem_pio2+0x190>
 8005da4:	2200      	movs	r2, #0
 8005da6:	4b28      	ldr	r3, [pc, #160]	; (8005e48 <__kernel_rem_pio2+0x2fc>)
 8005da8:	f7fa fec8 	bl	8000b3c <__aeabi_dcmpge>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d13e      	bne.n	8005e2e <__kernel_rem_pio2+0x2e2>
 8005db0:	9000      	str	r0, [sp, #0]
 8005db2:	2200      	movs	r2, #0
 8005db4:	2300      	movs	r3, #0
 8005db6:	4640      	mov	r0, r8
 8005db8:	4649      	mov	r1, r9
 8005dba:	f7fa fea1 	bl	8000b00 <__aeabi_dcmpeq>
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	f000 80b1 	beq.w	8005f26 <__kernel_rem_pio2+0x3da>
 8005dc4:	1e74      	subs	r4, r6, #1
 8005dc6:	4623      	mov	r3, r4
 8005dc8:	2200      	movs	r2, #0
 8005dca:	9902      	ldr	r1, [sp, #8]
 8005dcc:	428b      	cmp	r3, r1
 8005dce:	da5f      	bge.n	8005e90 <__kernel_rem_pio2+0x344>
 8005dd0:	2a00      	cmp	r2, #0
 8005dd2:	d074      	beq.n	8005ebe <__kernel_rem_pio2+0x372>
 8005dd4:	ab0c      	add	r3, sp, #48	; 0x30
 8005dd6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005dda:	f1ab 0b18 	sub.w	fp, fp, #24
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 809f 	beq.w	8005f22 <__kernel_rem_pio2+0x3d6>
 8005de4:	465a      	mov	r2, fp
 8005de6:	2000      	movs	r0, #0
 8005de8:	4914      	ldr	r1, [pc, #80]	; (8005e3c <__kernel_rem_pio2+0x2f0>)
 8005dea:	f000 fb2d 	bl	8006448 <scalbn>
 8005dee:	46a2      	mov	sl, r4
 8005df0:	4606      	mov	r6, r0
 8005df2:	460f      	mov	r7, r1
 8005df4:	f04f 0800 	mov.w	r8, #0
 8005df8:	ab70      	add	r3, sp, #448	; 0x1c0
 8005dfa:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8005e40 <__kernel_rem_pio2+0x2f4>
 8005dfe:	00e5      	lsls	r5, r4, #3
 8005e00:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8005e04:	f1ba 0f00 	cmp.w	sl, #0
 8005e08:	f280 80c3 	bge.w	8005f92 <__kernel_rem_pio2+0x446>
 8005e0c:	4626      	mov	r6, r4
 8005e0e:	2e00      	cmp	r6, #0
 8005e10:	f2c0 80f5 	blt.w	8005ffe <__kernel_rem_pio2+0x4b2>
 8005e14:	4b0d      	ldr	r3, [pc, #52]	; (8005e4c <__kernel_rem_pio2+0x300>)
 8005e16:	f04f 0a00 	mov.w	sl, #0
 8005e1a:	9307      	str	r3, [sp, #28]
 8005e1c:	ab70      	add	r3, sp, #448	; 0x1c0
 8005e1e:	f04f 0b00 	mov.w	fp, #0
 8005e22:	f04f 0800 	mov.w	r8, #0
 8005e26:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005e2a:	1ba7      	subs	r7, r4, r6
 8005e2c:	e0db      	b.n	8005fe6 <__kernel_rem_pio2+0x49a>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	e757      	b.n	8005ce4 <__kernel_rem_pio2+0x198>
 8005e34:	08006750 	.word	0x08006750
 8005e38:	40200000 	.word	0x40200000
 8005e3c:	3ff00000 	.word	0x3ff00000
 8005e40:	3e700000 	.word	0x3e700000
 8005e44:	41700000 	.word	0x41700000
 8005e48:	3fe00000 	.word	0x3fe00000
 8005e4c:	08006710 	.word	0x08006710
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	b944      	cbnz	r4, 8005e66 <__kernel_rem_pio2+0x31a>
 8005e54:	b11b      	cbz	r3, 8005e5e <__kernel_rem_pio2+0x312>
 8005e56:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	461c      	mov	r4, r3
 8005e60:	3201      	adds	r2, #1
 8005e62:	3704      	adds	r7, #4
 8005e64:	e745      	b.n	8005cf2 <__kernel_rem_pio2+0x1a6>
 8005e66:	1acb      	subs	r3, r1, r3
 8005e68:	603b      	str	r3, [r7, #0]
 8005e6a:	4623      	mov	r3, r4
 8005e6c:	e7f7      	b.n	8005e5e <__kernel_rem_pio2+0x312>
 8005e6e:	1e72      	subs	r2, r6, #1
 8005e70:	ab0c      	add	r3, sp, #48	; 0x30
 8005e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e76:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005e7a:	a90c      	add	r1, sp, #48	; 0x30
 8005e7c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005e80:	e745      	b.n	8005d0e <__kernel_rem_pio2+0x1c2>
 8005e82:	1e72      	subs	r2, r6, #1
 8005e84:	ab0c      	add	r3, sp, #48	; 0x30
 8005e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005e8e:	e7f4      	b.n	8005e7a <__kernel_rem_pio2+0x32e>
 8005e90:	a90c      	add	r1, sp, #48	; 0x30
 8005e92:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	e796      	b.n	8005dca <__kernel_rem_pio2+0x27e>
 8005e9c:	3401      	adds	r4, #1
 8005e9e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005ea2:	2a00      	cmp	r2, #0
 8005ea4:	d0fa      	beq.n	8005e9c <__kernel_rem_pio2+0x350>
 8005ea6:	9b08      	ldr	r3, [sp, #32]
 8005ea8:	f106 0801 	add.w	r8, r6, #1
 8005eac:	18f5      	adds	r5, r6, r3
 8005eae:	ab20      	add	r3, sp, #128	; 0x80
 8005eb0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005eb4:	4434      	add	r4, r6
 8005eb6:	4544      	cmp	r4, r8
 8005eb8:	da04      	bge.n	8005ec4 <__kernel_rem_pio2+0x378>
 8005eba:	4626      	mov	r6, r4
 8005ebc:	e6bf      	b.n	8005c3e <__kernel_rem_pio2+0xf2>
 8005ebe:	2401      	movs	r4, #1
 8005ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ec2:	e7ec      	b.n	8005e9e <__kernel_rem_pio2+0x352>
 8005ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ec6:	f04f 0900 	mov.w	r9, #0
 8005eca:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005ece:	f7fa fb45 	bl	800055c <__aeabi_i2d>
 8005ed2:	2600      	movs	r6, #0
 8005ed4:	2700      	movs	r7, #0
 8005ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed8:	e9c5 0100 	strd	r0, r1, [r5]
 8005edc:	3b08      	subs	r3, #8
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	9504      	str	r5, [sp, #16]
 8005ee2:	9b07      	ldr	r3, [sp, #28]
 8005ee4:	4599      	cmp	r9, r3
 8005ee6:	dd05      	ble.n	8005ef4 <__kernel_rem_pio2+0x3a8>
 8005ee8:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8005eec:	f108 0801 	add.w	r8, r8, #1
 8005ef0:	3508      	adds	r5, #8
 8005ef2:	e7e0      	b.n	8005eb6 <__kernel_rem_pio2+0x36a>
 8005ef4:	f8dd c010 	ldr.w	ip, [sp, #16]
 8005ef8:	9900      	ldr	r1, [sp, #0]
 8005efa:	f109 0901 	add.w	r9, r9, #1
 8005efe:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8005f02:	9100      	str	r1, [sp, #0]
 8005f04:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8005f08:	f8cd c010 	str.w	ip, [sp, #16]
 8005f0c:	f7fa fb90 	bl	8000630 <__aeabi_dmul>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4630      	mov	r0, r6
 8005f16:	4639      	mov	r1, r7
 8005f18:	f7fa f9d4 	bl	80002c4 <__adddf3>
 8005f1c:	4606      	mov	r6, r0
 8005f1e:	460f      	mov	r7, r1
 8005f20:	e7df      	b.n	8005ee2 <__kernel_rem_pio2+0x396>
 8005f22:	3c01      	subs	r4, #1
 8005f24:	e756      	b.n	8005dd4 <__kernel_rem_pio2+0x288>
 8005f26:	f1cb 0200 	rsb	r2, fp, #0
 8005f2a:	4640      	mov	r0, r8
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	f000 fa8b 	bl	8006448 <scalbn>
 8005f32:	2200      	movs	r2, #0
 8005f34:	4ba4      	ldr	r3, [pc, #656]	; (80061c8 <__kernel_rem_pio2+0x67c>)
 8005f36:	4604      	mov	r4, r0
 8005f38:	460d      	mov	r5, r1
 8005f3a:	f7fa fdff 	bl	8000b3c <__aeabi_dcmpge>
 8005f3e:	b1f8      	cbz	r0, 8005f80 <__kernel_rem_pio2+0x434>
 8005f40:	2200      	movs	r2, #0
 8005f42:	4ba2      	ldr	r3, [pc, #648]	; (80061cc <__kernel_rem_pio2+0x680>)
 8005f44:	4620      	mov	r0, r4
 8005f46:	4629      	mov	r1, r5
 8005f48:	f7fa fb72 	bl	8000630 <__aeabi_dmul>
 8005f4c:	f7fa fe0a 	bl	8000b64 <__aeabi_d2iz>
 8005f50:	4607      	mov	r7, r0
 8005f52:	f7fa fb03 	bl	800055c <__aeabi_i2d>
 8005f56:	2200      	movs	r2, #0
 8005f58:	4b9b      	ldr	r3, [pc, #620]	; (80061c8 <__kernel_rem_pio2+0x67c>)
 8005f5a:	f7fa fb69 	bl	8000630 <__aeabi_dmul>
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4602      	mov	r2, r0
 8005f62:	4629      	mov	r1, r5
 8005f64:	4620      	mov	r0, r4
 8005f66:	f7fa f9ab 	bl	80002c0 <__aeabi_dsub>
 8005f6a:	f7fa fdfb 	bl	8000b64 <__aeabi_d2iz>
 8005f6e:	1c74      	adds	r4, r6, #1
 8005f70:	ab0c      	add	r3, sp, #48	; 0x30
 8005f72:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8005f76:	f10b 0b18 	add.w	fp, fp, #24
 8005f7a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8005f7e:	e731      	b.n	8005de4 <__kernel_rem_pio2+0x298>
 8005f80:	4620      	mov	r0, r4
 8005f82:	4629      	mov	r1, r5
 8005f84:	f7fa fdee 	bl	8000b64 <__aeabi_d2iz>
 8005f88:	ab0c      	add	r3, sp, #48	; 0x30
 8005f8a:	4634      	mov	r4, r6
 8005f8c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8005f90:	e728      	b.n	8005de4 <__kernel_rem_pio2+0x298>
 8005f92:	ab0c      	add	r3, sp, #48	; 0x30
 8005f94:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005f98:	f7fa fae0 	bl	800055c <__aeabi_i2d>
 8005f9c:	4632      	mov	r2, r6
 8005f9e:	463b      	mov	r3, r7
 8005fa0:	f7fa fb46 	bl	8000630 <__aeabi_dmul>
 8005fa4:	4642      	mov	r2, r8
 8005fa6:	e86b 0102 	strd	r0, r1, [fp], #-8
 8005faa:	464b      	mov	r3, r9
 8005fac:	4630      	mov	r0, r6
 8005fae:	4639      	mov	r1, r7
 8005fb0:	f7fa fb3e 	bl	8000630 <__aeabi_dmul>
 8005fb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fb8:	4606      	mov	r6, r0
 8005fba:	460f      	mov	r7, r1
 8005fbc:	e722      	b.n	8005e04 <__kernel_rem_pio2+0x2b8>
 8005fbe:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005fc2:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005fc6:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8005fca:	f8cd c01c 	str.w	ip, [sp, #28]
 8005fce:	f7fa fb2f 	bl	8000630 <__aeabi_dmul>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4650      	mov	r0, sl
 8005fd8:	4659      	mov	r1, fp
 8005fda:	f7fa f973 	bl	80002c4 <__adddf3>
 8005fde:	4682      	mov	sl, r0
 8005fe0:	468b      	mov	fp, r1
 8005fe2:	f108 0801 	add.w	r8, r8, #1
 8005fe6:	9b02      	ldr	r3, [sp, #8]
 8005fe8:	4598      	cmp	r8, r3
 8005fea:	dc01      	bgt.n	8005ff0 <__kernel_rem_pio2+0x4a4>
 8005fec:	45b8      	cmp	r8, r7
 8005fee:	dde6      	ble.n	8005fbe <__kernel_rem_pio2+0x472>
 8005ff0:	ab48      	add	r3, sp, #288	; 0x120
 8005ff2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005ff6:	e9c7 ab00 	strd	sl, fp, [r7]
 8005ffa:	3e01      	subs	r6, #1
 8005ffc:	e707      	b.n	8005e0e <__kernel_rem_pio2+0x2c2>
 8005ffe:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006000:	2b02      	cmp	r3, #2
 8006002:	dc09      	bgt.n	8006018 <__kernel_rem_pio2+0x4cc>
 8006004:	2b00      	cmp	r3, #0
 8006006:	dc32      	bgt.n	800606e <__kernel_rem_pio2+0x522>
 8006008:	d05a      	beq.n	80060c0 <__kernel_rem_pio2+0x574>
 800600a:	9b04      	ldr	r3, [sp, #16]
 800600c:	f003 0007 	and.w	r0, r3, #7
 8006010:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006018:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800601a:	2b03      	cmp	r3, #3
 800601c:	d1f5      	bne.n	800600a <__kernel_rem_pio2+0x4be>
 800601e:	ab48      	add	r3, sp, #288	; 0x120
 8006020:	441d      	add	r5, r3
 8006022:	46aa      	mov	sl, r5
 8006024:	46a3      	mov	fp, r4
 8006026:	f1bb 0f00 	cmp.w	fp, #0
 800602a:	dc76      	bgt.n	800611a <__kernel_rem_pio2+0x5ce>
 800602c:	46aa      	mov	sl, r5
 800602e:	46a3      	mov	fp, r4
 8006030:	f1bb 0f01 	cmp.w	fp, #1
 8006034:	f300 8090 	bgt.w	8006158 <__kernel_rem_pio2+0x60c>
 8006038:	2700      	movs	r7, #0
 800603a:	463e      	mov	r6, r7
 800603c:	2c01      	cmp	r4, #1
 800603e:	f300 80aa 	bgt.w	8006196 <__kernel_rem_pio2+0x64a>
 8006042:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8006046:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800604a:	9b00      	ldr	r3, [sp, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	f040 80ac 	bne.w	80061aa <__kernel_rem_pio2+0x65e>
 8006052:	4603      	mov	r3, r0
 8006054:	462a      	mov	r2, r5
 8006056:	9806      	ldr	r0, [sp, #24]
 8006058:	e9c0 2300 	strd	r2, r3, [r0]
 800605c:	4622      	mov	r2, r4
 800605e:	460b      	mov	r3, r1
 8006060:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006064:	463a      	mov	r2, r7
 8006066:	4633      	mov	r3, r6
 8006068:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800606c:	e7cd      	b.n	800600a <__kernel_rem_pio2+0x4be>
 800606e:	2000      	movs	r0, #0
 8006070:	46a0      	mov	r8, r4
 8006072:	4601      	mov	r1, r0
 8006074:	ab48      	add	r3, sp, #288	; 0x120
 8006076:	441d      	add	r5, r3
 8006078:	f1b8 0f00 	cmp.w	r8, #0
 800607c:	da3a      	bge.n	80060f4 <__kernel_rem_pio2+0x5a8>
 800607e:	9b00      	ldr	r3, [sp, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d03e      	beq.n	8006102 <__kernel_rem_pio2+0x5b6>
 8006084:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8006088:	4602      	mov	r2, r0
 800608a:	462b      	mov	r3, r5
 800608c:	9d06      	ldr	r5, [sp, #24]
 800608e:	2601      	movs	r6, #1
 8006090:	e9c5 2300 	strd	r2, r3, [r5]
 8006094:	460b      	mov	r3, r1
 8006096:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800609a:	f7fa f911 	bl	80002c0 <__aeabi_dsub>
 800609e:	4684      	mov	ip, r0
 80060a0:	460f      	mov	r7, r1
 80060a2:	ad48      	add	r5, sp, #288	; 0x120
 80060a4:	42b4      	cmp	r4, r6
 80060a6:	f105 0508 	add.w	r5, r5, #8
 80060aa:	da2c      	bge.n	8006106 <__kernel_rem_pio2+0x5ba>
 80060ac:	9b00      	ldr	r3, [sp, #0]
 80060ae:	b10b      	cbz	r3, 80060b4 <__kernel_rem_pio2+0x568>
 80060b0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80060b4:	4662      	mov	r2, ip
 80060b6:	463b      	mov	r3, r7
 80060b8:	9906      	ldr	r1, [sp, #24]
 80060ba:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80060be:	e7a4      	b.n	800600a <__kernel_rem_pio2+0x4be>
 80060c0:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80060c2:	ab48      	add	r3, sp, #288	; 0x120
 80060c4:	4637      	mov	r7, r6
 80060c6:	441d      	add	r5, r3
 80060c8:	2c00      	cmp	r4, #0
 80060ca:	da09      	bge.n	80060e0 <__kernel_rem_pio2+0x594>
 80060cc:	9b00      	ldr	r3, [sp, #0]
 80060ce:	b10b      	cbz	r3, 80060d4 <__kernel_rem_pio2+0x588>
 80060d0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80060d4:	4632      	mov	r2, r6
 80060d6:	463b      	mov	r3, r7
 80060d8:	9906      	ldr	r1, [sp, #24]
 80060da:	e9c1 2300 	strd	r2, r3, [r1]
 80060de:	e794      	b.n	800600a <__kernel_rem_pio2+0x4be>
 80060e0:	4630      	mov	r0, r6
 80060e2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80060e6:	4639      	mov	r1, r7
 80060e8:	f7fa f8ec 	bl	80002c4 <__adddf3>
 80060ec:	3c01      	subs	r4, #1
 80060ee:	4606      	mov	r6, r0
 80060f0:	460f      	mov	r7, r1
 80060f2:	e7e9      	b.n	80060c8 <__kernel_rem_pio2+0x57c>
 80060f4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80060f8:	f7fa f8e4 	bl	80002c4 <__adddf3>
 80060fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8006100:	e7ba      	b.n	8006078 <__kernel_rem_pio2+0x52c>
 8006102:	460d      	mov	r5, r1
 8006104:	e7c0      	b.n	8006088 <__kernel_rem_pio2+0x53c>
 8006106:	4660      	mov	r0, ip
 8006108:	e9d5 2300 	ldrd	r2, r3, [r5]
 800610c:	4639      	mov	r1, r7
 800610e:	f7fa f8d9 	bl	80002c4 <__adddf3>
 8006112:	3601      	adds	r6, #1
 8006114:	4684      	mov	ip, r0
 8006116:	460f      	mov	r7, r1
 8006118:	e7c4      	b.n	80060a4 <__kernel_rem_pio2+0x558>
 800611a:	e9da 6700 	ldrd	r6, r7, [sl]
 800611e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8006122:	4632      	mov	r2, r6
 8006124:	463b      	mov	r3, r7
 8006126:	4640      	mov	r0, r8
 8006128:	4649      	mov	r1, r9
 800612a:	f7fa f8cb 	bl	80002c4 <__adddf3>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006136:	4640      	mov	r0, r8
 8006138:	4649      	mov	r1, r9
 800613a:	f7fa f8c1 	bl	80002c0 <__aeabi_dsub>
 800613e:	4632      	mov	r2, r6
 8006140:	463b      	mov	r3, r7
 8006142:	f7fa f8bf 	bl	80002c4 <__adddf3>
 8006146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800614a:	e86a 0102 	strd	r0, r1, [sl], #-8
 800614e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006152:	e9ca 2300 	strd	r2, r3, [sl]
 8006156:	e766      	b.n	8006026 <__kernel_rem_pio2+0x4da>
 8006158:	e9da 8900 	ldrd	r8, r9, [sl]
 800615c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8006160:	4642      	mov	r2, r8
 8006162:	464b      	mov	r3, r9
 8006164:	4630      	mov	r0, r6
 8006166:	4639      	mov	r1, r7
 8006168:	f7fa f8ac 	bl	80002c4 <__adddf3>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006174:	4630      	mov	r0, r6
 8006176:	4639      	mov	r1, r7
 8006178:	f7fa f8a2 	bl	80002c0 <__aeabi_dsub>
 800617c:	4642      	mov	r2, r8
 800617e:	464b      	mov	r3, r9
 8006180:	f7fa f8a0 	bl	80002c4 <__adddf3>
 8006184:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006188:	e86a 0102 	strd	r0, r1, [sl], #-8
 800618c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006190:	e9ca 2300 	strd	r2, r3, [sl]
 8006194:	e74c      	b.n	8006030 <__kernel_rem_pio2+0x4e4>
 8006196:	4638      	mov	r0, r7
 8006198:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800619c:	4631      	mov	r1, r6
 800619e:	f7fa f891 	bl	80002c4 <__adddf3>
 80061a2:	3c01      	subs	r4, #1
 80061a4:	4607      	mov	r7, r0
 80061a6:	460e      	mov	r6, r1
 80061a8:	e748      	b.n	800603c <__kernel_rem_pio2+0x4f0>
 80061aa:	9b06      	ldr	r3, [sp, #24]
 80061ac:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80061b0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80061b4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80061b8:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80061bc:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80061c0:	601d      	str	r5, [r3, #0]
 80061c2:	615e      	str	r6, [r3, #20]
 80061c4:	e721      	b.n	800600a <__kernel_rem_pio2+0x4be>
 80061c6:	bf00      	nop
 80061c8:	41700000 	.word	0x41700000
 80061cc:	3e700000 	.word	0x3e700000

080061d0 <__kernel_sin>:
 80061d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d4:	b086      	sub	sp, #24
 80061d6:	e9cd 2300 	strd	r2, r3, [sp]
 80061da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80061de:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80061e2:	4682      	mov	sl, r0
 80061e4:	460c      	mov	r4, r1
 80061e6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80061e8:	da03      	bge.n	80061f2 <__kernel_sin+0x22>
 80061ea:	f7fa fcbb 	bl	8000b64 <__aeabi_d2iz>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d050      	beq.n	8006294 <__kernel_sin+0xc4>
 80061f2:	4652      	mov	r2, sl
 80061f4:	4623      	mov	r3, r4
 80061f6:	4650      	mov	r0, sl
 80061f8:	4621      	mov	r1, r4
 80061fa:	f7fa fa19 	bl	8000630 <__aeabi_dmul>
 80061fe:	4606      	mov	r6, r0
 8006200:	460f      	mov	r7, r1
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	4650      	mov	r0, sl
 8006208:	4621      	mov	r1, r4
 800620a:	f7fa fa11 	bl	8000630 <__aeabi_dmul>
 800620e:	a33e      	add	r3, pc, #248	; (adr r3, 8006308 <__kernel_sin+0x138>)
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	4680      	mov	r8, r0
 8006216:	4689      	mov	r9, r1
 8006218:	4630      	mov	r0, r6
 800621a:	4639      	mov	r1, r7
 800621c:	f7fa fa08 	bl	8000630 <__aeabi_dmul>
 8006220:	a33b      	add	r3, pc, #236	; (adr r3, 8006310 <__kernel_sin+0x140>)
 8006222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006226:	f7fa f84b 	bl	80002c0 <__aeabi_dsub>
 800622a:	4632      	mov	r2, r6
 800622c:	463b      	mov	r3, r7
 800622e:	f7fa f9ff 	bl	8000630 <__aeabi_dmul>
 8006232:	a339      	add	r3, pc, #228	; (adr r3, 8006318 <__kernel_sin+0x148>)
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f7fa f844 	bl	80002c4 <__adddf3>
 800623c:	4632      	mov	r2, r6
 800623e:	463b      	mov	r3, r7
 8006240:	f7fa f9f6 	bl	8000630 <__aeabi_dmul>
 8006244:	a336      	add	r3, pc, #216	; (adr r3, 8006320 <__kernel_sin+0x150>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	f7fa f839 	bl	80002c0 <__aeabi_dsub>
 800624e:	4632      	mov	r2, r6
 8006250:	463b      	mov	r3, r7
 8006252:	f7fa f9ed 	bl	8000630 <__aeabi_dmul>
 8006256:	a334      	add	r3, pc, #208	; (adr r3, 8006328 <__kernel_sin+0x158>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f7fa f832 	bl	80002c4 <__adddf3>
 8006260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006264:	b9dd      	cbnz	r5, 800629e <__kernel_sin+0xce>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4630      	mov	r0, r6
 800626c:	4639      	mov	r1, r7
 800626e:	f7fa f9df 	bl	8000630 <__aeabi_dmul>
 8006272:	a32f      	add	r3, pc, #188	; (adr r3, 8006330 <__kernel_sin+0x160>)
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	f7fa f822 	bl	80002c0 <__aeabi_dsub>
 800627c:	4642      	mov	r2, r8
 800627e:	464b      	mov	r3, r9
 8006280:	f7fa f9d6 	bl	8000630 <__aeabi_dmul>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4650      	mov	r0, sl
 800628a:	4621      	mov	r1, r4
 800628c:	f7fa f81a 	bl	80002c4 <__adddf3>
 8006290:	4682      	mov	sl, r0
 8006292:	460c      	mov	r4, r1
 8006294:	4650      	mov	r0, sl
 8006296:	4621      	mov	r1, r4
 8006298:	b006      	add	sp, #24
 800629a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800629e:	2200      	movs	r2, #0
 80062a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062a4:	4b24      	ldr	r3, [pc, #144]	; (8006338 <__kernel_sin+0x168>)
 80062a6:	f7fa f9c3 	bl	8000630 <__aeabi_dmul>
 80062aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062b2:	4640      	mov	r0, r8
 80062b4:	4649      	mov	r1, r9
 80062b6:	f7fa f9bb 	bl	8000630 <__aeabi_dmul>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062c2:	f7f9 fffd 	bl	80002c0 <__aeabi_dsub>
 80062c6:	4632      	mov	r2, r6
 80062c8:	463b      	mov	r3, r7
 80062ca:	f7fa f9b1 	bl	8000630 <__aeabi_dmul>
 80062ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062d2:	f7f9 fff5 	bl	80002c0 <__aeabi_dsub>
 80062d6:	a316      	add	r3, pc, #88	; (adr r3, 8006330 <__kernel_sin+0x160>)
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	4606      	mov	r6, r0
 80062de:	460f      	mov	r7, r1
 80062e0:	4640      	mov	r0, r8
 80062e2:	4649      	mov	r1, r9
 80062e4:	f7fa f9a4 	bl	8000630 <__aeabi_dmul>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4630      	mov	r0, r6
 80062ee:	4639      	mov	r1, r7
 80062f0:	f7f9 ffe8 	bl	80002c4 <__adddf3>
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	4650      	mov	r0, sl
 80062fa:	4621      	mov	r1, r4
 80062fc:	f7f9 ffe0 	bl	80002c0 <__aeabi_dsub>
 8006300:	e7c6      	b.n	8006290 <__kernel_sin+0xc0>
 8006302:	bf00      	nop
 8006304:	f3af 8000 	nop.w
 8006308:	5acfd57c 	.word	0x5acfd57c
 800630c:	3de5d93a 	.word	0x3de5d93a
 8006310:	8a2b9ceb 	.word	0x8a2b9ceb
 8006314:	3e5ae5e6 	.word	0x3e5ae5e6
 8006318:	57b1fe7d 	.word	0x57b1fe7d
 800631c:	3ec71de3 	.word	0x3ec71de3
 8006320:	19c161d5 	.word	0x19c161d5
 8006324:	3f2a01a0 	.word	0x3f2a01a0
 8006328:	1110f8a6 	.word	0x1110f8a6
 800632c:	3f811111 	.word	0x3f811111
 8006330:	55555549 	.word	0x55555549
 8006334:	3fc55555 	.word	0x3fc55555
 8006338:	3fe00000 	.word	0x3fe00000

0800633c <fabs>:
 800633c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006340:	4770      	bx	lr
 8006342:	0000      	movs	r0, r0
 8006344:	0000      	movs	r0, r0
	...

08006348 <floor>:
 8006348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800634c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006350:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8006354:	2e13      	cmp	r6, #19
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	4607      	mov	r7, r0
 800635c:	460c      	mov	r4, r1
 800635e:	4605      	mov	r5, r0
 8006360:	dc33      	bgt.n	80063ca <floor+0x82>
 8006362:	2e00      	cmp	r6, #0
 8006364:	da14      	bge.n	8006390 <floor+0x48>
 8006366:	a334      	add	r3, pc, #208	; (adr r3, 8006438 <floor+0xf0>)
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	f7f9 ffaa 	bl	80002c4 <__adddf3>
 8006370:	2200      	movs	r2, #0
 8006372:	2300      	movs	r3, #0
 8006374:	f7fa fbec 	bl	8000b50 <__aeabi_dcmpgt>
 8006378:	b138      	cbz	r0, 800638a <floor+0x42>
 800637a:	2c00      	cmp	r4, #0
 800637c:	da58      	bge.n	8006430 <floor+0xe8>
 800637e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006382:	431d      	orrs	r5, r3
 8006384:	d001      	beq.n	800638a <floor+0x42>
 8006386:	2500      	movs	r5, #0
 8006388:	4c2d      	ldr	r4, [pc, #180]	; (8006440 <floor+0xf8>)
 800638a:	4623      	mov	r3, r4
 800638c:	462f      	mov	r7, r5
 800638e:	e025      	b.n	80063dc <floor+0x94>
 8006390:	4a2c      	ldr	r2, [pc, #176]	; (8006444 <floor+0xfc>)
 8006392:	fa42 f806 	asr.w	r8, r2, r6
 8006396:	ea01 0208 	and.w	r2, r1, r8
 800639a:	4302      	orrs	r2, r0
 800639c:	d01e      	beq.n	80063dc <floor+0x94>
 800639e:	a326      	add	r3, pc, #152	; (adr r3, 8006438 <floor+0xf0>)
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	f7f9 ff8e 	bl	80002c4 <__adddf3>
 80063a8:	2200      	movs	r2, #0
 80063aa:	2300      	movs	r3, #0
 80063ac:	f7fa fbd0 	bl	8000b50 <__aeabi_dcmpgt>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d0ea      	beq.n	800638a <floor+0x42>
 80063b4:	2c00      	cmp	r4, #0
 80063b6:	bfbe      	ittt	lt
 80063b8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80063bc:	fa43 f606 	asrlt.w	r6, r3, r6
 80063c0:	19a4      	addlt	r4, r4, r6
 80063c2:	2500      	movs	r5, #0
 80063c4:	ea24 0408 	bic.w	r4, r4, r8
 80063c8:	e7df      	b.n	800638a <floor+0x42>
 80063ca:	2e33      	cmp	r6, #51	; 0x33
 80063cc:	dd0a      	ble.n	80063e4 <floor+0x9c>
 80063ce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80063d2:	d103      	bne.n	80063dc <floor+0x94>
 80063d4:	f7f9 ff76 	bl	80002c4 <__adddf3>
 80063d8:	4607      	mov	r7, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	4638      	mov	r0, r7
 80063de:	4619      	mov	r1, r3
 80063e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063e4:	f04f 32ff 	mov.w	r2, #4294967295
 80063e8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80063ec:	fa22 f808 	lsr.w	r8, r2, r8
 80063f0:	ea18 0f00 	tst.w	r8, r0
 80063f4:	d0f2      	beq.n	80063dc <floor+0x94>
 80063f6:	a310      	add	r3, pc, #64	; (adr r3, 8006438 <floor+0xf0>)
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	f7f9 ff62 	bl	80002c4 <__adddf3>
 8006400:	2200      	movs	r2, #0
 8006402:	2300      	movs	r3, #0
 8006404:	f7fa fba4 	bl	8000b50 <__aeabi_dcmpgt>
 8006408:	2800      	cmp	r0, #0
 800640a:	d0be      	beq.n	800638a <floor+0x42>
 800640c:	2c00      	cmp	r4, #0
 800640e:	da02      	bge.n	8006416 <floor+0xce>
 8006410:	2e14      	cmp	r6, #20
 8006412:	d103      	bne.n	800641c <floor+0xd4>
 8006414:	3401      	adds	r4, #1
 8006416:	ea25 0508 	bic.w	r5, r5, r8
 800641a:	e7b6      	b.n	800638a <floor+0x42>
 800641c:	2301      	movs	r3, #1
 800641e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006422:	fa03 f606 	lsl.w	r6, r3, r6
 8006426:	4435      	add	r5, r6
 8006428:	42bd      	cmp	r5, r7
 800642a:	bf38      	it	cc
 800642c:	18e4      	addcc	r4, r4, r3
 800642e:	e7f2      	b.n	8006416 <floor+0xce>
 8006430:	2500      	movs	r5, #0
 8006432:	462c      	mov	r4, r5
 8006434:	e7a9      	b.n	800638a <floor+0x42>
 8006436:	bf00      	nop
 8006438:	8800759c 	.word	0x8800759c
 800643c:	7e37e43c 	.word	0x7e37e43c
 8006440:	bff00000 	.word	0xbff00000
 8006444:	000fffff 	.word	0x000fffff

08006448 <scalbn>:
 8006448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800644e:	4604      	mov	r4, r0
 8006450:	460d      	mov	r5, r1
 8006452:	4617      	mov	r7, r2
 8006454:	460b      	mov	r3, r1
 8006456:	b996      	cbnz	r6, 800647e <scalbn+0x36>
 8006458:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800645c:	4303      	orrs	r3, r0
 800645e:	d039      	beq.n	80064d4 <scalbn+0x8c>
 8006460:	4b33      	ldr	r3, [pc, #204]	; (8006530 <scalbn+0xe8>)
 8006462:	2200      	movs	r2, #0
 8006464:	f7fa f8e4 	bl	8000630 <__aeabi_dmul>
 8006468:	4b32      	ldr	r3, [pc, #200]	; (8006534 <scalbn+0xec>)
 800646a:	4604      	mov	r4, r0
 800646c:	429f      	cmp	r7, r3
 800646e:	460d      	mov	r5, r1
 8006470:	da0f      	bge.n	8006492 <scalbn+0x4a>
 8006472:	a32b      	add	r3, pc, #172	; (adr r3, 8006520 <scalbn+0xd8>)
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	f7fa f8da 	bl	8000630 <__aeabi_dmul>
 800647c:	e006      	b.n	800648c <scalbn+0x44>
 800647e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006482:	4296      	cmp	r6, r2
 8006484:	d10a      	bne.n	800649c <scalbn+0x54>
 8006486:	4602      	mov	r2, r0
 8006488:	f7f9 ff1c 	bl	80002c4 <__adddf3>
 800648c:	4604      	mov	r4, r0
 800648e:	460d      	mov	r5, r1
 8006490:	e020      	b.n	80064d4 <scalbn+0x8c>
 8006492:	460b      	mov	r3, r1
 8006494:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006498:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800649c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80064a0:	19b9      	adds	r1, r7, r6
 80064a2:	4291      	cmp	r1, r2
 80064a4:	dd0e      	ble.n	80064c4 <scalbn+0x7c>
 80064a6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80064aa:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80064ae:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80064b2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80064b6:	4820      	ldr	r0, [pc, #128]	; (8006538 <scalbn+0xf0>)
 80064b8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80064bc:	a31a      	add	r3, pc, #104	; (adr r3, 8006528 <scalbn+0xe0>)
 80064be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c2:	e7d9      	b.n	8006478 <scalbn+0x30>
 80064c4:	2900      	cmp	r1, #0
 80064c6:	dd08      	ble.n	80064da <scalbn+0x92>
 80064c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80064cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80064d0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80064d4:	4620      	mov	r0, r4
 80064d6:	4629      	mov	r1, r5
 80064d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064da:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80064de:	da12      	bge.n	8006506 <scalbn+0xbe>
 80064e0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80064e4:	429f      	cmp	r7, r3
 80064e6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80064ea:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80064ee:	dcdc      	bgt.n	80064aa <scalbn+0x62>
 80064f0:	a30b      	add	r3, pc, #44	; (adr r3, 8006520 <scalbn+0xd8>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80064fa:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80064fe:	480f      	ldr	r0, [pc, #60]	; (800653c <scalbn+0xf4>)
 8006500:	f041 011f 	orr.w	r1, r1, #31
 8006504:	e7b8      	b.n	8006478 <scalbn+0x30>
 8006506:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800650a:	3136      	adds	r1, #54	; 0x36
 800650c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006510:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006514:	4620      	mov	r0, r4
 8006516:	4629      	mov	r1, r5
 8006518:	2200      	movs	r2, #0
 800651a:	4b09      	ldr	r3, [pc, #36]	; (8006540 <scalbn+0xf8>)
 800651c:	e7ac      	b.n	8006478 <scalbn+0x30>
 800651e:	bf00      	nop
 8006520:	c2f8f359 	.word	0xc2f8f359
 8006524:	01a56e1f 	.word	0x01a56e1f
 8006528:	8800759c 	.word	0x8800759c
 800652c:	7e37e43c 	.word	0x7e37e43c
 8006530:	43500000 	.word	0x43500000
 8006534:	ffff3cb0 	.word	0xffff3cb0
 8006538:	8800759c 	.word	0x8800759c
 800653c:	c2f8f359 	.word	0xc2f8f359
 8006540:	3c900000 	.word	0x3c900000

08006544 <_init>:
 8006544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006546:	bf00      	nop
 8006548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800654a:	bc08      	pop	{r3}
 800654c:	469e      	mov	lr, r3
 800654e:	4770      	bx	lr

08006550 <_fini>:
 8006550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006552:	bf00      	nop
 8006554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006556:	bc08      	pop	{r3}
 8006558:	469e      	mov	lr, r3
 800655a:	4770      	bx	lr
