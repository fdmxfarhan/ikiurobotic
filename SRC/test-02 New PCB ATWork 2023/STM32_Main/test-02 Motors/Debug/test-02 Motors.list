
test-02 Motors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cf0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e28  08004e28  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e28  08004e28  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e28  08004e28  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e28  08004e28  00014e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e2c  08004e2c  00014e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08004e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000002c  08004e5c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08004e5c  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab36  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad2  00000000  00000000  0002ab8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  0002c660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  0002d2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c2c  00000000  00000000  0002de68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c31c  00000000  00000000  00044a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000867db  00000000  00000000  00050db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d758b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000350c  00000000  00000000  000d75dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000002c 	.word	0x2000002c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004de8 	.word	0x08004de8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000030 	.word	0x20000030
 800014c:	08004de8 	.word	0x08004de8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_frsub>:
 800093c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000940:	e002      	b.n	8000948 <__addsf3>
 8000942:	bf00      	nop

08000944 <__aeabi_fsub>:
 8000944:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000948 <__addsf3>:
 8000948:	0042      	lsls	r2, r0, #1
 800094a:	bf1f      	itttt	ne
 800094c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000950:	ea92 0f03 	teqne	r2, r3
 8000954:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000958:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800095c:	d06a      	beq.n	8000a34 <__addsf3+0xec>
 800095e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000962:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000966:	bfc1      	itttt	gt
 8000968:	18d2      	addgt	r2, r2, r3
 800096a:	4041      	eorgt	r1, r0
 800096c:	4048      	eorgt	r0, r1
 800096e:	4041      	eorgt	r1, r0
 8000970:	bfb8      	it	lt
 8000972:	425b      	neglt	r3, r3
 8000974:	2b19      	cmp	r3, #25
 8000976:	bf88      	it	hi
 8000978:	4770      	bxhi	lr
 800097a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800097e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000982:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000992:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4249      	negne	r1, r1
 800099a:	ea92 0f03 	teq	r2, r3
 800099e:	d03f      	beq.n	8000a20 <__addsf3+0xd8>
 80009a0:	f1a2 0201 	sub.w	r2, r2, #1
 80009a4:	fa41 fc03 	asr.w	ip, r1, r3
 80009a8:	eb10 000c 	adds.w	r0, r0, ip
 80009ac:	f1c3 0320 	rsb	r3, r3, #32
 80009b0:	fa01 f103 	lsl.w	r1, r1, r3
 80009b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009b8:	d502      	bpl.n	80009c0 <__addsf3+0x78>
 80009ba:	4249      	negs	r1, r1
 80009bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009c4:	d313      	bcc.n	80009ee <__addsf3+0xa6>
 80009c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ca:	d306      	bcc.n	80009da <__addsf3+0x92>
 80009cc:	0840      	lsrs	r0, r0, #1
 80009ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80009d2:	f102 0201 	add.w	r2, r2, #1
 80009d6:	2afe      	cmp	r2, #254	; 0xfe
 80009d8:	d251      	bcs.n	8000a7e <__addsf3+0x136>
 80009da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e2:	bf08      	it	eq
 80009e4:	f020 0001 	biceq.w	r0, r0, #1
 80009e8:	ea40 0003 	orr.w	r0, r0, r3
 80009ec:	4770      	bx	lr
 80009ee:	0049      	lsls	r1, r1, #1
 80009f0:	eb40 0000 	adc.w	r0, r0, r0
 80009f4:	3a01      	subs	r2, #1
 80009f6:	bf28      	it	cs
 80009f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009fc:	d2ed      	bcs.n	80009da <__addsf3+0x92>
 80009fe:	fab0 fc80 	clz	ip, r0
 8000a02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a06:	ebb2 020c 	subs.w	r2, r2, ip
 8000a0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a0e:	bfaa      	itet	ge
 8000a10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a14:	4252      	neglt	r2, r2
 8000a16:	4318      	orrge	r0, r3
 8000a18:	bfbc      	itt	lt
 8000a1a:	40d0      	lsrlt	r0, r2
 8000a1c:	4318      	orrlt	r0, r3
 8000a1e:	4770      	bx	lr
 8000a20:	f092 0f00 	teq	r2, #0
 8000a24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a28:	bf06      	itte	eq
 8000a2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a2e:	3201      	addeq	r2, #1
 8000a30:	3b01      	subne	r3, #1
 8000a32:	e7b5      	b.n	80009a0 <__addsf3+0x58>
 8000a34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a3c:	bf18      	it	ne
 8000a3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a42:	d021      	beq.n	8000a88 <__addsf3+0x140>
 8000a44:	ea92 0f03 	teq	r2, r3
 8000a48:	d004      	beq.n	8000a54 <__addsf3+0x10c>
 8000a4a:	f092 0f00 	teq	r2, #0
 8000a4e:	bf08      	it	eq
 8000a50:	4608      	moveq	r0, r1
 8000a52:	4770      	bx	lr
 8000a54:	ea90 0f01 	teq	r0, r1
 8000a58:	bf1c      	itt	ne
 8000a5a:	2000      	movne	r0, #0
 8000a5c:	4770      	bxne	lr
 8000a5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a62:	d104      	bne.n	8000a6e <__addsf3+0x126>
 8000a64:	0040      	lsls	r0, r0, #1
 8000a66:	bf28      	it	cs
 8000a68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a6c:	4770      	bx	lr
 8000a6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a72:	bf3c      	itt	cc
 8000a74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a78:	4770      	bxcc	lr
 8000a7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a86:	4770      	bx	lr
 8000a88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a8c:	bf16      	itet	ne
 8000a8e:	4608      	movne	r0, r1
 8000a90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a94:	4601      	movne	r1, r0
 8000a96:	0242      	lsls	r2, r0, #9
 8000a98:	bf06      	itte	eq
 8000a9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a9e:	ea90 0f01 	teqeq	r0, r1
 8000aa2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_ui2f>:
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	e004      	b.n	8000ab8 <__aeabi_i2f+0x8>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_i2f>:
 8000ab0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ab4:	bf48      	it	mi
 8000ab6:	4240      	negmi	r0, r0
 8000ab8:	ea5f 0c00 	movs.w	ip, r0
 8000abc:	bf08      	it	eq
 8000abe:	4770      	bxeq	lr
 8000ac0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ac4:	4601      	mov	r1, r0
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	e01c      	b.n	8000b06 <__aeabi_l2f+0x2a>

08000acc <__aeabi_ul2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	e00a      	b.n	8000af0 <__aeabi_l2f+0x14>
 8000ada:	bf00      	nop

08000adc <__aeabi_l2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ae8:	d502      	bpl.n	8000af0 <__aeabi_l2f+0x14>
 8000aea:	4240      	negs	r0, r0
 8000aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af0:	ea5f 0c01 	movs.w	ip, r1
 8000af4:	bf02      	ittt	eq
 8000af6:	4684      	moveq	ip, r0
 8000af8:	4601      	moveq	r1, r0
 8000afa:	2000      	moveq	r0, #0
 8000afc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b00:	bf08      	it	eq
 8000b02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b0a:	fabc f28c 	clz	r2, ip
 8000b0e:	3a08      	subs	r2, #8
 8000b10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b14:	db10      	blt.n	8000b38 <__aeabi_l2f+0x5c>
 8000b16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b20:	f1c2 0220 	rsb	r2, r2, #32
 8000b24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b28:	fa20 f202 	lsr.w	r2, r0, r2
 8000b2c:	eb43 0002 	adc.w	r0, r3, r2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f102 0220 	add.w	r2, r2, #32
 8000b3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b40:	f1c2 0220 	rsb	r2, r2, #32
 8000b44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b48:	fa21 f202 	lsr.w	r2, r1, r2
 8000b4c:	eb43 0002 	adc.w	r0, r3, r2
 8000b50:	bf08      	it	eq
 8000b52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b56:	4770      	bx	lr

08000b58 <delay_us>:
uint8_t GY_Set_Command[] = {0xA5, 0x55};

uint32_t Last_Time = 0;
uint16_t oldPos=0, newPos=0;
void delay_us (uint16_t us)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <delay_us+0x2c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8000b6a:	bf00      	nop
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <delay_us+0x2c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d3f9      	bcc.n	8000b6c <delay_us+0x14>
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	20000048 	.word	0x20000048

08000b88 <motor>:

void motor(int L1, int L2, int R2, int R1){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
 8000b94:	603b      	str	r3, [r7, #0]
	if(L1 > 15 && L1 <-15) L1 = 0;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	dd05      	ble.n	8000ba8 <motor+0x20>
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f113 0f0f 	cmn.w	r3, #15
 8000ba2:	da01      	bge.n	8000ba8 <motor+0x20>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
	if(L2 > 15 && L2 <-15) L2 = 0;
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	2b0f      	cmp	r3, #15
 8000bac:	dd05      	ble.n	8000bba <motor+0x32>
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	f113 0f0f 	cmn.w	r3, #15
 8000bb4:	da01      	bge.n	8000bba <motor+0x32>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
	if(R2 > 15 && R2 <-15) R2 = 0;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	dd05      	ble.n	8000bcc <motor+0x44>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f113 0f0f 	cmn.w	r3, #15
 8000bc6:	da01      	bge.n	8000bcc <motor+0x44>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
	if(R1 > 15 && R1 <-15) R1 = 0;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	2b0f      	cmp	r3, #15
 8000bd0:	dd05      	ble.n	8000bde <motor+0x56>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	f113 0f0f 	cmn.w	r3, #15
 8000bd8:	da01      	bge.n	8000bde <motor+0x56>
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]

	L1 = L1*255;
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	4613      	mov	r3, r2
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	1a9b      	subs	r3, r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]
	L2 = L2*255;
 8000be8:	68ba      	ldr	r2, [r7, #8]
 8000bea:	4613      	mov	r3, r2
 8000bec:	021b      	lsls	r3, r3, #8
 8000bee:	1a9b      	subs	r3, r3, r2
 8000bf0:	60bb      	str	r3, [r7, #8]
	R2 = R2*255;
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	021b      	lsls	r3, r3, #8
 8000bf8:	1a9b      	subs	r3, r3, r2
 8000bfa:	607b      	str	r3, [r7, #4]
	R1 = R1*255*1.35;
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	021b      	lsls	r3, r3, #8
 8000c02:	1a9b      	subs	r3, r3, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fbf5 	bl	80003f4 <__aeabi_i2d>
 8000c0a:	a38d      	add	r3, pc, #564	; (adr r3, 8000e40 <motor+0x2b8>)
 8000c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c10:	f7ff fc5a 	bl	80004c8 <__aeabi_dmul>
 8000c14:	4602      	mov	r2, r0
 8000c16:	460b      	mov	r3, r1
 8000c18:	4610      	mov	r0, r2
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f7ff fe66 	bl	80008ec <__aeabi_d2iz>
 8000c20:	4603      	mov	r3, r0
 8000c22:	603b      	str	r3, [r7, #0]

	if(L1 > 65535) L1 = 65535;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c2a:	db02      	blt.n	8000c32 <motor+0xaa>
 8000c2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c30:	60fb      	str	r3, [r7, #12]
	if(L2 > 65535) L2 = 65535;
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c38:	db02      	blt.n	8000c40 <motor+0xb8>
 8000c3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c3e:	60bb      	str	r3, [r7, #8]
	if(R2 > 65535) R2 = 65535;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c46:	db02      	blt.n	8000c4e <motor+0xc6>
 8000c48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c4c:	607b      	str	r3, [r7, #4]
	if(R1 > 65535) R1 = 65535;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c54:	db02      	blt.n	8000c5c <motor+0xd4>
 8000c56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c5a:	603b      	str	r3, [r7, #0]

	if(L1 < -65535) L1 = -65535;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000c62:	dc01      	bgt.n	8000c68 <motor+0xe0>
 8000c64:	4b78      	ldr	r3, [pc, #480]	; (8000e48 <motor+0x2c0>)
 8000c66:	60fb      	str	r3, [r7, #12]
	if(L2 < -65535) L2 = -65535;
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000c6e:	dc01      	bgt.n	8000c74 <motor+0xec>
 8000c70:	4b75      	ldr	r3, [pc, #468]	; (8000e48 <motor+0x2c0>)
 8000c72:	60bb      	str	r3, [r7, #8]
	if(R2 < -65535) R2 = -65535;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000c7a:	dc01      	bgt.n	8000c80 <motor+0xf8>
 8000c7c:	4b72      	ldr	r3, [pc, #456]	; (8000e48 <motor+0x2c0>)
 8000c7e:	607b      	str	r3, [r7, #4]
	if(R1 < -65535) R1 = -65535;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000c86:	dc01      	bgt.n	8000c8c <motor+0x104>
 8000c88:	4b6f      	ldr	r3, [pc, #444]	; (8000e48 <motor+0x2c0>)
 8000c8a:	603b      	str	r3, [r7, #0]

	// ------------------ L1
	if(L2 == 0){
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d110      	bne.n	8000cb4 <motor+0x12c>
		HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c98:	486c      	ldr	r0, [pc, #432]	; (8000e4c <motor+0x2c4>)
 8000c9a:	f001 ffd0 	bl	8002c3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ca4:	4869      	ldr	r0, [pc, #420]	; (8000e4c <motor+0x2c4>)
 8000ca6:	f001 ffca 	bl	8002c3e <HAL_GPIO_WritePin>
		TIM4->CCR1 = 65535;
 8000caa:	4b69      	ldr	r3, [pc, #420]	; (8000e50 <motor+0x2c8>)
 8000cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb0:	635a      	str	r2, [r3, #52]	; 0x34
 8000cb2:	e022      	b.n	8000cfa <motor+0x172>
	}
	else if(L2 > 0){
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	dd0f      	ble.n	8000cda <motor+0x152>
		HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, 1);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc0:	4862      	ldr	r0, [pc, #392]	; (8000e4c <motor+0x2c4>)
 8000cc2:	f001 ffbc 	bl	8002c3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ccc:	485f      	ldr	r0, [pc, #380]	; (8000e4c <motor+0x2c4>)
 8000cce:	f001 ffb6 	bl	8002c3e <HAL_GPIO_WritePin>
		TIM4->CCR1 = L2;
 8000cd2:	4a5f      	ldr	r2, [pc, #380]	; (8000e50 <motor+0x2c8>)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	6353      	str	r3, [r2, #52]	; 0x34
 8000cd8:	e00f      	b.n	8000cfa <motor+0x172>
	}else{
		HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce0:	485a      	ldr	r0, [pc, #360]	; (8000e4c <motor+0x2c4>)
 8000ce2:	f001 ffac 	bl	8002c3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, 1);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cec:	4857      	ldr	r0, [pc, #348]	; (8000e4c <motor+0x2c4>)
 8000cee:	f001 ffa6 	bl	8002c3e <HAL_GPIO_WritePin>
		TIM4->CCR1 = -L2;
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	425a      	negs	r2, r3
 8000cf6:	4b56      	ldr	r3, [pc, #344]	; (8000e50 <motor+0x2c8>)
 8000cf8:	635a      	str	r2, [r3, #52]	; 0x34
	}
	// ------------------ L2
	if(L1 == 0){
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d110      	bne.n	8000d22 <motor+0x19a>
		HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d06:	4851      	ldr	r0, [pc, #324]	; (8000e4c <motor+0x2c4>)
 8000d08:	f001 ff99 	bl	8002c3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d12:	484e      	ldr	r0, [pc, #312]	; (8000e4c <motor+0x2c4>)
 8000d14:	f001 ff93 	bl	8002c3e <HAL_GPIO_WritePin>
		TIM4->CCR2 = 65535;
 8000d18:	4b4d      	ldr	r3, [pc, #308]	; (8000e50 <motor+0x2c8>)
 8000d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d1e:	639a      	str	r2, [r3, #56]	; 0x38
 8000d20:	e022      	b.n	8000d68 <motor+0x1e0>
	}
	else if(L1 > 0){
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	dd0f      	ble.n	8000d48 <motor+0x1c0>
		HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, 1);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d2e:	4847      	ldr	r0, [pc, #284]	; (8000e4c <motor+0x2c4>)
 8000d30:	f001 ff85 	bl	8002c3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d3a:	4844      	ldr	r0, [pc, #272]	; (8000e4c <motor+0x2c4>)
 8000d3c:	f001 ff7f 	bl	8002c3e <HAL_GPIO_WritePin>
		TIM4->CCR2 = L1;
 8000d40:	4a43      	ldr	r2, [pc, #268]	; (8000e50 <motor+0x2c8>)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6393      	str	r3, [r2, #56]	; 0x38
 8000d46:	e00f      	b.n	8000d68 <motor+0x1e0>
	}else{
		HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d4e:	483f      	ldr	r0, [pc, #252]	; (8000e4c <motor+0x2c4>)
 8000d50:	f001 ff75 	bl	8002c3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, 1);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5a:	483c      	ldr	r0, [pc, #240]	; (8000e4c <motor+0x2c4>)
 8000d5c:	f001 ff6f 	bl	8002c3e <HAL_GPIO_WritePin>
		TIM4->CCR2 = -L1;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	425a      	negs	r2, r3
 8000d64:	4b3a      	ldr	r3, [pc, #232]	; (8000e50 <motor+0x2c8>)
 8000d66:	639a      	str	r2, [r3, #56]	; 0x38
	}
	// ------------------ R2
	if(R2 == 0){
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d110      	bne.n	8000d90 <motor+0x208>
		HAL_GPIO_WritePin(INA3_GPIO_Port, INA3_Pin, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d74:	4837      	ldr	r0, [pc, #220]	; (8000e54 <motor+0x2cc>)
 8000d76:	f001 ff62 	bl	8002c3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB3_GPIO_Port, INB3_Pin, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d80:	4834      	ldr	r0, [pc, #208]	; (8000e54 <motor+0x2cc>)
 8000d82:	f001 ff5c 	bl	8002c3e <HAL_GPIO_WritePin>
		TIM4->CCR3 = 65535;
 8000d86:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <motor+0x2c8>)
 8000d88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d8c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d8e:	e022      	b.n	8000dd6 <motor+0x24e>
	}
	else if(R2 > 0){
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	dd0f      	ble.n	8000db6 <motor+0x22e>
		HAL_GPIO_WritePin(INA3_GPIO_Port, INA3_Pin, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d9c:	482d      	ldr	r0, [pc, #180]	; (8000e54 <motor+0x2cc>)
 8000d9e:	f001 ff4e 	bl	8002c3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB3_GPIO_Port, INB3_Pin, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000da8:	482a      	ldr	r0, [pc, #168]	; (8000e54 <motor+0x2cc>)
 8000daa:	f001 ff48 	bl	8002c3e <HAL_GPIO_WritePin>
		TIM4->CCR3 = R2;
 8000dae:	4a28      	ldr	r2, [pc, #160]	; (8000e50 <motor+0x2c8>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000db4:	e00f      	b.n	8000dd6 <motor+0x24e>
	}else{
		HAL_GPIO_WritePin(INA3_GPIO_Port, INA3_Pin, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dbc:	4825      	ldr	r0, [pc, #148]	; (8000e54 <motor+0x2cc>)
 8000dbe:	f001 ff3e 	bl	8002c3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB3_GPIO_Port, INB3_Pin, 1);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc8:	4822      	ldr	r0, [pc, #136]	; (8000e54 <motor+0x2cc>)
 8000dca:	f001 ff38 	bl	8002c3e <HAL_GPIO_WritePin>
		TIM4->CCR3 = -R2;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	425a      	negs	r2, r3
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <motor+0x2c8>)
 8000dd4:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	// ------------------ R1
	if(R1 == 0){
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d10e      	bne.n	8000dfa <motor+0x272>
		HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2110      	movs	r1, #16
 8000de0:	481a      	ldr	r0, [pc, #104]	; (8000e4c <motor+0x2c4>)
 8000de2:	f001 ff2c 	bl	8002c3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2120      	movs	r1, #32
 8000dea:	4818      	ldr	r0, [pc, #96]	; (8000e4c <motor+0x2c4>)
 8000dec:	f001 ff27 	bl	8002c3e <HAL_GPIO_WritePin>
		TIM4->CCR4 = 65535;
 8000df0:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <motor+0x2c8>)
 8000df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000df6:	641a      	str	r2, [r3, #64]	; 0x40
	}else{
		HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, 0);
		HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, 1);
		TIM4->CCR4 = -R1;
	}
}
 8000df8:	e01e      	b.n	8000e38 <motor+0x2b0>
	else if(R1 > 0){
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	dd0d      	ble.n	8000e1c <motor+0x294>
		HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, 1);
 8000e00:	2201      	movs	r2, #1
 8000e02:	2110      	movs	r1, #16
 8000e04:	4811      	ldr	r0, [pc, #68]	; (8000e4c <motor+0x2c4>)
 8000e06:	f001 ff1a 	bl	8002c3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2120      	movs	r1, #32
 8000e0e:	480f      	ldr	r0, [pc, #60]	; (8000e4c <motor+0x2c4>)
 8000e10:	f001 ff15 	bl	8002c3e <HAL_GPIO_WritePin>
		TIM4->CCR4 = R1;
 8000e14:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <motor+0x2c8>)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e1a:	e00d      	b.n	8000e38 <motor+0x2b0>
		HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2110      	movs	r1, #16
 8000e20:	480a      	ldr	r0, [pc, #40]	; (8000e4c <motor+0x2c4>)
 8000e22:	f001 ff0c 	bl	8002c3e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, 1);
 8000e26:	2201      	movs	r2, #1
 8000e28:	2120      	movs	r1, #32
 8000e2a:	4808      	ldr	r0, [pc, #32]	; (8000e4c <motor+0x2c4>)
 8000e2c:	f001 ff07 	bl	8002c3e <HAL_GPIO_WritePin>
		TIM4->CCR4 = -R1;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	425a      	negs	r2, r3
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <motor+0x2c8>)
 8000e36:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	9999999a 	.word	0x9999999a
 8000e44:	3ff59999 	.word	0x3ff59999
 8000e48:	ffff0001 	.word	0xffff0001
 8000e4c:	40010c00 	.word	0x40010c00
 8000e50:	40000800 	.word	0x40000800
 8000e54:	40010800 	.word	0x40010800

08000e58 <initGY>:
	if(direction == 8)  motor(-v, -v,  v,  v);
	if(direction == 10) motor(-v,  0,  v,  0);
	if(direction == 12) motor(-v,  v,  v, -v);
	if(direction == 14) motor( 0,  v,  0, -v);
}
void initGY(){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8000e5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e60:	f001 f982 	bl	8002168 <HAL_Delay>
	HAL_UART_Transmit(&huart2, GY_A5, 1, PHY_FULLDUPLEX_10M);
 8000e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e68:	2201      	movs	r2, #1
 8000e6a:	491a      	ldr	r1, [pc, #104]	; (8000ed4 <initGY+0x7c>)
 8000e6c:	481a      	ldr	r0, [pc, #104]	; (8000ed8 <initGY+0x80>)
 8000e6e:	f003 f98e 	bl	800418e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, GY_54, 1, PHY_FULLDUPLEX_10M);
 8000e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e76:	2201      	movs	r2, #1
 8000e78:	4918      	ldr	r1, [pc, #96]	; (8000edc <initGY+0x84>)
 8000e7a:	4817      	ldr	r0, [pc, #92]	; (8000ed8 <initGY+0x80>)
 8000e7c:	f003 f987 	bl	800418e <HAL_UART_Transmit>
	HAL_Delay(500);
 8000e80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e84:	f001 f970 	bl	8002168 <HAL_Delay>
	HAL_UART_Transmit(&huart2, GY_A5, 1, PHY_FULLDUPLEX_10M);
 8000e88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	4911      	ldr	r1, [pc, #68]	; (8000ed4 <initGY+0x7c>)
 8000e90:	4811      	ldr	r0, [pc, #68]	; (8000ed8 <initGY+0x80>)
 8000e92:	f003 f97c 	bl	800418e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, GY_51, 1, PHY_FULLDUPLEX_10M);
 8000e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4910      	ldr	r1, [pc, #64]	; (8000ee0 <initGY+0x88>)
 8000e9e:	480e      	ldr	r0, [pc, #56]	; (8000ed8 <initGY+0x80>)
 8000ea0:	f003 f975 	bl	800418e <HAL_UART_Transmit>
	HAL_Delay(500);
 8000ea4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ea8:	f001 f95e 	bl	8002168 <HAL_Delay>
	HAL_UART_Transmit(&huart2, GY_A5, 1, PHY_FULLDUPLEX_10M);
 8000eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4908      	ldr	r1, [pc, #32]	; (8000ed4 <initGY+0x7c>)
 8000eb4:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <initGY+0x80>)
 8000eb6:	f003 f96a 	bl	800418e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, GY_55, 1, PHY_FULLDUPLEX_10M);
 8000eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <initGY+0x8c>)
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <initGY+0x80>)
 8000ec4:	f003 f963 	bl	800418e <HAL_UART_Transmit>
	HAL_Delay(500);
 8000ec8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ecc:	f001 f94c 	bl	8002168 <HAL_Delay>
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	2000011c 	.word	0x2000011c
 8000edc:	2000000c 	.word	0x2000000c
 8000ee0:	20000010 	.word	0x20000010
 8000ee4:	20000014 	.word	0x20000014

08000ee8 <delay>:
void delay(int t){
 8000ee8:	b490      	push	{r4, r7}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	for(register int i=0; i<t; i++);
 8000ef0:	2400      	movs	r4, #0
 8000ef2:	e000      	b.n	8000ef6 <delay+0xe>
 8000ef4:	3401      	adds	r4, #1
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	429c      	cmp	r4, r3
 8000efa:	dbfb      	blt.n	8000ef4 <delay+0xc>
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc90      	pop	{r4, r7}
 8000f06:	4770      	bx	lr

08000f08 <pinMode>:
void pinMode(int state){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
	if(state == 0) // INPUT
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d10e      	bne.n	8000f42 <pinMode+0x3a>
	{
		GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000f24:	2372      	movs	r3, #114	; 0x72
 8000f26:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2302      	movs	r3, #2
 8000f32:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480c      	ldr	r0, [pc, #48]	; (8000f6c <pinMode+0x64>)
 8000f3c:	f001 fce4 	bl	8002908 <HAL_GPIO_Init>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	}
}
 8000f40:	e010      	b.n	8000f64 <pinMode+0x5c>
	else if(state == 1) // OUTPUT
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d10d      	bne.n	8000f64 <pinMode+0x5c>
		GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000f48:	2372      	movs	r3, #114	; 0x72
 8000f4a:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2302      	movs	r3, #2
 8000f56:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4803      	ldr	r0, [pc, #12]	; (8000f6c <pinMode+0x64>)
 8000f60:	f001 fcd2 	bl	8002908 <HAL_GPIO_Init>
}
 8000f64:	bf00      	nop
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40010800 	.word	0x40010800

08000f70 <getDistances>:
void getDistances(){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	pinMode(1);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f7ff ffc7 	bl	8000f08 <pinMode>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	4864      	ldr	r0, [pc, #400]	; (8001110 <getDistances+0x1a0>)
 8000f80:	f001 fe5d 	bl	8002c3e <HAL_GPIO_WritePin>
	delay_us(10);
 8000f84:	200a      	movs	r0, #10
 8000f86:	f7ff fde7 	bl	8000b58 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	4860      	ldr	r0, [pc, #384]	; (8001110 <getDistances+0x1a0>)
 8000f90:	f001 fe55 	bl	8002c3e <HAL_GPIO_WritePin>
	pinMode(0);
 8000f94:	2000      	movs	r0, #0
 8000f96:	f7ff ffb7 	bl	8000f08 <pinMode>
	srf_cnt = 0;
 8000f9a:	4b5e      	ldr	r3, [pc, #376]	; (8001114 <getDistances+0x1a4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0);
 8000fa0:	bf00      	nop
 8000fa2:	2102      	movs	r1, #2
 8000fa4:	485a      	ldr	r0, [pc, #360]	; (8001110 <getDistances+0x1a0>)
 8000fa6:	f001 fe33 	bl	8002c10 <HAL_GPIO_ReadPin>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0f8      	beq.n	8000fa2 <getDistances+0x32>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1) srf_cnt++;
 8000fb0:	e004      	b.n	8000fbc <getDistances+0x4c>
 8000fb2:	4b58      	ldr	r3, [pc, #352]	; (8001114 <getDistances+0x1a4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	4a56      	ldr	r2, [pc, #344]	; (8001114 <getDistances+0x1a4>)
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	4854      	ldr	r0, [pc, #336]	; (8001110 <getDistances+0x1a0>)
 8000fc0:	f001 fe26 	bl	8002c10 <HAL_GPIO_ReadPin>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d0f3      	beq.n	8000fb2 <getDistances+0x42>
	Front_Dist = srf_cnt/52;
 8000fca:	4b52      	ldr	r3, [pc, #328]	; (8001114 <getDistances+0x1a4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a52      	ldr	r2, [pc, #328]	; (8001118 <getDistances+0x1a8>)
 8000fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd4:	091b      	lsrs	r3, r3, #4
 8000fd6:	4a51      	ldr	r2, [pc, #324]	; (800111c <getDistances+0x1ac>)
 8000fd8:	6013      	str	r3, [r2, #0]

	pinMode(1);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f7ff ff94 	bl	8000f08 <pinMode>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2110      	movs	r1, #16
 8000fe4:	484a      	ldr	r0, [pc, #296]	; (8001110 <getDistances+0x1a0>)
 8000fe6:	f001 fe2a 	bl	8002c3e <HAL_GPIO_WritePin>
	delay_us(10);
 8000fea:	200a      	movs	r0, #10
 8000fec:	f7ff fdb4 	bl	8000b58 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	4846      	ldr	r0, [pc, #280]	; (8001110 <getDistances+0x1a0>)
 8000ff6:	f001 fe22 	bl	8002c3e <HAL_GPIO_WritePin>
	pinMode(0);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff ff84 	bl	8000f08 <pinMode>
	srf_cnt = 0;
 8001000:	4b44      	ldr	r3, [pc, #272]	; (8001114 <getDistances+0x1a4>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0);
 8001006:	bf00      	nop
 8001008:	2110      	movs	r1, #16
 800100a:	4841      	ldr	r0, [pc, #260]	; (8001110 <getDistances+0x1a0>)
 800100c:	f001 fe00 	bl	8002c10 <HAL_GPIO_ReadPin>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0f8      	beq.n	8001008 <getDistances+0x98>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1) srf_cnt++;
 8001016:	e004      	b.n	8001022 <getDistances+0xb2>
 8001018:	4b3e      	ldr	r3, [pc, #248]	; (8001114 <getDistances+0x1a4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	4a3d      	ldr	r2, [pc, #244]	; (8001114 <getDistances+0x1a4>)
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	2110      	movs	r1, #16
 8001024:	483a      	ldr	r0, [pc, #232]	; (8001110 <getDistances+0x1a0>)
 8001026:	f001 fdf3 	bl	8002c10 <HAL_GPIO_ReadPin>
 800102a:	4603      	mov	r3, r0
 800102c:	2b01      	cmp	r3, #1
 800102e:	d0f3      	beq.n	8001018 <getDistances+0xa8>
	Right_Dist = srf_cnt/52;
 8001030:	4b38      	ldr	r3, [pc, #224]	; (8001114 <getDistances+0x1a4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a38      	ldr	r2, [pc, #224]	; (8001118 <getDistances+0x1a8>)
 8001036:	fba2 2303 	umull	r2, r3, r2, r3
 800103a:	091b      	lsrs	r3, r3, #4
 800103c:	4a38      	ldr	r2, [pc, #224]	; (8001120 <getDistances+0x1b0>)
 800103e:	6013      	str	r3, [r2, #0]

	pinMode(1);
 8001040:	2001      	movs	r0, #1
 8001042:	f7ff ff61 	bl	8000f08 <pinMode>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001046:	2201      	movs	r2, #1
 8001048:	2120      	movs	r1, #32
 800104a:	4831      	ldr	r0, [pc, #196]	; (8001110 <getDistances+0x1a0>)
 800104c:	f001 fdf7 	bl	8002c3e <HAL_GPIO_WritePin>
	delay_us(10);
 8001050:	200a      	movs	r0, #10
 8001052:	f7ff fd81 	bl	8000b58 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2120      	movs	r1, #32
 800105a:	482d      	ldr	r0, [pc, #180]	; (8001110 <getDistances+0x1a0>)
 800105c:	f001 fdef 	bl	8002c3e <HAL_GPIO_WritePin>
	pinMode(0);
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff ff51 	bl	8000f08 <pinMode>
	srf_cnt = 0;
 8001066:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <getDistances+0x1a4>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0);
 800106c:	bf00      	nop
 800106e:	2120      	movs	r1, #32
 8001070:	4827      	ldr	r0, [pc, #156]	; (8001110 <getDistances+0x1a0>)
 8001072:	f001 fdcd 	bl	8002c10 <HAL_GPIO_ReadPin>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0f8      	beq.n	800106e <getDistances+0xfe>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1) srf_cnt++;
 800107c:	e004      	b.n	8001088 <getDistances+0x118>
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <getDistances+0x1a4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	4a23      	ldr	r2, [pc, #140]	; (8001114 <getDistances+0x1a4>)
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	2120      	movs	r1, #32
 800108a:	4821      	ldr	r0, [pc, #132]	; (8001110 <getDistances+0x1a0>)
 800108c:	f001 fdc0 	bl	8002c10 <HAL_GPIO_ReadPin>
 8001090:	4603      	mov	r3, r0
 8001092:	2b01      	cmp	r3, #1
 8001094:	d0f3      	beq.n	800107e <getDistances+0x10e>
	Back_Dist = srf_cnt/52;
 8001096:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <getDistances+0x1a4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <getDistances+0x1a8>)
 800109c:	fba2 2303 	umull	r2, r3, r2, r3
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	4a20      	ldr	r2, [pc, #128]	; (8001124 <getDistances+0x1b4>)
 80010a4:	6013      	str	r3, [r2, #0]

	pinMode(1);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f7ff ff2e 	bl	8000f08 <pinMode>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80010ac:	2201      	movs	r2, #1
 80010ae:	2140      	movs	r1, #64	; 0x40
 80010b0:	4817      	ldr	r0, [pc, #92]	; (8001110 <getDistances+0x1a0>)
 80010b2:	f001 fdc4 	bl	8002c3e <HAL_GPIO_WritePin>
	delay_us(10);
 80010b6:	200a      	movs	r0, #10
 80010b8:	f7ff fd4e 	bl	8000b58 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2140      	movs	r1, #64	; 0x40
 80010c0:	4813      	ldr	r0, [pc, #76]	; (8001110 <getDistances+0x1a0>)
 80010c2:	f001 fdbc 	bl	8002c3e <HAL_GPIO_WritePin>
	pinMode(0);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff ff1e 	bl	8000f08 <pinMode>
	srf_cnt = 0;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <getDistances+0x1a4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0);
 80010d2:	bf00      	nop
 80010d4:	2140      	movs	r1, #64	; 0x40
 80010d6:	480e      	ldr	r0, [pc, #56]	; (8001110 <getDistances+0x1a0>)
 80010d8:	f001 fd9a 	bl	8002c10 <HAL_GPIO_ReadPin>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f8      	beq.n	80010d4 <getDistances+0x164>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) srf_cnt++;
 80010e2:	e004      	b.n	80010ee <getDistances+0x17e>
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <getDistances+0x1a4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <getDistances+0x1a4>)
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	2140      	movs	r1, #64	; 0x40
 80010f0:	4807      	ldr	r0, [pc, #28]	; (8001110 <getDistances+0x1a0>)
 80010f2:	f001 fd8d 	bl	8002c10 <HAL_GPIO_ReadPin>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d0f3      	beq.n	80010e4 <getDistances+0x174>
	Left_Dist = srf_cnt/52;
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <getDistances+0x1a4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a05      	ldr	r2, [pc, #20]	; (8001118 <getDistances+0x1a8>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <getDistances+0x1b8>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40010800 	.word	0x40010800
 8001114:	20000234 	.word	0x20000234
 8001118:	4ec4ec4f 	.word	0x4ec4ec4f
 800111c:	20000224 	.word	0x20000224
 8001120:	2000022c 	.word	0x2000022c
 8001124:	20000228 	.word	0x20000228
 8001128:	20000230 	.word	0x20000230

0800112c <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1){
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a79      	ldr	r2, [pc, #484]	; (8001324 <HAL_UARTEx_RxEventCallback+0x1f8>)
 800113e:	4293      	cmp	r3, r2
 8001140:	f040 80e1 	bne.w	8001306 <HAL_UARTEx_RxEventCallback+0x1da>
		RED_ON;
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800114a:	4877      	ldr	r0, [pc, #476]	; (8001328 <HAL_UARTEx_RxEventCallback+0x1fc>)
 800114c:	f001 fd77 	bl	8002c3e <HAL_GPIO_WritePin>
		if(Rx1_Buff[0] == 'M') {
 8001150:	4b76      	ldr	r3, [pc, #472]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b4d      	cmp	r3, #77	; 0x4d
 8001156:	d13c      	bne.n	80011d2 <HAL_UARTEx_RxEventCallback+0xa6>
		  if(Rx1_Buff[1]=='-') 	r1 =-(int)Rx1_Buff[2];
 8001158:	4b74      	ldr	r3, [pc, #464]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 800115a:	785b      	ldrb	r3, [r3, #1]
 800115c:	2b2d      	cmp	r3, #45	; 0x2d
 800115e:	d105      	bne.n	800116c <HAL_UARTEx_RxEventCallback+0x40>
 8001160:	4b72      	ldr	r3, [pc, #456]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 8001162:	789b      	ldrb	r3, [r3, #2]
 8001164:	425b      	negs	r3, r3
 8001166:	4a72      	ldr	r2, [pc, #456]	; (8001330 <HAL_UARTEx_RxEventCallback+0x204>)
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e004      	b.n	8001176 <HAL_UARTEx_RxEventCallback+0x4a>
		  else  				r1 = (int)Rx1_Buff[2];
 800116c:	4b6f      	ldr	r3, [pc, #444]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 800116e:	789b      	ldrb	r3, [r3, #2]
 8001170:	461a      	mov	r2, r3
 8001172:	4b6f      	ldr	r3, [pc, #444]	; (8001330 <HAL_UARTEx_RxEventCallback+0x204>)
 8001174:	601a      	str	r2, [r3, #0]
		  ////////////////
		  if(Rx1_Buff[3]=='-') 	r2 =-(int)Rx1_Buff[4];
 8001176:	4b6d      	ldr	r3, [pc, #436]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 8001178:	78db      	ldrb	r3, [r3, #3]
 800117a:	2b2d      	cmp	r3, #45	; 0x2d
 800117c:	d105      	bne.n	800118a <HAL_UARTEx_RxEventCallback+0x5e>
 800117e:	4b6b      	ldr	r3, [pc, #428]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 8001180:	791b      	ldrb	r3, [r3, #4]
 8001182:	425b      	negs	r3, r3
 8001184:	4a6b      	ldr	r2, [pc, #428]	; (8001334 <HAL_UARTEx_RxEventCallback+0x208>)
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	e004      	b.n	8001194 <HAL_UARTEx_RxEventCallback+0x68>
		  else  				r2 = (int)Rx1_Buff[4];
 800118a:	4b68      	ldr	r3, [pc, #416]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 800118c:	791b      	ldrb	r3, [r3, #4]
 800118e:	461a      	mov	r2, r3
 8001190:	4b68      	ldr	r3, [pc, #416]	; (8001334 <HAL_UARTEx_RxEventCallback+0x208>)
 8001192:	601a      	str	r2, [r3, #0]
		  ////////////////
		  if(Rx1_Buff[5]=='-') 	l2 =-(int)Rx1_Buff[6];
 8001194:	4b65      	ldr	r3, [pc, #404]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 8001196:	795b      	ldrb	r3, [r3, #5]
 8001198:	2b2d      	cmp	r3, #45	; 0x2d
 800119a:	d105      	bne.n	80011a8 <HAL_UARTEx_RxEventCallback+0x7c>
 800119c:	4b63      	ldr	r3, [pc, #396]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 800119e:	799b      	ldrb	r3, [r3, #6]
 80011a0:	425b      	negs	r3, r3
 80011a2:	4a65      	ldr	r2, [pc, #404]	; (8001338 <HAL_UARTEx_RxEventCallback+0x20c>)
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e004      	b.n	80011b2 <HAL_UARTEx_RxEventCallback+0x86>
		  else  				l2 = (int)Rx1_Buff[6];
 80011a8:	4b60      	ldr	r3, [pc, #384]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 80011aa:	799b      	ldrb	r3, [r3, #6]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b62      	ldr	r3, [pc, #392]	; (8001338 <HAL_UARTEx_RxEventCallback+0x20c>)
 80011b0:	601a      	str	r2, [r3, #0]
		  ////////////////
		  if(Rx1_Buff[7]=='-') 	l1 =-(int)Rx1_Buff[8];
 80011b2:	4b5e      	ldr	r3, [pc, #376]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 80011b4:	79db      	ldrb	r3, [r3, #7]
 80011b6:	2b2d      	cmp	r3, #45	; 0x2d
 80011b8:	d105      	bne.n	80011c6 <HAL_UARTEx_RxEventCallback+0x9a>
 80011ba:	4b5c      	ldr	r3, [pc, #368]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 80011bc:	7a1b      	ldrb	r3, [r3, #8]
 80011be:	425b      	negs	r3, r3
 80011c0:	4a5e      	ldr	r2, [pc, #376]	; (800133c <HAL_UARTEx_RxEventCallback+0x210>)
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	e08b      	b.n	80012de <HAL_UARTEx_RxEventCallback+0x1b2>
		  else  				l1 = (int)Rx1_Buff[8];
 80011c6:	4b59      	ldr	r3, [pc, #356]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 80011c8:	7a1b      	ldrb	r3, [r3, #8]
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b5b      	ldr	r3, [pc, #364]	; (800133c <HAL_UARTEx_RxEventCallback+0x210>)
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	e085      	b.n	80012de <HAL_UARTEx_RxEventCallback+0x1b2>
		}
		else if(Rx1_Buff[0] == 'S') {
 80011d2:	4b56      	ldr	r3, [pc, #344]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b53      	cmp	r3, #83	; 0x53
 80011d8:	d114      	bne.n	8001204 <HAL_UARTEx_RxEventCallback+0xd8>
			HAL_UART_Transmit(&huart2, GY_Set_Command, 2, PHY_FULLDUPLEX_10M);
 80011da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011de:	2202      	movs	r2, #2
 80011e0:	4957      	ldr	r1, [pc, #348]	; (8001340 <HAL_UARTEx_RxEventCallback+0x214>)
 80011e2:	4858      	ldr	r0, [pc, #352]	; (8001344 <HAL_UARTEx_RxEventCallback+0x218>)
 80011e4:	f002 ffd3 	bl	800418e <HAL_UART_Transmit>
			delay(100000);
 80011e8:	4857      	ldr	r0, [pc, #348]	; (8001348 <HAL_UARTEx_RxEventCallback+0x21c>)
 80011ea:	f7ff fe7d 	bl	8000ee8 <delay>
			HAL_UART_Transmit(&huart2, GY_Set_Command, 2, PHY_FULLDUPLEX_10M);
 80011ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f2:	2202      	movs	r2, #2
 80011f4:	4952      	ldr	r1, [pc, #328]	; (8001340 <HAL_UARTEx_RxEventCallback+0x214>)
 80011f6:	4853      	ldr	r0, [pc, #332]	; (8001344 <HAL_UARTEx_RxEventCallback+0x218>)
 80011f8:	f002 ffc9 	bl	800418e <HAL_UART_Transmit>
			delay(100000);
 80011fc:	4852      	ldr	r0, [pc, #328]	; (8001348 <HAL_UARTEx_RxEventCallback+0x21c>)
 80011fe:	f7ff fe73 	bl	8000ee8 <delay>
 8001202:	e06c      	b.n	80012de <HAL_UARTEx_RxEventCallback+0x1b2>
		}
		else if(Rx1_Buff[0] == 'C') {
 8001204:	4b49      	ldr	r3, [pc, #292]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b43      	cmp	r3, #67	; 0x43
 800120a:	d11d      	bne.n	8001248 <HAL_UARTEx_RxEventCallback+0x11c>
			if(Rx1_Buff[1] == 'T'){
 800120c:	4b47      	ldr	r3, [pc, #284]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 800120e:	785b      	ldrb	r3, [r3, #1]
 8001210:	2b54      	cmp	r3, #84	; 0x54
 8001212:	d10a      	bne.n	800122a <HAL_UARTEx_RxEventCallback+0xfe>
				if(Correction_EN == 1) Correction_EN = 0;
 8001214:	4b4d      	ldr	r3, [pc, #308]	; (800134c <HAL_UARTEx_RxEventCallback+0x220>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d103      	bne.n	8001224 <HAL_UARTEx_RxEventCallback+0xf8>
 800121c:	4b4b      	ldr	r3, [pc, #300]	; (800134c <HAL_UARTEx_RxEventCallback+0x220>)
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	e002      	b.n	800122a <HAL_UARTEx_RxEventCallback+0xfe>
				else				   Correction_EN = 1;
 8001224:	4b49      	ldr	r3, [pc, #292]	; (800134c <HAL_UARTEx_RxEventCallback+0x220>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]
			}if(Rx1_Buff[1] == '1'){
 800122a:	4b40      	ldr	r3, [pc, #256]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 800122c:	785b      	ldrb	r3, [r3, #1]
 800122e:	2b31      	cmp	r3, #49	; 0x31
 8001230:	d102      	bne.n	8001238 <HAL_UARTEx_RxEventCallback+0x10c>
				Correction_EN = 1;
 8001232:	4b46      	ldr	r3, [pc, #280]	; (800134c <HAL_UARTEx_RxEventCallback+0x220>)
 8001234:	2201      	movs	r2, #1
 8001236:	601a      	str	r2, [r3, #0]
			}if(Rx1_Buff[1] == '0'){
 8001238:	4b3c      	ldr	r3, [pc, #240]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 800123a:	785b      	ldrb	r3, [r3, #1]
 800123c:	2b30      	cmp	r3, #48	; 0x30
 800123e:	d14e      	bne.n	80012de <HAL_UARTEx_RxEventCallback+0x1b2>
				Correction_EN = 0;
 8001240:	4b42      	ldr	r3, [pc, #264]	; (800134c <HAL_UARTEx_RxEventCallback+0x220>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	e04a      	b.n	80012de <HAL_UARTEx_RxEventCallback+0x1b2>
			}
		}
		else if(Rx1_Buff[0] == 'D') {
 8001248:	4b38      	ldr	r3, [pc, #224]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b44      	cmp	r3, #68	; 0x44
 800124e:	d13e      	bne.n	80012ce <HAL_UARTEx_RxEventCallback+0x1a2>
			if(Rx1_Buff[1] == 'A' && Rx1_Buff[2] == 'L' && Rx1_Buff[3] == 'L'){
 8001250:	4b36      	ldr	r3, [pc, #216]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 8001252:	785b      	ldrb	r3, [r3, #1]
 8001254:	2b41      	cmp	r3, #65	; 0x41
 8001256:	d142      	bne.n	80012de <HAL_UARTEx_RxEventCallback+0x1b2>
 8001258:	4b34      	ldr	r3, [pc, #208]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 800125a:	789b      	ldrb	r3, [r3, #2]
 800125c:	2b4c      	cmp	r3, #76	; 0x4c
 800125e:	d13e      	bne.n	80012de <HAL_UARTEx_RxEventCallback+0x1b2>
 8001260:	4b32      	ldr	r3, [pc, #200]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 8001262:	78db      	ldrb	r3, [r3, #3]
 8001264:	2b4c      	cmp	r3, #76	; 0x4c
 8001266:	d13a      	bne.n	80012de <HAL_UARTEx_RxEventCallback+0x1b2>
				getDistances();
 8001268:	f7ff fe82 	bl	8000f70 <getDistances>
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 800126c:	4b38      	ldr	r3, [pc, #224]	; (8001350 <HAL_UARTEx_RxEventCallback+0x224>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	121b      	asrs	r3, r3, #8
 8001274:	b2db      	uxtb	r3, r3
 8001276:	733b      	strb	r3, [r7, #12]
 8001278:	4b35      	ldr	r3, [pc, #212]	; (8001350 <HAL_UARTEx_RxEventCallback+0x224>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	737b      	strb	r3, [r7, #13]
									 (uint8_t) Right_Dist >> 8,(uint8_t) Right_Dist & 0xFF,
 8001280:	4b34      	ldr	r3, [pc, #208]	; (8001354 <HAL_UARTEx_RxEventCallback+0x228>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	121b      	asrs	r3, r3, #8
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 8001288:	b2db      	uxtb	r3, r3
 800128a:	73bb      	strb	r3, [r7, #14]
									 (uint8_t) Right_Dist >> 8,(uint8_t) Right_Dist & 0xFF,
 800128c:	4b31      	ldr	r3, [pc, #196]	; (8001354 <HAL_UARTEx_RxEventCallback+0x228>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	b2db      	uxtb	r3, r3
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 8001292:	73fb      	strb	r3, [r7, #15]
									 (uint8_t) Back_Dist  >> 8,(uint8_t) Back_Dist  & 0xFF,
 8001294:	4b30      	ldr	r3, [pc, #192]	; (8001358 <HAL_UARTEx_RxEventCallback+0x22c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	121b      	asrs	r3, r3, #8
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 800129c:	b2db      	uxtb	r3, r3
 800129e:	743b      	strb	r3, [r7, #16]
									 (uint8_t) Back_Dist  >> 8,(uint8_t) Back_Dist  & 0xFF,
 80012a0:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <HAL_UARTEx_RxEventCallback+0x22c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	b2db      	uxtb	r3, r3
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 80012a6:	747b      	strb	r3, [r7, #17]
									 (uint8_t) Left_Dist  >> 8,(uint8_t) Left_Dist  & 0xFF};
 80012a8:	4b2c      	ldr	r3, [pc, #176]	; (800135c <HAL_UARTEx_RxEventCallback+0x230>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	121b      	asrs	r3, r3, #8
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	74bb      	strb	r3, [r7, #18]
									 (uint8_t) Left_Dist  >> 8,(uint8_t) Left_Dist  & 0xFF};
 80012b4:	4b29      	ldr	r3, [pc, #164]	; (800135c <HAL_UARTEx_RxEventCallback+0x230>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 80012ba:	74fb      	strb	r3, [r7, #19]
				HAL_UART_Transmit(&huart1, tx_data, 8, PHY_FULLDUPLEX_10M);
 80012bc:	f107 010c 	add.w	r1, r7, #12
 80012c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c4:	2208      	movs	r2, #8
 80012c6:	4826      	ldr	r0, [pc, #152]	; (8001360 <HAL_UARTEx_RxEventCallback+0x234>)
 80012c8:	f002 ff61 	bl	800418e <HAL_UART_Transmit>
 80012cc:	e007      	b.n	80012de <HAL_UARTEx_RxEventCallback+0x1b2>
			}
		}
		else if(Rx1_Buff[0] == 'P') {
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b50      	cmp	r3, #80	; 0x50
 80012d4:	d103      	bne.n	80012de <HAL_UARTEx_RxEventCallback+0x1b2>
			look_direction = Rx1_Buff[1];
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 80012d8:	785a      	ldrb	r2, [r3, #1]
 80012da:	4b22      	ldr	r3, [pc, #136]	; (8001364 <HAL_UARTEx_RxEventCallback+0x238>)
 80012dc:	701a      	strb	r2, [r3, #0]
		}
		RED_OFF;
 80012de:	2200      	movs	r2, #0
 80012e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e4:	4810      	ldr	r0, [pc, #64]	; (8001328 <HAL_UARTEx_RxEventCallback+0x1fc>)
 80012e6:	f001 fcaa 	bl	8002c3e <HAL_GPIO_WritePin>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx1_Buff, RX1_Size);
 80012ea:	2209      	movs	r2, #9
 80012ec:	490f      	ldr	r1, [pc, #60]	; (800132c <HAL_UARTEx_RxEventCallback+0x200>)
 80012ee:	481c      	ldr	r0, [pc, #112]	; (8001360 <HAL_UARTEx_RxEventCallback+0x234>)
 80012f0:	f002 ffdf 	bl	80042b2 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <HAL_UARTEx_RxEventCallback+0x23c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <HAL_UARTEx_RxEventCallback+0x23c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0204 	bic.w	r2, r2, #4
 8001302:	601a      	str	r2, [r3, #0]
		GREEN_OFF;
		HAL_UART_Transmit(&huart2, GY_Request_Command, 2, PHY_FULLDUPLEX_10M);
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx2_Buff, RX2_Size);
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
	}
}
 8001304:	e136      	b.n	8001574 <HAL_UARTEx_RxEventCallback+0x448>
	else if(huart->Instance == USART2){
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a18      	ldr	r2, [pc, #96]	; (800136c <HAL_UARTEx_RxEventCallback+0x240>)
 800130c:	4293      	cmp	r3, r2
 800130e:	f040 8131 	bne.w	8001574 <HAL_UARTEx_RxEventCallback+0x448>
		GREEN_ON;
 8001312:	2201      	movs	r2, #1
 8001314:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001318:	4803      	ldr	r0, [pc, #12]	; (8001328 <HAL_UARTEx_RxEventCallback+0x1fc>)
 800131a:	f001 fc90 	bl	8002c3e <HAL_GPIO_WritePin>
		for(int i=0; i<RX2_Size; i++){
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	e109      	b.n	8001538 <HAL_UARTEx_RxEventCallback+0x40c>
 8001324:	40013800 	.word	0x40013800
 8001328:	40011000 	.word	0x40011000
 800132c:	200001e8 	.word	0x200001e8
 8001330:	20000208 	.word	0x20000208
 8001334:	20000204 	.word	0x20000204
 8001338:	20000200 	.word	0x20000200
 800133c:	200001fc 	.word	0x200001fc
 8001340:	2000001c 	.word	0x2000001c
 8001344:	2000011c 	.word	0x2000011c
 8001348:	000186a0 	.word	0x000186a0
 800134c:	20000000 	.word	0x20000000
 8001350:	20000224 	.word	0x20000224
 8001354:	2000022c 	.word	0x2000022c
 8001358:	20000228 	.word	0x20000228
 800135c:	20000230 	.word	0x20000230
 8001360:	200000d8 	.word	0x200000d8
 8001364:	20000004 	.word	0x20000004
 8001368:	20000160 	.word	0x20000160
 800136c:	40004400 	.word	0x40004400
			if(Rx2_Buff[i] == 0xAA){
 8001370:	4a82      	ldr	r2, [pc, #520]	; (800157c <HAL_UARTEx_RxEventCallback+0x450>)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2baa      	cmp	r3, #170	; 0xaa
 800137a:	f040 80da 	bne.w	8001532 <HAL_UARTEx_RxEventCallback+0x406>
				Heading = (int16_t)(Rx2_Buff[(i+1)%8]<<8 | Rx2_Buff[(i+2)%8])/100.00;
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3301      	adds	r3, #1
 8001382:	425a      	negs	r2, r3
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	f002 0207 	and.w	r2, r2, #7
 800138c:	bf58      	it	pl
 800138e:	4253      	negpl	r3, r2
 8001390:	4a7a      	ldr	r2, [pc, #488]	; (800157c <HAL_UARTEx_RxEventCallback+0x450>)
 8001392:	5cd3      	ldrb	r3, [r2, r3]
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	b21a      	sxth	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	3302      	adds	r3, #2
 800139c:	4259      	negs	r1, r3
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	f001 0107 	and.w	r1, r1, #7
 80013a6:	bf58      	it	pl
 80013a8:	424b      	negpl	r3, r1
 80013aa:	4974      	ldr	r1, [pc, #464]	; (800157c <HAL_UARTEx_RxEventCallback+0x450>)
 80013ac:	5ccb      	ldrb	r3, [r1, r3]
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f81d 	bl	80003f4 <__aeabi_i2d>
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	4b70      	ldr	r3, [pc, #448]	; (8001580 <HAL_UARTEx_RxEventCallback+0x454>)
 80013c0:	f7ff f9ac 	bl	800071c <__aeabi_ddiv>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	f7ff fa8e 	bl	80008ec <__aeabi_d2iz>
 80013d0:	4603      	mov	r3, r0
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	4b6b      	ldr	r3, [pc, #428]	; (8001584 <HAL_UARTEx_RxEventCallback+0x458>)
 80013d6:	801a      	strh	r2, [r3, #0]
				Pitch = (int16_t)(Rx2_Buff[(i+3)%8]<<8 | Rx2_Buff[(i+4)%8])/100.00;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3303      	adds	r3, #3
 80013dc:	425a      	negs	r2, r3
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	f002 0207 	and.w	r2, r2, #7
 80013e6:	bf58      	it	pl
 80013e8:	4253      	negpl	r3, r2
 80013ea:	4a64      	ldr	r2, [pc, #400]	; (800157c <HAL_UARTEx_RxEventCallback+0x450>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	3304      	adds	r3, #4
 80013f6:	4259      	negs	r1, r3
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	f001 0107 	and.w	r1, r1, #7
 8001400:	bf58      	it	pl
 8001402:	424b      	negpl	r3, r1
 8001404:	495d      	ldr	r1, [pc, #372]	; (800157c <HAL_UARTEx_RxEventCallback+0x450>)
 8001406:	5ccb      	ldrb	r3, [r1, r3]
 8001408:	b21b      	sxth	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	b21b      	sxth	r3, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f7fe fff0 	bl	80003f4 <__aeabi_i2d>
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	4b59      	ldr	r3, [pc, #356]	; (8001580 <HAL_UARTEx_RxEventCallback+0x454>)
 800141a:	f7ff f97f 	bl	800071c <__aeabi_ddiv>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f7ff fa61 	bl	80008ec <__aeabi_d2iz>
 800142a:	4603      	mov	r3, r0
 800142c:	b21a      	sxth	r2, r3
 800142e:	4b56      	ldr	r3, [pc, #344]	; (8001588 <HAL_UARTEx_RxEventCallback+0x45c>)
 8001430:	801a      	strh	r2, [r3, #0]
				Roll = (int16_t)(Rx2_Buff[(i+5)%8]<<8 | Rx2_Buff[(i+6)%8])/100.00;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3305      	adds	r3, #5
 8001436:	425a      	negs	r2, r3
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	f002 0207 	and.w	r2, r2, #7
 8001440:	bf58      	it	pl
 8001442:	4253      	negpl	r3, r2
 8001444:	4a4d      	ldr	r2, [pc, #308]	; (800157c <HAL_UARTEx_RxEventCallback+0x450>)
 8001446:	5cd3      	ldrb	r3, [r2, r3]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	b21a      	sxth	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	3306      	adds	r3, #6
 8001450:	4259      	negs	r1, r3
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	f001 0107 	and.w	r1, r1, #7
 800145a:	bf58      	it	pl
 800145c:	424b      	negpl	r3, r1
 800145e:	4947      	ldr	r1, [pc, #284]	; (800157c <HAL_UARTEx_RxEventCallback+0x450>)
 8001460:	5ccb      	ldrb	r3, [r1, r3]
 8001462:	b21b      	sxth	r3, r3
 8001464:	4313      	orrs	r3, r2
 8001466:	b21b      	sxth	r3, r3
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe ffc3 	bl	80003f4 <__aeabi_i2d>
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	4b43      	ldr	r3, [pc, #268]	; (8001580 <HAL_UARTEx_RxEventCallback+0x454>)
 8001474:	f7ff f952 	bl	800071c <__aeabi_ddiv>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f7ff fa34 	bl	80008ec <__aeabi_d2iz>
 8001484:	4603      	mov	r3, r0
 8001486:	b21a      	sxth	r2, r3
 8001488:	4b40      	ldr	r3, [pc, #256]	; (800158c <HAL_UARTEx_RxEventCallback+0x460>)
 800148a:	801a      	strh	r2, [r3, #0]
				if(look_direction == 'W'){
 800148c:	4b40      	ldr	r3, [pc, #256]	; (8001590 <HAL_UARTEx_RxEventCallback+0x464>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b57      	cmp	r3, #87	; 0x57
 8001492:	d108      	bne.n	80014a6 <HAL_UARTEx_RxEventCallback+0x37a>
					Heading += 90;
 8001494:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <HAL_UARTEx_RxEventCallback+0x458>)
 8001496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149a:	b29b      	uxth	r3, r3
 800149c:	335a      	adds	r3, #90	; 0x5a
 800149e:	b29b      	uxth	r3, r3
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	4b38      	ldr	r3, [pc, #224]	; (8001584 <HAL_UARTEx_RxEventCallback+0x458>)
 80014a4:	801a      	strh	r2, [r3, #0]
				if(look_direction == 'E'){
 80014a6:	4b3a      	ldr	r3, [pc, #232]	; (8001590 <HAL_UARTEx_RxEventCallback+0x464>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b45      	cmp	r3, #69	; 0x45
 80014ac:	d108      	bne.n	80014c0 <HAL_UARTEx_RxEventCallback+0x394>
					Heading -= 90;
 80014ae:	4b35      	ldr	r3, [pc, #212]	; (8001584 <HAL_UARTEx_RxEventCallback+0x458>)
 80014b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	3b5a      	subs	r3, #90	; 0x5a
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_UARTEx_RxEventCallback+0x458>)
 80014be:	801a      	strh	r2, [r3, #0]
				if(look_direction == 'S'){
 80014c0:	4b33      	ldr	r3, [pc, #204]	; (8001590 <HAL_UARTEx_RxEventCallback+0x464>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b53      	cmp	r3, #83	; 0x53
 80014c6:	d117      	bne.n	80014f8 <HAL_UARTEx_RxEventCallback+0x3cc>
					if(Heading > 0) Heading = Heading - 180;
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <HAL_UARTEx_RxEventCallback+0x458>)
 80014ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	dd09      	ble.n	80014e6 <HAL_UARTEx_RxEventCallback+0x3ba>
 80014d2:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <HAL_UARTEx_RxEventCallback+0x458>)
 80014d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	3bb4      	subs	r3, #180	; 0xb4
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b21a      	sxth	r2, r3
 80014e0:	4b28      	ldr	r3, [pc, #160]	; (8001584 <HAL_UARTEx_RxEventCallback+0x458>)
 80014e2:	801a      	strh	r2, [r3, #0]
 80014e4:	e008      	b.n	80014f8 <HAL_UARTEx_RxEventCallback+0x3cc>
					else		    Heading = Heading + 180;
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_UARTEx_RxEventCallback+0x458>)
 80014e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	33b4      	adds	r3, #180	; 0xb4
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	4b23      	ldr	r3, [pc, #140]	; (8001584 <HAL_UARTEx_RxEventCallback+0x458>)
 80014f6:	801a      	strh	r2, [r3, #0]
				if(Heading > 180) Heading -= 180;
 80014f8:	4b22      	ldr	r3, [pc, #136]	; (8001584 <HAL_UARTEx_RxEventCallback+0x458>)
 80014fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fe:	2bb4      	cmp	r3, #180	; 0xb4
 8001500:	dd08      	ble.n	8001514 <HAL_UARTEx_RxEventCallback+0x3e8>
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <HAL_UARTEx_RxEventCallback+0x458>)
 8001504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001508:	b29b      	uxth	r3, r3
 800150a:	3bb4      	subs	r3, #180	; 0xb4
 800150c:	b29b      	uxth	r3, r3
 800150e:	b21a      	sxth	r2, r3
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <HAL_UARTEx_RxEventCallback+0x458>)
 8001512:	801a      	strh	r2, [r3, #0]
				if(Heading <-180) Heading += 180;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_UARTEx_RxEventCallback+0x458>)
 8001516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151a:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 800151e:	da08      	bge.n	8001532 <HAL_UARTEx_RxEventCallback+0x406>
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_UARTEx_RxEventCallback+0x458>)
 8001522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001526:	b29b      	uxth	r3, r3
 8001528:	33b4      	adds	r3, #180	; 0xb4
 800152a:	b29b      	uxth	r3, r3
 800152c:	b21a      	sxth	r2, r3
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_UARTEx_RxEventCallback+0x458>)
 8001530:	801a      	strh	r2, [r3, #0]
		for(int i=0; i<RX2_Size; i++){
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b07      	cmp	r3, #7
 800153c:	f77f af18 	ble.w	8001370 <HAL_UARTEx_RxEventCallback+0x244>
		GREEN_OFF;
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001546:	4813      	ldr	r0, [pc, #76]	; (8001594 <HAL_UARTEx_RxEventCallback+0x468>)
 8001548:	f001 fb79 	bl	8002c3e <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, GY_Request_Command, 2, PHY_FULLDUPLEX_10M);
 800154c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001550:	2202      	movs	r2, #2
 8001552:	4911      	ldr	r1, [pc, #68]	; (8001598 <HAL_UARTEx_RxEventCallback+0x46c>)
 8001554:	4811      	ldr	r0, [pc, #68]	; (800159c <HAL_UARTEx_RxEventCallback+0x470>)
 8001556:	f002 fe1a 	bl	800418e <HAL_UART_Transmit>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx2_Buff, RX2_Size);
 800155a:	2208      	movs	r2, #8
 800155c:	4907      	ldr	r1, [pc, #28]	; (800157c <HAL_UARTEx_RxEventCallback+0x450>)
 800155e:	480f      	ldr	r0, [pc, #60]	; (800159c <HAL_UARTEx_RxEventCallback+0x470>)
 8001560:	f002 fea7 	bl	80042b2 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x474>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x474>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0204 	bic.w	r2, r2, #4
 8001572:	601a      	str	r2, [r3, #0]
}
 8001574:	bf00      	nop
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200001f4 	.word	0x200001f4
 8001580:	40590000 	.word	0x40590000
 8001584:	20000210 	.word	0x20000210
 8001588:	2000020c 	.word	0x2000020c
 800158c:	2000020e 	.word	0x2000020e
 8001590:	20000004 	.word	0x20000004
 8001594:	40011000 	.word	0x40011000
 8001598:	20000018 	.word	0x20000018
 800159c:	2000011c 	.word	0x2000011c
 80015a0:	200001a4 	.word	0x200001a4
 80015a4:	00000000 	.word	0x00000000

080015a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ae:	f000 fd79 	bl	80020a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b2:	f000 f95f 	bl	8001874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b6:	f000 fae3 	bl	8001b80 <MX_GPIO_Init>
  MX_TIM4_Init();
 80015ba:	f000 f9ed 	bl	8001998 <MX_TIM4_Init>
  MX_DMA_Init();
 80015be:	f000 fab9 	bl	8001b34 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80015c2:	f000 fa63 	bl	8001a8c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80015c6:	f000 fa8b 	bl	8001ae0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80015ca:	f000 f995 	bl	80018f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80015ce:	2100      	movs	r1, #0
 80015d0:	4891      	ldr	r0, [pc, #580]	; (8001818 <main+0x270>)
 80015d2:	f002 f869 	bl	80036a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80015d6:	2104      	movs	r1, #4
 80015d8:	488f      	ldr	r0, [pc, #572]	; (8001818 <main+0x270>)
 80015da:	f002 f865 	bl	80036a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80015de:	2108      	movs	r1, #8
 80015e0:	488d      	ldr	r0, [pc, #564]	; (8001818 <main+0x270>)
 80015e2:	f002 f861 	bl	80036a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80015e6:	210c      	movs	r1, #12
 80015e8:	488b      	ldr	r0, [pc, #556]	; (8001818 <main+0x270>)
 80015ea:	f002 f85d 	bl	80036a8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim1);
 80015ee:	488b      	ldr	r0, [pc, #556]	; (800181c <main+0x274>)
 80015f0:	f001 ffc0 	bl	8003574 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(MOTORS_EN_GPIO_Port, MOTORS_EN_Pin, 1);
 80015f4:	2201      	movs	r2, #1
 80015f6:	2108      	movs	r1, #8
 80015f8:	4889      	ldr	r0, [pc, #548]	; (8001820 <main+0x278>)
 80015fa:	f001 fb20 	bl	8002c3e <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // Red LED
 80015fe:	2201      	movs	r2, #1
 8001600:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001604:	4887      	ldr	r0, [pc, #540]	; (8001824 <main+0x27c>)
 8001606:	f001 fb1a 	bl	8002c3e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0); // Red LED
 800160a:	2200      	movs	r2, #0
 800160c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001610:	4884      	ldr	r0, [pc, #528]	; (8001824 <main+0x27c>)
 8001612:	f001 fb14 	bl	8002c3e <HAL_GPIO_WritePin>
  for(int i=0; i<5; i++){
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	e00f      	b.n	800163c <main+0x94>
	  HAL_Delay(100);
 800161c:	2064      	movs	r0, #100	; 0x64
 800161e:	f000 fda3 	bl	8002168 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14); // Red LED
 8001622:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001626:	487f      	ldr	r0, [pc, #508]	; (8001824 <main+0x27c>)
 8001628:	f001 fb21 	bl	8002c6e <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Green LED
 800162c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001630:	487c      	ldr	r0, [pc, #496]	; (8001824 <main+0x27c>)
 8001632:	f001 fb1c 	bl	8002c6e <HAL_GPIO_TogglePin>
  for(int i=0; i<5; i++){
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3301      	adds	r3, #1
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b04      	cmp	r3, #4
 8001640:	ddec      	ble.n	800161c <main+0x74>
  }
  RED_OFF;
 8001642:	2200      	movs	r2, #0
 8001644:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001648:	4876      	ldr	r0, [pc, #472]	; (8001824 <main+0x27c>)
 800164a:	f001 faf8 	bl	8002c3e <HAL_GPIO_WritePin>
  GREEN_OFF;
 800164e:	2200      	movs	r2, #0
 8001650:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001654:	4873      	ldr	r0, [pc, #460]	; (8001824 <main+0x27c>)
 8001656:	f001 faf2 	bl	8002c3e <HAL_GPIO_WritePin>

  initGY();
 800165a:	f7ff fbfd 	bl	8000e58 <initGY>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx1_Buff, RX1_Size);
 800165e:	2209      	movs	r2, #9
 8001660:	4971      	ldr	r1, [pc, #452]	; (8001828 <main+0x280>)
 8001662:	4872      	ldr	r0, [pc, #456]	; (800182c <main+0x284>)
 8001664:	f002 fe25 	bl	80042b2 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001668:	4b71      	ldr	r3, [pc, #452]	; (8001830 <main+0x288>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4b70      	ldr	r3, [pc, #448]	; (8001830 <main+0x288>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0204 	bic.w	r2, r2, #4
 8001676:	601a      	str	r2, [r3, #0]

  HAL_UART_Transmit(&huart2, GY_Request_Command, 2, PHY_FULLDUPLEX_10M);
 8001678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800167c:	2202      	movs	r2, #2
 800167e:	496d      	ldr	r1, [pc, #436]	; (8001834 <main+0x28c>)
 8001680:	486d      	ldr	r0, [pc, #436]	; (8001838 <main+0x290>)
 8001682:	f002 fd84 	bl	800418e <HAL_UART_Transmit>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx2_Buff, RX2_Size);
 8001686:	2208      	movs	r2, #8
 8001688:	496c      	ldr	r1, [pc, #432]	; (800183c <main+0x294>)
 800168a:	486b      	ldr	r0, [pc, #428]	; (8001838 <main+0x290>)
 800168c:	f002 fe11 	bl	80042b2 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001690:	4b6b      	ldr	r3, [pc, #428]	; (8001840 <main+0x298>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4b6a      	ldr	r3, [pc, #424]	; (8001840 <main+0x298>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0204 	bic.w	r2, r2, #4
 800169e:	601a      	str	r2, [r3, #0]


  Last_Time = HAL_GetTick();
 80016a0:	f000 fd58 	bl	8002154 <HAL_GetTick>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4a67      	ldr	r2, [pc, #412]	; (8001844 <main+0x29c>)
 80016a8:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  K_P = Heading;
 80016aa:	4b67      	ldr	r3, [pc, #412]	; (8001848 <main+0x2a0>)
 80016ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff f9fd 	bl	8000ab0 <__aeabi_i2f>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4a64      	ldr	r2, [pc, #400]	; (800184c <main+0x2a4>)
 80016ba:	6013      	str	r3, [r2, #0]
	  if(HAL_GetTick() - Last_Time > 1000){
 80016bc:	f000 fd4a 	bl	8002154 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	4b60      	ldr	r3, [pc, #384]	; (8001844 <main+0x29c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016cc:	d936      	bls.n	800173c <main+0x194>
		  if(Heading == 0) {
 80016ce:	4b5e      	ldr	r3, [pc, #376]	; (8001848 <main+0x2a0>)
 80016d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d108      	bne.n	80016ea <main+0x142>
			  K_I = 0;
 80016d8:	4b5d      	ldr	r3, [pc, #372]	; (8001850 <main+0x2a8>)
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
			  K_D = 0;
 80016e0:	4b5c      	ldr	r3, [pc, #368]	; (8001854 <main+0x2ac>)
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	e01e      	b.n	8001728 <main+0x180>
		  }else{
			  K_I = (K_I + Heading);
 80016ea:	4b57      	ldr	r3, [pc, #348]	; (8001848 <main+0x2a0>)
 80016ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff f9dd 	bl	8000ab0 <__aeabi_i2f>
 80016f6:	4602      	mov	r2, r0
 80016f8:	4b55      	ldr	r3, [pc, #340]	; (8001850 <main+0x2a8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	4610      	mov	r0, r2
 8001700:	f7ff f922 	bl	8000948 <__addsf3>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	4b51      	ldr	r3, [pc, #324]	; (8001850 <main+0x2a8>)
 800170a:	601a      	str	r2, [r3, #0]
			  K_D = (Heading - Last_Heading);
 800170c:	4b4e      	ldr	r3, [pc, #312]	; (8001848 <main+0x2a0>)
 800170e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001712:	461a      	mov	r2, r3
 8001714:	4b50      	ldr	r3, [pc, #320]	; (8001858 <main+0x2b0>)
 8001716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff f9c7 	bl	8000ab0 <__aeabi_i2f>
 8001722:	4603      	mov	r3, r0
 8001724:	4a4b      	ldr	r2, [pc, #300]	; (8001854 <main+0x2ac>)
 8001726:	6013      	str	r3, [r2, #0]
		  }
		  Last_Time = HAL_GetTick();
 8001728:	f000 fd14 	bl	8002154 <HAL_GetTick>
 800172c:	4603      	mov	r3, r0
 800172e:	4a45      	ldr	r2, [pc, #276]	; (8001844 <main+0x29c>)
 8001730:	6013      	str	r3, [r2, #0]
		  Last_Heading = Heading;
 8001732:	4b45      	ldr	r3, [pc, #276]	; (8001848 <main+0x2a0>)
 8001734:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001738:	4b47      	ldr	r3, [pc, #284]	; (8001858 <main+0x2b0>)
 800173a:	801a      	strh	r2, [r3, #0]
	  }
	  correction = 2.1 * K_P + 0.43 * K_I + 0.0 * K_D;
 800173c:	4b43      	ldr	r3, [pc, #268]	; (800184c <main+0x2a4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fe69 	bl	8000418 <__aeabi_f2d>
 8001746:	a330      	add	r3, pc, #192	; (adr r3, 8001808 <main+0x260>)
 8001748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174c:	f7fe febc 	bl	80004c8 <__aeabi_dmul>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4614      	mov	r4, r2
 8001756:	461d      	mov	r5, r3
 8001758:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <main+0x2a8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fe5b 	bl	8000418 <__aeabi_f2d>
 8001762:	a32b      	add	r3, pc, #172	; (adr r3, 8001810 <main+0x268>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7fe feae 	bl	80004c8 <__aeabi_dmul>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4620      	mov	r0, r4
 8001772:	4629      	mov	r1, r5
 8001774:	f7fe fcf2 	bl	800015c <__adddf3>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4614      	mov	r4, r2
 800177e:	461d      	mov	r5, r3
 8001780:	4b34      	ldr	r3, [pc, #208]	; (8001854 <main+0x2ac>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fe47 	bl	8000418 <__aeabi_f2d>
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	f7fe fe99 	bl	80004c8 <__aeabi_dmul>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4620      	mov	r0, r4
 800179c:	4629      	mov	r1, r5
 800179e:	f7fe fcdd 	bl	800015c <__adddf3>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7ff f89f 	bl	80008ec <__aeabi_d2iz>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a2a      	ldr	r2, [pc, #168]	; (800185c <main+0x2b4>)
 80017b2:	6013      	str	r3, [r2, #0]



	  if(Correction_EN == 1)
 80017b4:	4b2a      	ldr	r3, [pc, #168]	; (8001860 <main+0x2b8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d117      	bne.n	80017ec <main+0x244>
		  motor(l1 + correction, l2 + correction, r2 + correction, r1 + correction);
 80017bc:	4b29      	ldr	r3, [pc, #164]	; (8001864 <main+0x2bc>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b26      	ldr	r3, [pc, #152]	; (800185c <main+0x2b4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	18d0      	adds	r0, r2, r3
 80017c6:	4b28      	ldr	r3, [pc, #160]	; (8001868 <main+0x2c0>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4b24      	ldr	r3, [pc, #144]	; (800185c <main+0x2b4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	18d1      	adds	r1, r2, r3
 80017d0:	4b26      	ldr	r3, [pc, #152]	; (800186c <main+0x2c4>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <main+0x2b4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	18d4      	adds	r4, r2, r3
 80017da:	4b25      	ldr	r3, [pc, #148]	; (8001870 <main+0x2c8>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	4b1f      	ldr	r3, [pc, #124]	; (800185c <main+0x2b4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	4622      	mov	r2, r4
 80017e6:	f7ff f9cf 	bl	8000b88 <motor>
 80017ea:	e75e      	b.n	80016aa <main+0x102>
	  else
		  motor(l1, l2, r2, r1);
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <main+0x2bc>)
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <main+0x2c0>)
 80017f2:	6819      	ldr	r1, [r3, #0]
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <main+0x2c4>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <main+0x2c8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f7ff f9c4 	bl	8000b88 <motor>
	  K_P = Heading;
 8001800:	e753      	b.n	80016aa <main+0x102>
 8001802:	bf00      	nop
 8001804:	f3af 8000 	nop.w
 8001808:	cccccccd 	.word	0xcccccccd
 800180c:	4000cccc 	.word	0x4000cccc
 8001810:	b851eb85 	.word	0xb851eb85
 8001814:	3fdb851e 	.word	0x3fdb851e
 8001818:	20000090 	.word	0x20000090
 800181c:	20000048 	.word	0x20000048
 8001820:	40010c00 	.word	0x40010c00
 8001824:	40011000 	.word	0x40011000
 8001828:	200001e8 	.word	0x200001e8
 800182c:	200000d8 	.word	0x200000d8
 8001830:	20000160 	.word	0x20000160
 8001834:	20000018 	.word	0x20000018
 8001838:	2000011c 	.word	0x2000011c
 800183c:	200001f4 	.word	0x200001f4
 8001840:	200001a4 	.word	0x200001a4
 8001844:	20000238 	.word	0x20000238
 8001848:	20000210 	.word	0x20000210
 800184c:	20000218 	.word	0x20000218
 8001850:	2000021c 	.word	0x2000021c
 8001854:	20000220 	.word	0x20000220
 8001858:	20000212 	.word	0x20000212
 800185c:	20000214 	.word	0x20000214
 8001860:	20000000 	.word	0x20000000
 8001864:	200001fc 	.word	0x200001fc
 8001868:	20000200 	.word	0x20000200
 800186c:	20000204 	.word	0x20000204
 8001870:	20000208 	.word	0x20000208

08001874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b090      	sub	sp, #64	; 0x40
 8001878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187a:	f107 0318 	add.w	r3, r7, #24
 800187e:	2228      	movs	r2, #40	; 0x28
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f003 faa8 	bl	8004dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800189a:	2301      	movs	r3, #1
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800189e:	2310      	movs	r3, #16
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a2:	2302      	movs	r3, #2
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80018a6:	2300      	movs	r3, #0
 80018a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80018aa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80018ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b0:	f107 0318 	add.w	r3, r7, #24
 80018b4:	4618      	mov	r0, r3
 80018b6:	f001 f9f3 	bl	8002ca0 <HAL_RCC_OscConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80018c0:	f000 f9e4 	bl	8001c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c4:	230f      	movs	r3, #15
 80018c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c8:	2302      	movs	r3, #2
 80018ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2102      	movs	r1, #2
 80018de:	4618      	mov	r0, r3
 80018e0:	f001 fc60 	bl	80031a4 <HAL_RCC_ClockConfig>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80018ea:	f000 f9cf 	bl	8001c8c <Error_Handler>
  }
}
 80018ee:	bf00      	nop
 80018f0:	3740      	adds	r7, #64	; 0x40
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fe:	f107 0308 	add.w	r3, r7, #8
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190c:	463b      	mov	r3, r7
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001914:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <MX_TIM1_Init+0x98>)
 8001916:	4a1f      	ldr	r2, [pc, #124]	; (8001994 <MX_TIM1_Init+0x9c>)
 8001918:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 800191a:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <MX_TIM1_Init+0x98>)
 800191c:	223f      	movs	r2, #63	; 0x3f
 800191e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <MX_TIM1_Init+0x98>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001926:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <MX_TIM1_Init+0x98>)
 8001928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800192c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <MX_TIM1_Init+0x98>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001934:	4b16      	ldr	r3, [pc, #88]	; (8001990 <MX_TIM1_Init+0x98>)
 8001936:	2200      	movs	r2, #0
 8001938:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <MX_TIM1_Init+0x98>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001940:	4813      	ldr	r0, [pc, #76]	; (8001990 <MX_TIM1_Init+0x98>)
 8001942:	f001 fdc7 	bl	80034d4 <HAL_TIM_Base_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800194c:	f000 f99e 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001954:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	4619      	mov	r1, r3
 800195c:	480c      	ldr	r0, [pc, #48]	; (8001990 <MX_TIM1_Init+0x98>)
 800195e:	f002 f803 	bl	8003968 <HAL_TIM_ConfigClockSource>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001968:	f000 f990 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001970:	2300      	movs	r3, #0
 8001972:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001974:	463b      	mov	r3, r7
 8001976:	4619      	mov	r1, r3
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <MX_TIM1_Init+0x98>)
 800197a:	f002 fb5d 	bl	8004038 <HAL_TIMEx_MasterConfigSynchronization>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001984:	f000 f982 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001988:	bf00      	nop
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000048 	.word	0x20000048
 8001994:	40012c00 	.word	0x40012c00

08001998 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08a      	sub	sp, #40	; 0x28
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199e:	f107 0320 	add.w	r3, r7, #32
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	611a      	str	r2, [r3, #16]
 80019b6:	615a      	str	r2, [r3, #20]
 80019b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019ba:	4b32      	ldr	r3, [pc, #200]	; (8001a84 <MX_TIM4_Init+0xec>)
 80019bc:	4a32      	ldr	r2, [pc, #200]	; (8001a88 <MX_TIM4_Init+0xf0>)
 80019be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80019c0:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <MX_TIM4_Init+0xec>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c6:	4b2f      	ldr	r3, [pc, #188]	; (8001a84 <MX_TIM4_Init+0xec>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80019cc:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <MX_TIM4_Init+0xec>)
 80019ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d4:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <MX_TIM4_Init+0xec>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019da:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <MX_TIM4_Init+0xec>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80019e0:	4828      	ldr	r0, [pc, #160]	; (8001a84 <MX_TIM4_Init+0xec>)
 80019e2:	f001 fe11 	bl	8003608 <HAL_TIM_PWM_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80019ec:	f000 f94e 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019f8:	f107 0320 	add.w	r3, r7, #32
 80019fc:	4619      	mov	r1, r3
 80019fe:	4821      	ldr	r0, [pc, #132]	; (8001a84 <MX_TIM4_Init+0xec>)
 8001a00:	f002 fb1a 	bl	8004038 <HAL_TIMEx_MasterConfigSynchronization>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001a0a:	f000 f93f 	bl	8001c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a0e:	2360      	movs	r3, #96	; 0x60
 8001a10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	2200      	movs	r2, #0
 8001a22:	4619      	mov	r1, r3
 8001a24:	4817      	ldr	r0, [pc, #92]	; (8001a84 <MX_TIM4_Init+0xec>)
 8001a26:	f001 fee1 	bl	80037ec <HAL_TIM_PWM_ConfigChannel>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001a30:	f000 f92c 	bl	8001c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	2204      	movs	r2, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4812      	ldr	r0, [pc, #72]	; (8001a84 <MX_TIM4_Init+0xec>)
 8001a3c:	f001 fed6 	bl	80037ec <HAL_TIM_PWM_ConfigChannel>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001a46:	f000 f921 	bl	8001c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2208      	movs	r2, #8
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480c      	ldr	r0, [pc, #48]	; (8001a84 <MX_TIM4_Init+0xec>)
 8001a52:	f001 fecb 	bl	80037ec <HAL_TIM_PWM_ConfigChannel>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001a5c:	f000 f916 	bl	8001c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	220c      	movs	r2, #12
 8001a64:	4619      	mov	r1, r3
 8001a66:	4807      	ldr	r0, [pc, #28]	; (8001a84 <MX_TIM4_Init+0xec>)
 8001a68:	f001 fec0 	bl	80037ec <HAL_TIM_PWM_ConfigChannel>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001a72:	f000 f90b 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a76:	4803      	ldr	r0, [pc, #12]	; (8001a84 <MX_TIM4_Init+0xec>)
 8001a78:	f000 f97c 	bl	8001d74 <HAL_TIM_MspPostInit>

}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	; 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000090 	.word	0x20000090
 8001a88:	40000800 	.word	0x40000800

08001a8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001a92:	4a12      	ldr	r2, [pc, #72]	; (8001adc <MX_USART1_UART_Init+0x50>)
 8001a94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001ac4:	f002 fb16 	bl	80040f4 <HAL_UART_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ace:	f000 f8dd 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200000d8 	.word	0x200000d8
 8001adc:	40013800 	.word	0x40013800

08001ae0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001ae6:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <MX_USART2_UART_Init+0x50>)
 8001ae8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b06:	220c      	movs	r2, #12
 8001b08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b16:	4805      	ldr	r0, [pc, #20]	; (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b18:	f002 faec 	bl	80040f4 <HAL_UART_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b22:	f000 f8b3 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000011c 	.word	0x2000011c
 8001b30:	40004400 	.word	0x40004400

08001b34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <MX_DMA_Init+0x48>)
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	4a0f      	ldr	r2, [pc, #60]	; (8001b7c <MX_DMA_Init+0x48>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6153      	str	r3, [r2, #20]
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <MX_DMA_Init+0x48>)
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	200f      	movs	r0, #15
 8001b58:	f000 fc01 	bl	800235e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b5c:	200f      	movs	r0, #15
 8001b5e:	f000 fc1a 	bl	8002396 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	2010      	movs	r0, #16
 8001b68:	f000 fbf9 	bl	800235e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001b6c:	2010      	movs	r0, #16
 8001b6e:	f000 fc12 	bl	8002396 <HAL_NVIC_EnableIRQ>

}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000

08001b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b86:	f107 0310 	add.w	r3, r7, #16
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b94:	4b39      	ldr	r3, [pc, #228]	; (8001c7c <MX_GPIO_Init+0xfc>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	4a38      	ldr	r2, [pc, #224]	; (8001c7c <MX_GPIO_Init+0xfc>)
 8001b9a:	f043 0310 	orr.w	r3, r3, #16
 8001b9e:	6193      	str	r3, [r2, #24]
 8001ba0:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <MX_GPIO_Init+0xfc>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f003 0310 	and.w	r3, r3, #16
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bac:	4b33      	ldr	r3, [pc, #204]	; (8001c7c <MX_GPIO_Init+0xfc>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a32      	ldr	r2, [pc, #200]	; (8001c7c <MX_GPIO_Init+0xfc>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <MX_GPIO_Init+0xfc>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc4:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <MX_GPIO_Init+0xfc>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a2c      	ldr	r2, [pc, #176]	; (8001c7c <MX_GPIO_Init+0xfc>)
 8001bca:	f043 0308 	orr.w	r3, r3, #8
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <MX_GPIO_Init+0xfc>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001be2:	4827      	ldr	r0, [pc, #156]	; (8001c80 <MX_GPIO_Init+0x100>)
 8001be4:	f001 f82b 	bl	8002c3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|INA3_Pin
 8001be8:	2200      	movs	r2, #0
 8001bea:	f641 0170 	movw	r1, #6256	; 0x1870
 8001bee:	4825      	ldr	r0, [pc, #148]	; (8001c84 <MX_GPIO_Init+0x104>)
 8001bf0:	f001 f825 	bl	8002c3e <HAL_GPIO_WritePin>
                          |INB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INA2_Pin|INB2_Pin|INA1_Pin|INB1_Pin
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f24f 0138 	movw	r1, #61496	; 0xf038
 8001bfa:	4823      	ldr	r0, [pc, #140]	; (8001c88 <MX_GPIO_Init+0x108>)
 8001bfc:	f001 f81f 	bl	8002c3e <HAL_GPIO_WritePin>
                          |MOTORS_EN_Pin|INA4_Pin|INB4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001c00:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001c04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c06:	2301      	movs	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c12:	f107 0310 	add.w	r3, r7, #16
 8001c16:	4619      	mov	r1, r3
 8001c18:	4819      	ldr	r0, [pc, #100]	; (8001c80 <MX_GPIO_Init+0x100>)
 8001c1a:	f000 fe75 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 0310 	add.w	r3, r7, #16
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4814      	ldr	r0, [pc, #80]	; (8001c84 <MX_GPIO_Init+0x104>)
 8001c32:	f000 fe69 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 INA3_Pin
                           INB3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|INA3_Pin
 8001c36:	f641 0370 	movw	r3, #6256	; 0x1870
 8001c3a:	613b      	str	r3, [r7, #16]
                          |INB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2302      	movs	r3, #2
 8001c46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c48:	f107 0310 	add.w	r3, r7, #16
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480d      	ldr	r0, [pc, #52]	; (8001c84 <MX_GPIO_Init+0x104>)
 8001c50:	f000 fe5a 	bl	8002908 <HAL_GPIO_Init>

  /*Configure GPIO pins : INA2_Pin INB2_Pin INA1_Pin INB1_Pin
                           MOTORS_EN_Pin INA4_Pin INB4_Pin */
  GPIO_InitStruct.Pin = INA2_Pin|INB2_Pin|INA1_Pin|INB1_Pin
 8001c54:	f24f 0338 	movw	r3, #61496	; 0xf038
 8001c58:	613b      	str	r3, [r7, #16]
                          |MOTORS_EN_Pin|INA4_Pin|INB4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2302      	movs	r3, #2
 8001c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4806      	ldr	r0, [pc, #24]	; (8001c88 <MX_GPIO_Init+0x108>)
 8001c6e:	f000 fe4b 	bl	8002908 <HAL_GPIO_Init>

}
 8001c72:	bf00      	nop
 8001c74:	3720      	adds	r7, #32
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40011000 	.word	0x40011000
 8001c84:	40010800 	.word	0x40010800
 8001c88:	40010c00 	.word	0x40010c00

08001c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
}
 8001c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <Error_Handler+0x8>
	...

08001c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_MspInit+0x5c>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	4a14      	ldr	r2, [pc, #80]	; (8001cf4 <HAL_MspInit+0x5c>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6193      	str	r3, [r2, #24]
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_MspInit+0x5c>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_MspInit+0x5c>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <HAL_MspInit+0x5c>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	61d3      	str	r3, [r2, #28]
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_MspInit+0x5c>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_MspInit+0x60>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <HAL_MspInit+0x60>)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40010000 	.word	0x40010000

08001cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <HAL_TIM_Base_MspInit+0x34>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d10b      	bne.n	8001d26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_TIM_Base_MspInit+0x38>)
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_TIM_Base_MspInit+0x38>)
 8001d14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d18:	6193      	str	r3, [r2, #24]
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_TIM_Base_MspInit+0x38>)
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	40012c00 	.word	0x40012c00
 8001d34:	40021000 	.word	0x40021000

08001d38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a09      	ldr	r2, [pc, #36]	; (8001d6c <HAL_TIM_PWM_MspInit+0x34>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d10b      	bne.n	8001d62 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_TIM_PWM_MspInit+0x38>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	4a08      	ldr	r2, [pc, #32]	; (8001d70 <HAL_TIM_PWM_MspInit+0x38>)
 8001d50:	f043 0304 	orr.w	r3, r3, #4
 8001d54:	61d3      	str	r3, [r2, #28]
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_TIM_PWM_MspInit+0x38>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	40000800 	.word	0x40000800
 8001d70:	40021000 	.word	0x40021000

08001d74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <HAL_TIM_MspPostInit+0x5c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d118      	bne.n	8001dc6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <HAL_TIM_MspPostInit+0x60>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <HAL_TIM_MspPostInit+0x60>)
 8001d9a:	f043 0308 	orr.w	r3, r3, #8
 8001d9e:	6193      	str	r3, [r2, #24]
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <HAL_TIM_MspPostInit+0x60>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001dac:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001db0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2302      	movs	r3, #2
 8001db8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dba:	f107 0310 	add.w	r3, r7, #16
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <HAL_TIM_MspPostInit+0x64>)
 8001dc2:	f000 fda1 	bl	8002908 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3720      	adds	r7, #32
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40000800 	.word	0x40000800
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40010c00 	.word	0x40010c00

08001ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0318 	add.w	r3, r7, #24
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a65      	ldr	r2, [pc, #404]	; (8001f8c <HAL_UART_MspInit+0x1b0>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d160      	bne.n	8001ebe <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dfc:	4b64      	ldr	r3, [pc, #400]	; (8001f90 <HAL_UART_MspInit+0x1b4>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4a63      	ldr	r2, [pc, #396]	; (8001f90 <HAL_UART_MspInit+0x1b4>)
 8001e02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e06:	6193      	str	r3, [r2, #24]
 8001e08:	4b61      	ldr	r3, [pc, #388]	; (8001f90 <HAL_UART_MspInit+0x1b4>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	4b5e      	ldr	r3, [pc, #376]	; (8001f90 <HAL_UART_MspInit+0x1b4>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a5d      	ldr	r2, [pc, #372]	; (8001f90 <HAL_UART_MspInit+0x1b4>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b5b      	ldr	r3, [pc, #364]	; (8001f90 <HAL_UART_MspInit+0x1b4>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 0318 	add.w	r3, r7, #24
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4854      	ldr	r0, [pc, #336]	; (8001f94 <HAL_UART_MspInit+0x1b8>)
 8001e42:	f000 fd61 	bl	8002908 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f107 0318 	add.w	r3, r7, #24
 8001e58:	4619      	mov	r1, r3
 8001e5a:	484e      	ldr	r0, [pc, #312]	; (8001f94 <HAL_UART_MspInit+0x1b8>)
 8001e5c:	f000 fd54 	bl	8002908 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001e60:	4b4d      	ldr	r3, [pc, #308]	; (8001f98 <HAL_UART_MspInit+0x1bc>)
 8001e62:	4a4e      	ldr	r2, [pc, #312]	; (8001f9c <HAL_UART_MspInit+0x1c0>)
 8001e64:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e66:	4b4c      	ldr	r3, [pc, #304]	; (8001f98 <HAL_UART_MspInit+0x1bc>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e6c:	4b4a      	ldr	r3, [pc, #296]	; (8001f98 <HAL_UART_MspInit+0x1bc>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e72:	4b49      	ldr	r3, [pc, #292]	; (8001f98 <HAL_UART_MspInit+0x1bc>)
 8001e74:	2280      	movs	r2, #128	; 0x80
 8001e76:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e78:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <HAL_UART_MspInit+0x1bc>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e7e:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <HAL_UART_MspInit+0x1bc>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001e84:	4b44      	ldr	r3, [pc, #272]	; (8001f98 <HAL_UART_MspInit+0x1bc>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e8a:	4b43      	ldr	r3, [pc, #268]	; (8001f98 <HAL_UART_MspInit+0x1bc>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e90:	4841      	ldr	r0, [pc, #260]	; (8001f98 <HAL_UART_MspInit+0x1bc>)
 8001e92:	f000 fa9b 	bl	80023cc <HAL_DMA_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001e9c:	f7ff fef6 	bl	8001c8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a3d      	ldr	r2, [pc, #244]	; (8001f98 <HAL_UART_MspInit+0x1bc>)
 8001ea4:	639a      	str	r2, [r3, #56]	; 0x38
 8001ea6:	4a3c      	ldr	r2, [pc, #240]	; (8001f98 <HAL_UART_MspInit+0x1bc>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2100      	movs	r1, #0
 8001eb0:	2025      	movs	r0, #37	; 0x25
 8001eb2:	f000 fa54 	bl	800235e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001eb6:	2025      	movs	r0, #37	; 0x25
 8001eb8:	f000 fa6d 	bl	8002396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ebc:	e062      	b.n	8001f84 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a37      	ldr	r2, [pc, #220]	; (8001fa0 <HAL_UART_MspInit+0x1c4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d15d      	bne.n	8001f84 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ec8:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <HAL_UART_MspInit+0x1b4>)
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	4a30      	ldr	r2, [pc, #192]	; (8001f90 <HAL_UART_MspInit+0x1b4>)
 8001ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed2:	61d3      	str	r3, [r2, #28]
 8001ed4:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <HAL_UART_MspInit+0x1b4>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee0:	4b2b      	ldr	r3, [pc, #172]	; (8001f90 <HAL_UART_MspInit+0x1b4>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	4a2a      	ldr	r2, [pc, #168]	; (8001f90 <HAL_UART_MspInit+0x1b4>)
 8001ee6:	f043 0304 	orr.w	r3, r3, #4
 8001eea:	6193      	str	r3, [r2, #24]
 8001eec:	4b28      	ldr	r3, [pc, #160]	; (8001f90 <HAL_UART_MspInit+0x1b4>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ef8:	2304      	movs	r3, #4
 8001efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f00:	2303      	movs	r3, #3
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f04:	f107 0318 	add.w	r3, r7, #24
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4822      	ldr	r0, [pc, #136]	; (8001f94 <HAL_UART_MspInit+0x1b8>)
 8001f0c:	f000 fcfc 	bl	8002908 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f10:	2308      	movs	r3, #8
 8001f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1c:	f107 0318 	add.w	r3, r7, #24
 8001f20:	4619      	mov	r1, r3
 8001f22:	481c      	ldr	r0, [pc, #112]	; (8001f94 <HAL_UART_MspInit+0x1b8>)
 8001f24:	f000 fcf0 	bl	8002908 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001f28:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <HAL_UART_MspInit+0x1c8>)
 8001f2a:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <HAL_UART_MspInit+0x1cc>)
 8001f2c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f2e:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <HAL_UART_MspInit+0x1c8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f34:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <HAL_UART_MspInit+0x1c8>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_UART_MspInit+0x1c8>)
 8001f3c:	2280      	movs	r2, #128	; 0x80
 8001f3e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f40:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <HAL_UART_MspInit+0x1c8>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f46:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <HAL_UART_MspInit+0x1c8>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <HAL_UART_MspInit+0x1c8>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <HAL_UART_MspInit+0x1c8>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f58:	4812      	ldr	r0, [pc, #72]	; (8001fa4 <HAL_UART_MspInit+0x1c8>)
 8001f5a:	f000 fa37 	bl	80023cc <HAL_DMA_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8001f64:	f7ff fe92 	bl	8001c8c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <HAL_UART_MspInit+0x1c8>)
 8001f6c:	639a      	str	r2, [r3, #56]	; 0x38
 8001f6e:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <HAL_UART_MspInit+0x1c8>)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2100      	movs	r1, #0
 8001f78:	2026      	movs	r0, #38	; 0x26
 8001f7a:	f000 f9f0 	bl	800235e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f7e:	2026      	movs	r0, #38	; 0x26
 8001f80:	f000 fa09 	bl	8002396 <HAL_NVIC_EnableIRQ>
}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	; 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40013800 	.word	0x40013800
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40010800 	.word	0x40010800
 8001f98:	20000160 	.word	0x20000160
 8001f9c:	40020058 	.word	0x40020058
 8001fa0:	40004400 	.word	0x40004400
 8001fa4:	200001a4 	.word	0x200001a4
 8001fa8:	4002006c 	.word	0x4002006c

08001fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <NMI_Handler+0x4>

08001fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb6:	e7fe      	b.n	8001fb6 <HardFault_Handler+0x4>

08001fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <MemManage_Handler+0x4>

08001fbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <BusFault_Handler+0x4>

08001fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <UsageFault_Handler+0x4>

08001fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff2:	f000 f89d 	bl	8002130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <DMA1_Channel5_IRQHandler+0x10>)
 8002002:	f000 fb4d 	bl	80026a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000160 	.word	0x20000160

08002010 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002014:	4802      	ldr	r0, [pc, #8]	; (8002020 <DMA1_Channel6_IRQHandler+0x10>)
 8002016:	f000 fb43 	bl	80026a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200001a4 	.word	0x200001a4

08002024 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002028:	4802      	ldr	r0, [pc, #8]	; (8002034 <USART1_IRQHandler+0x10>)
 800202a:	f002 f991 	bl	8004350 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200000d8 	.word	0x200000d8

08002038 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <USART2_IRQHandler+0x10>)
 800203e:	f002 f987 	bl	8004350 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	2000011c 	.word	0x2000011c

0800204c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002058:	480c      	ldr	r0, [pc, #48]	; (800208c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800205a:	490d      	ldr	r1, [pc, #52]	; (8002090 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800205c:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800205e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002060:	e002      	b.n	8002068 <LoopCopyDataInit>

08002062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002066:	3304      	adds	r3, #4

08002068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800206a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800206c:	d3f9      	bcc.n	8002062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002070:	4c0a      	ldr	r4, [pc, #40]	; (800209c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002074:	e001      	b.n	800207a <LoopFillZerobss>

08002076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002078:	3204      	adds	r2, #4

0800207a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800207a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800207c:	d3fb      	bcc.n	8002076 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800207e:	f7ff ffe5 	bl	800204c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002082:	f002 fe85 	bl	8004d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002086:	f7ff fa8f 	bl	80015a8 <main>
  bx lr
 800208a:	4770      	bx	lr
  ldr r0, =_sdata
 800208c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002090:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8002094:	08004e30 	.word	0x08004e30
  ldr r2, =_sbss
 8002098:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800209c:	20000240 	.word	0x20000240

080020a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020a0:	e7fe      	b.n	80020a0 <ADC1_2_IRQHandler>
	...

080020a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <HAL_Init+0x28>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a07      	ldr	r2, [pc, #28]	; (80020cc <HAL_Init+0x28>)
 80020ae:	f043 0310 	orr.w	r3, r3, #16
 80020b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b4:	2003      	movs	r0, #3
 80020b6:	f000 f947 	bl	8002348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ba:	200f      	movs	r0, #15
 80020bc:	f000 f808 	bl	80020d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c0:	f7ff fdea 	bl	8001c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40022000 	.word	0x40022000

080020d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_InitTick+0x54>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_InitTick+0x58>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	4619      	mov	r1, r3
 80020e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f95f 	bl	80023b2 <HAL_SYSTICK_Config>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00e      	b.n	800211c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b0f      	cmp	r3, #15
 8002102:	d80a      	bhi.n	800211a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002104:	2200      	movs	r2, #0
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	f04f 30ff 	mov.w	r0, #4294967295
 800210c:	f000 f927 	bl	800235e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002110:	4a06      	ldr	r2, [pc, #24]	; (800212c <HAL_InitTick+0x5c>)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	e000      	b.n	800211c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000020 	.word	0x20000020
 8002128:	20000028 	.word	0x20000028
 800212c:	20000024 	.word	0x20000024

08002130 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_IncTick+0x1c>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_IncTick+0x20>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4413      	add	r3, r2
 8002140:	4a03      	ldr	r2, [pc, #12]	; (8002150 <HAL_IncTick+0x20>)
 8002142:	6013      	str	r3, [r2, #0]
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	20000028 	.word	0x20000028
 8002150:	2000023c 	.word	0x2000023c

08002154 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return uwTick;
 8002158:	4b02      	ldr	r3, [pc, #8]	; (8002164 <HAL_GetTick+0x10>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	2000023c 	.word	0x2000023c

08002168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002170:	f7ff fff0 	bl	8002154 <HAL_GetTick>
 8002174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002180:	d005      	beq.n	800218e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_Delay+0x44>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800218e:	bf00      	nop
 8002190:	f7ff ffe0 	bl	8002154 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	429a      	cmp	r2, r3
 800219e:	d8f7      	bhi.n	8002190 <HAL_Delay+0x28>
  {
  }
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000028 	.word	0x20000028

080021b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021cc:	4013      	ands	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e2:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	60d3      	str	r3, [r2, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <__NVIC_GetPriorityGrouping+0x18>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	f003 0307 	and.w	r3, r3, #7
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	2b00      	cmp	r3, #0
 8002224:	db0b      	blt.n	800223e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	f003 021f 	and.w	r2, r3, #31
 800222c:	4906      	ldr	r1, [pc, #24]	; (8002248 <__NVIC_EnableIRQ+0x34>)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	2001      	movs	r0, #1
 8002236:	fa00 f202 	lsl.w	r2, r0, r2
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr
 8002248:	e000e100 	.word	0xe000e100

0800224c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225c:	2b00      	cmp	r3, #0
 800225e:	db0a      	blt.n	8002276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	b2da      	uxtb	r2, r3
 8002264:	490c      	ldr	r1, [pc, #48]	; (8002298 <__NVIC_SetPriority+0x4c>)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	0112      	lsls	r2, r2, #4
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	440b      	add	r3, r1
 8002270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002274:	e00a      	b.n	800228c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4908      	ldr	r1, [pc, #32]	; (800229c <__NVIC_SetPriority+0x50>)
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	3b04      	subs	r3, #4
 8002284:	0112      	lsls	r2, r2, #4
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	440b      	add	r3, r1
 800228a:	761a      	strb	r2, [r3, #24]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000e100 	.word	0xe000e100
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f1c3 0307 	rsb	r3, r3, #7
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	bf28      	it	cs
 80022be:	2304      	movcs	r3, #4
 80022c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3304      	adds	r3, #4
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d902      	bls.n	80022d0 <NVIC_EncodePriority+0x30>
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3b03      	subs	r3, #3
 80022ce:	e000      	b.n	80022d2 <NVIC_EncodePriority+0x32>
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43da      	mvns	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	401a      	ands	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	43d9      	mvns	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	4313      	orrs	r3, r2
         );
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3724      	adds	r7, #36	; 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3b01      	subs	r3, #1
 8002310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002314:	d301      	bcc.n	800231a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002316:	2301      	movs	r3, #1
 8002318:	e00f      	b.n	800233a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <SysTick_Config+0x40>)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002322:	210f      	movs	r1, #15
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
 8002328:	f7ff ff90 	bl	800224c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <SysTick_Config+0x40>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002332:	4b04      	ldr	r3, [pc, #16]	; (8002344 <SysTick_Config+0x40>)
 8002334:	2207      	movs	r2, #7
 8002336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	e000e010 	.word	0xe000e010

08002348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff ff2d 	bl	80021b0 <__NVIC_SetPriorityGrouping>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002370:	f7ff ff42 	bl	80021f8 <__NVIC_GetPriorityGrouping>
 8002374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	6978      	ldr	r0, [r7, #20]
 800237c:	f7ff ff90 	bl	80022a0 <NVIC_EncodePriority>
 8002380:	4602      	mov	r2, r0
 8002382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff5f 	bl	800224c <__NVIC_SetPriority>
}
 800238e:	bf00      	nop
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff35 	bl	8002214 <__NVIC_EnableIRQ>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ffa2 	bl	8002304 <SysTick_Config>
 80023c0:	4603      	mov	r3, r0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e043      	b.n	800246a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	4b22      	ldr	r3, [pc, #136]	; (8002474 <HAL_DMA_Init+0xa8>)
 80023ea:	4413      	add	r3, r2
 80023ec:	4a22      	ldr	r2, [pc, #136]	; (8002478 <HAL_DMA_Init+0xac>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	009a      	lsls	r2, r3, #2
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a1f      	ldr	r2, [pc, #124]	; (800247c <HAL_DMA_Init+0xb0>)
 80023fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002416:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800241a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002424:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002430:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4313      	orrs	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	bffdfff8 	.word	0xbffdfff8
 8002478:	cccccccd 	.word	0xcccccccd
 800247c:	40020000 	.word	0x40020000

08002480 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_DMA_Start_IT+0x20>
 800249c:	2302      	movs	r3, #2
 800249e:	e04a      	b.n	8002536 <HAL_DMA_Start_IT+0xb6>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d13a      	bne.n	8002528 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2202      	movs	r2, #2
 80024b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f9e8 	bl	80028ac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 020e 	orr.w	r2, r2, #14
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e00f      	b.n	8002516 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0204 	bic.w	r2, r2, #4
 8002504:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 020a 	orr.w	r2, r2, #10
 8002514:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0201 	orr.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e005      	b.n	8002534 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002530:	2302      	movs	r3, #2
 8002532:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002534:	7dfb      	ldrb	r3, [r7, #23]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800253e:	b480      	push	{r7}
 8002540:	b085      	sub	sp, #20
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002550:	2b02      	cmp	r3, #2
 8002552:	d008      	beq.n	8002566 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2204      	movs	r2, #4
 8002558:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e020      	b.n	80025a8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 020e 	bic.w	r2, r2, #14
 8002574:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0201 	bic.w	r2, r2, #1
 8002584:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258e:	2101      	movs	r1, #1
 8002590:	fa01 f202 	lsl.w	r2, r1, r2
 8002594:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
	...

080025b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d005      	beq.n	80025d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2204      	movs	r2, #4
 80025ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e051      	b.n	800267a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 020e 	bic.w	r2, r2, #14
 80025e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0201 	bic.w	r2, r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a22      	ldr	r2, [pc, #136]	; (8002684 <HAL_DMA_Abort_IT+0xd0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d029      	beq.n	8002654 <HAL_DMA_Abort_IT+0xa0>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a20      	ldr	r2, [pc, #128]	; (8002688 <HAL_DMA_Abort_IT+0xd4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d022      	beq.n	8002650 <HAL_DMA_Abort_IT+0x9c>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1f      	ldr	r2, [pc, #124]	; (800268c <HAL_DMA_Abort_IT+0xd8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d01a      	beq.n	800264a <HAL_DMA_Abort_IT+0x96>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1d      	ldr	r2, [pc, #116]	; (8002690 <HAL_DMA_Abort_IT+0xdc>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d012      	beq.n	8002644 <HAL_DMA_Abort_IT+0x90>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1c      	ldr	r2, [pc, #112]	; (8002694 <HAL_DMA_Abort_IT+0xe0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00a      	beq.n	800263e <HAL_DMA_Abort_IT+0x8a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1a      	ldr	r2, [pc, #104]	; (8002698 <HAL_DMA_Abort_IT+0xe4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d102      	bne.n	8002638 <HAL_DMA_Abort_IT+0x84>
 8002632:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002636:	e00e      	b.n	8002656 <HAL_DMA_Abort_IT+0xa2>
 8002638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800263c:	e00b      	b.n	8002656 <HAL_DMA_Abort_IT+0xa2>
 800263e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002642:	e008      	b.n	8002656 <HAL_DMA_Abort_IT+0xa2>
 8002644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002648:	e005      	b.n	8002656 <HAL_DMA_Abort_IT+0xa2>
 800264a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800264e:	e002      	b.n	8002656 <HAL_DMA_Abort_IT+0xa2>
 8002650:	2310      	movs	r3, #16
 8002652:	e000      	b.n	8002656 <HAL_DMA_Abort_IT+0xa2>
 8002654:	2301      	movs	r3, #1
 8002656:	4a11      	ldr	r2, [pc, #68]	; (800269c <HAL_DMA_Abort_IT+0xe8>)
 8002658:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	4798      	blx	r3
    } 
  }
  return status;
 800267a:	7bfb      	ldrb	r3, [r7, #15]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40020008 	.word	0x40020008
 8002688:	4002001c 	.word	0x4002001c
 800268c:	40020030 	.word	0x40020030
 8002690:	40020044 	.word	0x40020044
 8002694:	40020058 	.word	0x40020058
 8002698:	4002006c 	.word	0x4002006c
 800269c:	40020000 	.word	0x40020000

080026a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	2204      	movs	r2, #4
 80026be:	409a      	lsls	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d04f      	beq.n	8002768 <HAL_DMA_IRQHandler+0xc8>
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d04a      	beq.n	8002768 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d107      	bne.n	80026f0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0204 	bic.w	r2, r2, #4
 80026ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a66      	ldr	r2, [pc, #408]	; (8002890 <HAL_DMA_IRQHandler+0x1f0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d029      	beq.n	800274e <HAL_DMA_IRQHandler+0xae>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a65      	ldr	r2, [pc, #404]	; (8002894 <HAL_DMA_IRQHandler+0x1f4>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d022      	beq.n	800274a <HAL_DMA_IRQHandler+0xaa>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a63      	ldr	r2, [pc, #396]	; (8002898 <HAL_DMA_IRQHandler+0x1f8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d01a      	beq.n	8002744 <HAL_DMA_IRQHandler+0xa4>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a62      	ldr	r2, [pc, #392]	; (800289c <HAL_DMA_IRQHandler+0x1fc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d012      	beq.n	800273e <HAL_DMA_IRQHandler+0x9e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a60      	ldr	r2, [pc, #384]	; (80028a0 <HAL_DMA_IRQHandler+0x200>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00a      	beq.n	8002738 <HAL_DMA_IRQHandler+0x98>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a5f      	ldr	r2, [pc, #380]	; (80028a4 <HAL_DMA_IRQHandler+0x204>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d102      	bne.n	8002732 <HAL_DMA_IRQHandler+0x92>
 800272c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002730:	e00e      	b.n	8002750 <HAL_DMA_IRQHandler+0xb0>
 8002732:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002736:	e00b      	b.n	8002750 <HAL_DMA_IRQHandler+0xb0>
 8002738:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800273c:	e008      	b.n	8002750 <HAL_DMA_IRQHandler+0xb0>
 800273e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002742:	e005      	b.n	8002750 <HAL_DMA_IRQHandler+0xb0>
 8002744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002748:	e002      	b.n	8002750 <HAL_DMA_IRQHandler+0xb0>
 800274a:	2340      	movs	r3, #64	; 0x40
 800274c:	e000      	b.n	8002750 <HAL_DMA_IRQHandler+0xb0>
 800274e:	2304      	movs	r3, #4
 8002750:	4a55      	ldr	r2, [pc, #340]	; (80028a8 <HAL_DMA_IRQHandler+0x208>)
 8002752:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 8094 	beq.w	8002886 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002766:	e08e      	b.n	8002886 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	2202      	movs	r2, #2
 800276e:	409a      	lsls	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d056      	beq.n	8002826 <HAL_DMA_IRQHandler+0x186>
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d051      	beq.n	8002826 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10b      	bne.n	80027a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 020a 	bic.w	r2, r2, #10
 800279e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a38      	ldr	r2, [pc, #224]	; (8002890 <HAL_DMA_IRQHandler+0x1f0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d029      	beq.n	8002806 <HAL_DMA_IRQHandler+0x166>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a37      	ldr	r2, [pc, #220]	; (8002894 <HAL_DMA_IRQHandler+0x1f4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d022      	beq.n	8002802 <HAL_DMA_IRQHandler+0x162>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a35      	ldr	r2, [pc, #212]	; (8002898 <HAL_DMA_IRQHandler+0x1f8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01a      	beq.n	80027fc <HAL_DMA_IRQHandler+0x15c>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a34      	ldr	r2, [pc, #208]	; (800289c <HAL_DMA_IRQHandler+0x1fc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d012      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x156>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a32      	ldr	r2, [pc, #200]	; (80028a0 <HAL_DMA_IRQHandler+0x200>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00a      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x150>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a31      	ldr	r2, [pc, #196]	; (80028a4 <HAL_DMA_IRQHandler+0x204>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d102      	bne.n	80027ea <HAL_DMA_IRQHandler+0x14a>
 80027e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027e8:	e00e      	b.n	8002808 <HAL_DMA_IRQHandler+0x168>
 80027ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ee:	e00b      	b.n	8002808 <HAL_DMA_IRQHandler+0x168>
 80027f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f4:	e008      	b.n	8002808 <HAL_DMA_IRQHandler+0x168>
 80027f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027fa:	e005      	b.n	8002808 <HAL_DMA_IRQHandler+0x168>
 80027fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002800:	e002      	b.n	8002808 <HAL_DMA_IRQHandler+0x168>
 8002802:	2320      	movs	r3, #32
 8002804:	e000      	b.n	8002808 <HAL_DMA_IRQHandler+0x168>
 8002806:	2302      	movs	r3, #2
 8002808:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <HAL_DMA_IRQHandler+0x208>)
 800280a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	2b00      	cmp	r3, #0
 800281a:	d034      	beq.n	8002886 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002824:	e02f      	b.n	8002886 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	2208      	movs	r2, #8
 800282c:	409a      	lsls	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4013      	ands	r3, r2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d028      	beq.n	8002888 <HAL_DMA_IRQHandler+0x1e8>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d023      	beq.n	8002888 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 020e 	bic.w	r2, r2, #14
 800284e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002858:	2101      	movs	r1, #1
 800285a:	fa01 f202 	lsl.w	r2, r1, r2
 800285e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	2b00      	cmp	r3, #0
 800287c:	d004      	beq.n	8002888 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	4798      	blx	r3
    }
  }
  return;
 8002886:	bf00      	nop
 8002888:	bf00      	nop
}
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40020008 	.word	0x40020008
 8002894:	4002001c 	.word	0x4002001c
 8002898:	40020030 	.word	0x40020030
 800289c:	40020044 	.word	0x40020044
 80028a0:	40020058 	.word	0x40020058
 80028a4:	4002006c 	.word	0x4002006c
 80028a8:	40020000 	.word	0x40020000

080028ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c2:	2101      	movs	r1, #1
 80028c4:	fa01 f202 	lsl.w	r2, r1, r2
 80028c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d108      	bne.n	80028ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028ea:	e007      	b.n	80028fc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	60da      	str	r2, [r3, #12]
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
	...

08002908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002908:	b480      	push	{r7}
 800290a:	b08b      	sub	sp, #44	; 0x2c
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002916:	2300      	movs	r3, #0
 8002918:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800291a:	e169      	b.n	8002bf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800291c:	2201      	movs	r2, #1
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	69fa      	ldr	r2, [r7, #28]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	429a      	cmp	r2, r3
 8002936:	f040 8158 	bne.w	8002bea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4a9a      	ldr	r2, [pc, #616]	; (8002ba8 <HAL_GPIO_Init+0x2a0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d05e      	beq.n	8002a02 <HAL_GPIO_Init+0xfa>
 8002944:	4a98      	ldr	r2, [pc, #608]	; (8002ba8 <HAL_GPIO_Init+0x2a0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d875      	bhi.n	8002a36 <HAL_GPIO_Init+0x12e>
 800294a:	4a98      	ldr	r2, [pc, #608]	; (8002bac <HAL_GPIO_Init+0x2a4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d058      	beq.n	8002a02 <HAL_GPIO_Init+0xfa>
 8002950:	4a96      	ldr	r2, [pc, #600]	; (8002bac <HAL_GPIO_Init+0x2a4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d86f      	bhi.n	8002a36 <HAL_GPIO_Init+0x12e>
 8002956:	4a96      	ldr	r2, [pc, #600]	; (8002bb0 <HAL_GPIO_Init+0x2a8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d052      	beq.n	8002a02 <HAL_GPIO_Init+0xfa>
 800295c:	4a94      	ldr	r2, [pc, #592]	; (8002bb0 <HAL_GPIO_Init+0x2a8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d869      	bhi.n	8002a36 <HAL_GPIO_Init+0x12e>
 8002962:	4a94      	ldr	r2, [pc, #592]	; (8002bb4 <HAL_GPIO_Init+0x2ac>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d04c      	beq.n	8002a02 <HAL_GPIO_Init+0xfa>
 8002968:	4a92      	ldr	r2, [pc, #584]	; (8002bb4 <HAL_GPIO_Init+0x2ac>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d863      	bhi.n	8002a36 <HAL_GPIO_Init+0x12e>
 800296e:	4a92      	ldr	r2, [pc, #584]	; (8002bb8 <HAL_GPIO_Init+0x2b0>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d046      	beq.n	8002a02 <HAL_GPIO_Init+0xfa>
 8002974:	4a90      	ldr	r2, [pc, #576]	; (8002bb8 <HAL_GPIO_Init+0x2b0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d85d      	bhi.n	8002a36 <HAL_GPIO_Init+0x12e>
 800297a:	2b12      	cmp	r3, #18
 800297c:	d82a      	bhi.n	80029d4 <HAL_GPIO_Init+0xcc>
 800297e:	2b12      	cmp	r3, #18
 8002980:	d859      	bhi.n	8002a36 <HAL_GPIO_Init+0x12e>
 8002982:	a201      	add	r2, pc, #4	; (adr r2, 8002988 <HAL_GPIO_Init+0x80>)
 8002984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002988:	08002a03 	.word	0x08002a03
 800298c:	080029dd 	.word	0x080029dd
 8002990:	080029ef 	.word	0x080029ef
 8002994:	08002a31 	.word	0x08002a31
 8002998:	08002a37 	.word	0x08002a37
 800299c:	08002a37 	.word	0x08002a37
 80029a0:	08002a37 	.word	0x08002a37
 80029a4:	08002a37 	.word	0x08002a37
 80029a8:	08002a37 	.word	0x08002a37
 80029ac:	08002a37 	.word	0x08002a37
 80029b0:	08002a37 	.word	0x08002a37
 80029b4:	08002a37 	.word	0x08002a37
 80029b8:	08002a37 	.word	0x08002a37
 80029bc:	08002a37 	.word	0x08002a37
 80029c0:	08002a37 	.word	0x08002a37
 80029c4:	08002a37 	.word	0x08002a37
 80029c8:	08002a37 	.word	0x08002a37
 80029cc:	080029e5 	.word	0x080029e5
 80029d0:	080029f9 	.word	0x080029f9
 80029d4:	4a79      	ldr	r2, [pc, #484]	; (8002bbc <HAL_GPIO_Init+0x2b4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d013      	beq.n	8002a02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029da:	e02c      	b.n	8002a36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	623b      	str	r3, [r7, #32]
          break;
 80029e2:	e029      	b.n	8002a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	3304      	adds	r3, #4
 80029ea:	623b      	str	r3, [r7, #32]
          break;
 80029ec:	e024      	b.n	8002a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	3308      	adds	r3, #8
 80029f4:	623b      	str	r3, [r7, #32]
          break;
 80029f6:	e01f      	b.n	8002a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	330c      	adds	r3, #12
 80029fe:	623b      	str	r3, [r7, #32]
          break;
 8002a00:	e01a      	b.n	8002a38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d102      	bne.n	8002a10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	623b      	str	r3, [r7, #32]
          break;
 8002a0e:	e013      	b.n	8002a38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d105      	bne.n	8002a24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a18:	2308      	movs	r3, #8
 8002a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69fa      	ldr	r2, [r7, #28]
 8002a20:	611a      	str	r2, [r3, #16]
          break;
 8002a22:	e009      	b.n	8002a38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a24:	2308      	movs	r3, #8
 8002a26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	615a      	str	r2, [r3, #20]
          break;
 8002a2e:	e003      	b.n	8002a38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a30:	2300      	movs	r3, #0
 8002a32:	623b      	str	r3, [r7, #32]
          break;
 8002a34:	e000      	b.n	8002a38 <HAL_GPIO_Init+0x130>
          break;
 8002a36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2bff      	cmp	r3, #255	; 0xff
 8002a3c:	d801      	bhi.n	8002a42 <HAL_GPIO_Init+0x13a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	e001      	b.n	8002a46 <HAL_GPIO_Init+0x13e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3304      	adds	r3, #4
 8002a46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	2bff      	cmp	r3, #255	; 0xff
 8002a4c:	d802      	bhi.n	8002a54 <HAL_GPIO_Init+0x14c>
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	e002      	b.n	8002a5a <HAL_GPIO_Init+0x152>
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	3b08      	subs	r3, #8
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	210f      	movs	r1, #15
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	6a39      	ldr	r1, [r7, #32]
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	431a      	orrs	r2, r3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 80b1 	beq.w	8002bea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a88:	4b4d      	ldr	r3, [pc, #308]	; (8002bc0 <HAL_GPIO_Init+0x2b8>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	4a4c      	ldr	r2, [pc, #304]	; (8002bc0 <HAL_GPIO_Init+0x2b8>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6193      	str	r3, [r2, #24]
 8002a94:	4b4a      	ldr	r3, [pc, #296]	; (8002bc0 <HAL_GPIO_Init+0x2b8>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002aa0:	4a48      	ldr	r2, [pc, #288]	; (8002bc4 <HAL_GPIO_Init+0x2bc>)
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	220f      	movs	r2, #15
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a40      	ldr	r2, [pc, #256]	; (8002bc8 <HAL_GPIO_Init+0x2c0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d013      	beq.n	8002af4 <HAL_GPIO_Init+0x1ec>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a3f      	ldr	r2, [pc, #252]	; (8002bcc <HAL_GPIO_Init+0x2c4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00d      	beq.n	8002af0 <HAL_GPIO_Init+0x1e8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a3e      	ldr	r2, [pc, #248]	; (8002bd0 <HAL_GPIO_Init+0x2c8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d007      	beq.n	8002aec <HAL_GPIO_Init+0x1e4>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a3d      	ldr	r2, [pc, #244]	; (8002bd4 <HAL_GPIO_Init+0x2cc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d101      	bne.n	8002ae8 <HAL_GPIO_Init+0x1e0>
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e006      	b.n	8002af6 <HAL_GPIO_Init+0x1ee>
 8002ae8:	2304      	movs	r3, #4
 8002aea:	e004      	b.n	8002af6 <HAL_GPIO_Init+0x1ee>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e002      	b.n	8002af6 <HAL_GPIO_Init+0x1ee>
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <HAL_GPIO_Init+0x1ee>
 8002af4:	2300      	movs	r3, #0
 8002af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af8:	f002 0203 	and.w	r2, r2, #3
 8002afc:	0092      	lsls	r2, r2, #2
 8002afe:	4093      	lsls	r3, r2
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b06:	492f      	ldr	r1, [pc, #188]	; (8002bc4 <HAL_GPIO_Init+0x2bc>)
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d006      	beq.n	8002b2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b20:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <HAL_GPIO_Init+0x2d0>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	492c      	ldr	r1, [pc, #176]	; (8002bd8 <HAL_GPIO_Init+0x2d0>)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	600b      	str	r3, [r1, #0]
 8002b2c:	e006      	b.n	8002b3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b2e:	4b2a      	ldr	r3, [pc, #168]	; (8002bd8 <HAL_GPIO_Init+0x2d0>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	4928      	ldr	r1, [pc, #160]	; (8002bd8 <HAL_GPIO_Init+0x2d0>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d006      	beq.n	8002b56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b48:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <HAL_GPIO_Init+0x2d0>)
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	4922      	ldr	r1, [pc, #136]	; (8002bd8 <HAL_GPIO_Init+0x2d0>)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
 8002b54:	e006      	b.n	8002b64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <HAL_GPIO_Init+0x2d0>)
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	491e      	ldr	r1, [pc, #120]	; (8002bd8 <HAL_GPIO_Init+0x2d0>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d006      	beq.n	8002b7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b70:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <HAL_GPIO_Init+0x2d0>)
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	4918      	ldr	r1, [pc, #96]	; (8002bd8 <HAL_GPIO_Init+0x2d0>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	608b      	str	r3, [r1, #8]
 8002b7c:	e006      	b.n	8002b8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_GPIO_Init+0x2d0>)
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	4914      	ldr	r1, [pc, #80]	; (8002bd8 <HAL_GPIO_Init+0x2d0>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d021      	beq.n	8002bdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b98:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <HAL_GPIO_Init+0x2d0>)
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	490e      	ldr	r1, [pc, #56]	; (8002bd8 <HAL_GPIO_Init+0x2d0>)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60cb      	str	r3, [r1, #12]
 8002ba4:	e021      	b.n	8002bea <HAL_GPIO_Init+0x2e2>
 8002ba6:	bf00      	nop
 8002ba8:	10320000 	.word	0x10320000
 8002bac:	10310000 	.word	0x10310000
 8002bb0:	10220000 	.word	0x10220000
 8002bb4:	10210000 	.word	0x10210000
 8002bb8:	10120000 	.word	0x10120000
 8002bbc:	10110000 	.word	0x10110000
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40010000 	.word	0x40010000
 8002bc8:	40010800 	.word	0x40010800
 8002bcc:	40010c00 	.word	0x40010c00
 8002bd0:	40011000 	.word	0x40011000
 8002bd4:	40011400 	.word	0x40011400
 8002bd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_GPIO_Init+0x304>)
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	43db      	mvns	r3, r3
 8002be4:	4909      	ldr	r1, [pc, #36]	; (8002c0c <HAL_GPIO_Init+0x304>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	3301      	adds	r3, #1
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f47f ae8e 	bne.w	800291c <HAL_GPIO_Init+0x14>
  }
}
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop
 8002c04:	372c      	adds	r7, #44	; 0x2c
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	40010400 	.word	0x40010400

08002c10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	887b      	ldrh	r3, [r7, #2]
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
 8002c2c:	e001      	b.n	8002c32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	460b      	mov	r3, r1
 8002c48:	807b      	strh	r3, [r7, #2]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c4e:	787b      	ldrb	r3, [r7, #1]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c54:	887a      	ldrh	r2, [r7, #2]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c5a:	e003      	b.n	8002c64 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c5c:	887b      	ldrh	r3, [r7, #2]
 8002c5e:	041a      	lsls	r2, r3, #16
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	611a      	str	r2, [r3, #16]
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b085      	sub	sp, #20
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	460b      	mov	r3, r1
 8002c78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c80:	887a      	ldrh	r2, [r7, #2]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4013      	ands	r3, r2
 8002c86:	041a      	lsls	r2, r3, #16
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	43d9      	mvns	r1, r3
 8002c8c:	887b      	ldrh	r3, [r7, #2]
 8002c8e:	400b      	ands	r3, r1
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	611a      	str	r2, [r3, #16]
}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e272      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 8087 	beq.w	8002dce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cc0:	4b92      	ldr	r3, [pc, #584]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d00c      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ccc:	4b8f      	ldr	r3, [pc, #572]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d112      	bne.n	8002cfe <HAL_RCC_OscConfig+0x5e>
 8002cd8:	4b8c      	ldr	r3, [pc, #560]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce4:	d10b      	bne.n	8002cfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce6:	4b89      	ldr	r3, [pc, #548]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d06c      	beq.n	8002dcc <HAL_RCC_OscConfig+0x12c>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d168      	bne.n	8002dcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e24c      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d06:	d106      	bne.n	8002d16 <HAL_RCC_OscConfig+0x76>
 8002d08:	4b80      	ldr	r3, [pc, #512]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a7f      	ldr	r2, [pc, #508]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	e02e      	b.n	8002d74 <HAL_RCC_OscConfig+0xd4>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x98>
 8002d1e:	4b7b      	ldr	r3, [pc, #492]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a7a      	ldr	r2, [pc, #488]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b78      	ldr	r3, [pc, #480]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a77      	ldr	r2, [pc, #476]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e01d      	b.n	8002d74 <HAL_RCC_OscConfig+0xd4>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0xbc>
 8002d42:	4b72      	ldr	r3, [pc, #456]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a71      	ldr	r2, [pc, #452]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4b6f      	ldr	r3, [pc, #444]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6e      	ldr	r2, [pc, #440]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0xd4>
 8002d5c:	4b6b      	ldr	r3, [pc, #428]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a6a      	ldr	r2, [pc, #424]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	4b68      	ldr	r3, [pc, #416]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a67      	ldr	r2, [pc, #412]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7ff f9ea 	bl	8002154 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d84:	f7ff f9e6 	bl	8002154 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e200      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	4b5d      	ldr	r3, [pc, #372]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0xe4>
 8002da2:	e014      	b.n	8002dce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7ff f9d6 	bl	8002154 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dac:	f7ff f9d2 	bl	8002154 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e1ec      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dbe:	4b53      	ldr	r3, [pc, #332]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x10c>
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d063      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dda:	4b4c      	ldr	r3, [pc, #304]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00b      	beq.n	8002dfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002de6:	4b49      	ldr	r3, [pc, #292]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d11c      	bne.n	8002e2c <HAL_RCC_OscConfig+0x18c>
 8002df2:	4b46      	ldr	r3, [pc, #280]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d116      	bne.n	8002e2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfe:	4b43      	ldr	r3, [pc, #268]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <HAL_RCC_OscConfig+0x176>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d001      	beq.n	8002e16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e1c0      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e16:	4b3d      	ldr	r3, [pc, #244]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4939      	ldr	r1, [pc, #228]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2a:	e03a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d020      	beq.n	8002e76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e34:	4b36      	ldr	r3, [pc, #216]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7ff f98b 	bl	8002154 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e42:	f7ff f987 	bl	8002154 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e1a1      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e54:	4b2d      	ldr	r3, [pc, #180]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e60:	4b2a      	ldr	r3, [pc, #168]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4927      	ldr	r1, [pc, #156]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]
 8002e74:	e015      	b.n	8002ea2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e76:	4b26      	ldr	r3, [pc, #152]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7ff f96a 	bl	8002154 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e84:	f7ff f966 	bl	8002154 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e180      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e96:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d03a      	beq.n	8002f24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d019      	beq.n	8002eea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb6:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebc:	f7ff f94a 	bl	8002154 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec4:	f7ff f946 	bl	8002154 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e160      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	f000 fad8 	bl	8003498 <RCC_Delay>
 8002ee8:	e01c      	b.n	8002f24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef0:	f7ff f930 	bl	8002154 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef6:	e00f      	b.n	8002f18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef8:	f7ff f92c 	bl	8002154 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d908      	bls.n	8002f18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e146      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
 8002f0a:	bf00      	nop
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	42420000 	.word	0x42420000
 8002f14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f18:	4b92      	ldr	r3, [pc, #584]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e9      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80a6 	beq.w	800307e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f32:	2300      	movs	r3, #0
 8002f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f36:	4b8b      	ldr	r3, [pc, #556]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10d      	bne.n	8002f5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f42:	4b88      	ldr	r3, [pc, #544]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	4a87      	ldr	r2, [pc, #540]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	61d3      	str	r3, [r2, #28]
 8002f4e:	4b85      	ldr	r3, [pc, #532]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5e:	4b82      	ldr	r3, [pc, #520]	; (8003168 <HAL_RCC_OscConfig+0x4c8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d118      	bne.n	8002f9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f6a:	4b7f      	ldr	r3, [pc, #508]	; (8003168 <HAL_RCC_OscConfig+0x4c8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a7e      	ldr	r2, [pc, #504]	; (8003168 <HAL_RCC_OscConfig+0x4c8>)
 8002f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f76:	f7ff f8ed 	bl	8002154 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7e:	f7ff f8e9 	bl	8002154 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b64      	cmp	r3, #100	; 0x64
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e103      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f90:	4b75      	ldr	r3, [pc, #468]	; (8003168 <HAL_RCC_OscConfig+0x4c8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0f0      	beq.n	8002f7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d106      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x312>
 8002fa4:	4b6f      	ldr	r3, [pc, #444]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	4a6e      	ldr	r2, [pc, #440]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	6213      	str	r3, [r2, #32]
 8002fb0:	e02d      	b.n	800300e <HAL_RCC_OscConfig+0x36e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x334>
 8002fba:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	4a69      	ldr	r2, [pc, #420]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	6213      	str	r3, [r2, #32]
 8002fc6:	4b67      	ldr	r3, [pc, #412]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	4a66      	ldr	r2, [pc, #408]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	f023 0304 	bic.w	r3, r3, #4
 8002fd0:	6213      	str	r3, [r2, #32]
 8002fd2:	e01c      	b.n	800300e <HAL_RCC_OscConfig+0x36e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2b05      	cmp	r3, #5
 8002fda:	d10c      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x356>
 8002fdc:	4b61      	ldr	r3, [pc, #388]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	4a60      	ldr	r2, [pc, #384]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	f043 0304 	orr.w	r3, r3, #4
 8002fe6:	6213      	str	r3, [r2, #32]
 8002fe8:	4b5e      	ldr	r3, [pc, #376]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	4a5d      	ldr	r2, [pc, #372]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	6213      	str	r3, [r2, #32]
 8002ff4:	e00b      	b.n	800300e <HAL_RCC_OscConfig+0x36e>
 8002ff6:	4b5b      	ldr	r3, [pc, #364]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	4a5a      	ldr	r2, [pc, #360]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	6213      	str	r3, [r2, #32]
 8003002:	4b58      	ldr	r3, [pc, #352]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	4a57      	ldr	r2, [pc, #348]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	f023 0304 	bic.w	r3, r3, #4
 800300c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d015      	beq.n	8003042 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003016:	f7ff f89d 	bl	8002154 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301c:	e00a      	b.n	8003034 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301e:	f7ff f899 	bl	8002154 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	f241 3288 	movw	r2, #5000	; 0x1388
 800302c:	4293      	cmp	r3, r2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e0b1      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003034:	4b4b      	ldr	r3, [pc, #300]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ee      	beq.n	800301e <HAL_RCC_OscConfig+0x37e>
 8003040:	e014      	b.n	800306c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003042:	f7ff f887 	bl	8002154 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003048:	e00a      	b.n	8003060 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304a:	f7ff f883 	bl	8002154 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	f241 3288 	movw	r2, #5000	; 0x1388
 8003058:	4293      	cmp	r3, r2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e09b      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003060:	4b40      	ldr	r3, [pc, #256]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1ee      	bne.n	800304a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800306c:	7dfb      	ldrb	r3, [r7, #23]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d105      	bne.n	800307e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003072:	4b3c      	ldr	r3, [pc, #240]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	4a3b      	ldr	r2, [pc, #236]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800307c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 8087 	beq.w	8003196 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003088:	4b36      	ldr	r3, [pc, #216]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 030c 	and.w	r3, r3, #12
 8003090:	2b08      	cmp	r3, #8
 8003092:	d061      	beq.n	8003158 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d146      	bne.n	800312a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309c:	4b33      	ldr	r3, [pc, #204]	; (800316c <HAL_RCC_OscConfig+0x4cc>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a2:	f7ff f857 	bl	8002154 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030aa:	f7ff f853 	bl	8002154 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e06d      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030bc:	4b29      	ldr	r3, [pc, #164]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f0      	bne.n	80030aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d0:	d108      	bne.n	80030e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030d2:	4b24      	ldr	r3, [pc, #144]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	4921      	ldr	r1, [pc, #132]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e4:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a19      	ldr	r1, [r3, #32]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	430b      	orrs	r3, r1
 80030f6:	491b      	ldr	r1, [pc, #108]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030fc:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_RCC_OscConfig+0x4cc>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003102:	f7ff f827 	bl	8002154 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310a:	f7ff f823 	bl	8002154 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e03d      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x46a>
 8003128:	e035      	b.n	8003196 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <HAL_RCC_OscConfig+0x4cc>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7ff f810 	bl	8002154 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003138:	f7ff f80c 	bl	8002154 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e026      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800314a:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x498>
 8003156:	e01e      	b.n	8003196 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d107      	bne.n	8003170 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e019      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
 8003164:	40021000 	.word	0x40021000
 8003168:	40007000 	.word	0x40007000
 800316c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_RCC_OscConfig+0x500>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	429a      	cmp	r2, r3
 8003182:	d106      	bne.n	8003192 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318e:	429a      	cmp	r2, r3
 8003190:	d001      	beq.n	8003196 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000

080031a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0d0      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031b8:	4b6a      	ldr	r3, [pc, #424]	; (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d910      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b67      	ldr	r3, [pc, #412]	; (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 0207 	bic.w	r2, r3, #7
 80031ce:	4965      	ldr	r1, [pc, #404]	; (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b63      	ldr	r3, [pc, #396]	; (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0b8      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d020      	beq.n	8003236 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003200:	4b59      	ldr	r3, [pc, #356]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4a58      	ldr	r2, [pc, #352]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800320a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003218:	4b53      	ldr	r3, [pc, #332]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4a52      	ldr	r2, [pc, #328]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003222:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003224:	4b50      	ldr	r3, [pc, #320]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	494d      	ldr	r1, [pc, #308]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d040      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4b47      	ldr	r3, [pc, #284]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d115      	bne.n	8003282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e07f      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d107      	bne.n	8003272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003262:	4b41      	ldr	r3, [pc, #260]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e073      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003272:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e06b      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003282:	4b39      	ldr	r3, [pc, #228]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f023 0203 	bic.w	r2, r3, #3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4936      	ldr	r1, [pc, #216]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003294:	f7fe ff5e 	bl	8002154 <HAL_GetTick>
 8003298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800329c:	f7fe ff5a 	bl	8002154 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e053      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b2:	4b2d      	ldr	r3, [pc, #180]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 020c 	and.w	r2, r3, #12
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d1eb      	bne.n	800329c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032c4:	4b27      	ldr	r3, [pc, #156]	; (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d210      	bcs.n	80032f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	4b24      	ldr	r3, [pc, #144]	; (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 0207 	bic.w	r2, r3, #7
 80032da:	4922      	ldr	r1, [pc, #136]	; (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b20      	ldr	r3, [pc, #128]	; (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e032      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003300:	4b19      	ldr	r3, [pc, #100]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4916      	ldr	r1, [pc, #88]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	4313      	orrs	r3, r2
 8003310:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800331e:	4b12      	ldr	r3, [pc, #72]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	490e      	ldr	r1, [pc, #56]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 800332e:	4313      	orrs	r3, r2
 8003330:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003332:	f000 f821 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8003336:	4602      	mov	r2, r0
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	490a      	ldr	r1, [pc, #40]	; (800336c <HAL_RCC_ClockConfig+0x1c8>)
 8003344:	5ccb      	ldrb	r3, [r1, r3]
 8003346:	fa22 f303 	lsr.w	r3, r2, r3
 800334a:	4a09      	ldr	r2, [pc, #36]	; (8003370 <HAL_RCC_ClockConfig+0x1cc>)
 800334c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800334e:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCC_ClockConfig+0x1d0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe febc 	bl	80020d0 <HAL_InitTick>

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40022000 	.word	0x40022000
 8003368:	40021000 	.word	0x40021000
 800336c:	08004e10 	.word	0x08004e10
 8003370:	20000020 	.word	0x20000020
 8003374:	20000024 	.word	0x20000024

08003378 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003378:	b490      	push	{r4, r7}
 800337a:	b08a      	sub	sp, #40	; 0x28
 800337c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800337e:	4b29      	ldr	r3, [pc, #164]	; (8003424 <HAL_RCC_GetSysClockFreq+0xac>)
 8003380:	1d3c      	adds	r4, r7, #4
 8003382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003384:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003388:	f240 2301 	movw	r3, #513	; 0x201
 800338c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	2300      	movs	r3, #0
 8003394:	61bb      	str	r3, [r7, #24]
 8003396:	2300      	movs	r3, #0
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033a2:	4b21      	ldr	r3, [pc, #132]	; (8003428 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d002      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x40>
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d003      	beq.n	80033be <HAL_RCC_GetSysClockFreq+0x46>
 80033b6:	e02b      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033b8:	4b1c      	ldr	r3, [pc, #112]	; (800342c <HAL_RCC_GetSysClockFreq+0xb4>)
 80033ba:	623b      	str	r3, [r7, #32]
      break;
 80033bc:	e02b      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	0c9b      	lsrs	r3, r3, #18
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	3328      	adds	r3, #40	; 0x28
 80033c8:	443b      	add	r3, r7
 80033ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d012      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033da:	4b13      	ldr	r3, [pc, #76]	; (8003428 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	0c5b      	lsrs	r3, r3, #17
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	3328      	adds	r3, #40	; 0x28
 80033e6:	443b      	add	r3, r7
 80033e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	4a0e      	ldr	r2, [pc, #56]	; (800342c <HAL_RCC_GetSysClockFreq+0xb4>)
 80033f2:	fb03 f202 	mul.w	r2, r3, r2
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
 80033fe:	e004      	b.n	800340a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003404:	fb02 f303 	mul.w	r3, r2, r3
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	623b      	str	r3, [r7, #32]
      break;
 800340e:	e002      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003412:	623b      	str	r3, [r7, #32]
      break;
 8003414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003416:	6a3b      	ldr	r3, [r7, #32]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3728      	adds	r7, #40	; 0x28
 800341c:	46bd      	mov	sp, r7
 800341e:	bc90      	pop	{r4, r7}
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	08004e00 	.word	0x08004e00
 8003428:	40021000 	.word	0x40021000
 800342c:	007a1200 	.word	0x007a1200
 8003430:	003d0900 	.word	0x003d0900

08003434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003438:	4b02      	ldr	r3, [pc, #8]	; (8003444 <HAL_RCC_GetHCLKFreq+0x10>)
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr
 8003444:	20000020 	.word	0x20000020

08003448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800344c:	f7ff fff2 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8003450:	4602      	mov	r2, r0
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	4903      	ldr	r1, [pc, #12]	; (800346c <HAL_RCC_GetPCLK1Freq+0x24>)
 800345e:	5ccb      	ldrb	r3, [r1, r3]
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003464:	4618      	mov	r0, r3
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40021000 	.word	0x40021000
 800346c:	08004e20 	.word	0x08004e20

08003470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003474:	f7ff ffde 	bl	8003434 <HAL_RCC_GetHCLKFreq>
 8003478:	4602      	mov	r2, r0
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	0adb      	lsrs	r3, r3, #11
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	4903      	ldr	r1, [pc, #12]	; (8003494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003486:	5ccb      	ldrb	r3, [r1, r3]
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800348c:	4618      	mov	r0, r3
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40021000 	.word	0x40021000
 8003494:	08004e20 	.word	0x08004e20

08003498 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034a0:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <RCC_Delay+0x34>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a0a      	ldr	r2, [pc, #40]	; (80034d0 <RCC_Delay+0x38>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	0a5b      	lsrs	r3, r3, #9
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	fb02 f303 	mul.w	r3, r2, r3
 80034b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034b4:	bf00      	nop
  }
  while (Delay --);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1e5a      	subs	r2, r3, #1
 80034ba:	60fa      	str	r2, [r7, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f9      	bne.n	80034b4 <RCC_Delay+0x1c>
}
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr
 80034cc:	20000020 	.word	0x20000020
 80034d0:	10624dd3 	.word	0x10624dd3

080034d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e041      	b.n	800356a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fe fbfe 	bl	8001cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3304      	adds	r3, #4
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f000 faec 	bl	8003af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	d001      	beq.n	800358c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e032      	b.n	80035f2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a18      	ldr	r2, [pc, #96]	; (80035fc <HAL_TIM_Base_Start+0x88>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00e      	beq.n	80035bc <HAL_TIM_Base_Start+0x48>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a6:	d009      	beq.n	80035bc <HAL_TIM_Base_Start+0x48>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a14      	ldr	r2, [pc, #80]	; (8003600 <HAL_TIM_Base_Start+0x8c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d004      	beq.n	80035bc <HAL_TIM_Base_Start+0x48>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a13      	ldr	r2, [pc, #76]	; (8003604 <HAL_TIM_Base_Start+0x90>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d111      	bne.n	80035e0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b06      	cmp	r3, #6
 80035cc:	d010      	beq.n	80035f0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0201 	orr.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035de:	e007      	b.n	80035f0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0201 	orr.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	40012c00 	.word	0x40012c00
 8003600:	40000400 	.word	0x40000400
 8003604:	40000800 	.word	0x40000800

08003608 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e041      	b.n	800369e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fe fb82 	bl	8001d38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3304      	adds	r3, #4
 8003644:	4619      	mov	r1, r3
 8003646:	4610      	mov	r0, r2
 8003648:	f000 fa52 	bl	8003af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d109      	bne.n	80036cc <HAL_TIM_PWM_Start+0x24>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	bf14      	ite	ne
 80036c4:	2301      	movne	r3, #1
 80036c6:	2300      	moveq	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e022      	b.n	8003712 <HAL_TIM_PWM_Start+0x6a>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d109      	bne.n	80036e6 <HAL_TIM_PWM_Start+0x3e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b01      	cmp	r3, #1
 80036dc:	bf14      	ite	ne
 80036de:	2301      	movne	r3, #1
 80036e0:	2300      	moveq	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	e015      	b.n	8003712 <HAL_TIM_PWM_Start+0x6a>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d109      	bne.n	8003700 <HAL_TIM_PWM_Start+0x58>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	e008      	b.n	8003712 <HAL_TIM_PWM_Start+0x6a>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e05e      	b.n	80037d8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d104      	bne.n	800372a <HAL_TIM_PWM_Start+0x82>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003728:	e013      	b.n	8003752 <HAL_TIM_PWM_Start+0xaa>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d104      	bne.n	800373a <HAL_TIM_PWM_Start+0x92>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003738:	e00b      	b.n	8003752 <HAL_TIM_PWM_Start+0xaa>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b08      	cmp	r3, #8
 800373e:	d104      	bne.n	800374a <HAL_TIM_PWM_Start+0xa2>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003748:	e003      	b.n	8003752 <HAL_TIM_PWM_Start+0xaa>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2202      	movs	r2, #2
 800374e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2201      	movs	r2, #1
 8003758:	6839      	ldr	r1, [r7, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fc48 	bl	8003ff0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a1e      	ldr	r2, [pc, #120]	; (80037e0 <HAL_TIM_PWM_Start+0x138>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d107      	bne.n	800377a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003778:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a18      	ldr	r2, [pc, #96]	; (80037e0 <HAL_TIM_PWM_Start+0x138>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00e      	beq.n	80037a2 <HAL_TIM_PWM_Start+0xfa>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378c:	d009      	beq.n	80037a2 <HAL_TIM_PWM_Start+0xfa>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a14      	ldr	r2, [pc, #80]	; (80037e4 <HAL_TIM_PWM_Start+0x13c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d004      	beq.n	80037a2 <HAL_TIM_PWM_Start+0xfa>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a12      	ldr	r2, [pc, #72]	; (80037e8 <HAL_TIM_PWM_Start+0x140>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d111      	bne.n	80037c6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b06      	cmp	r3, #6
 80037b2:	d010      	beq.n	80037d6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c4:	e007      	b.n	80037d6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40012c00 	.word	0x40012c00
 80037e4:	40000400 	.word	0x40000400
 80037e8:	40000800 	.word	0x40000800

080037ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003802:	2302      	movs	r3, #2
 8003804:	e0ac      	b.n	8003960 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b0c      	cmp	r3, #12
 8003812:	f200 809f 	bhi.w	8003954 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003816:	a201      	add	r2, pc, #4	; (adr r2, 800381c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381c:	08003851 	.word	0x08003851
 8003820:	08003955 	.word	0x08003955
 8003824:	08003955 	.word	0x08003955
 8003828:	08003955 	.word	0x08003955
 800382c:	08003891 	.word	0x08003891
 8003830:	08003955 	.word	0x08003955
 8003834:	08003955 	.word	0x08003955
 8003838:	08003955 	.word	0x08003955
 800383c:	080038d3 	.word	0x080038d3
 8003840:	08003955 	.word	0x08003955
 8003844:	08003955 	.word	0x08003955
 8003848:	08003955 	.word	0x08003955
 800384c:	08003913 	.word	0x08003913
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	4618      	mov	r0, r3
 8003858:	f000 f9ac 	bl	8003bb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0208 	orr.w	r2, r2, #8
 800386a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699a      	ldr	r2, [r3, #24]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0204 	bic.w	r2, r2, #4
 800387a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6999      	ldr	r1, [r3, #24]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	619a      	str	r2, [r3, #24]
      break;
 800388e:	e062      	b.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f9f2 	bl	8003c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6999      	ldr	r1, [r3, #24]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	021a      	lsls	r2, r3, #8
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	619a      	str	r2, [r3, #24]
      break;
 80038d0:	e041      	b.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fa3b 	bl	8003d54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69da      	ldr	r2, [r3, #28]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0208 	orr.w	r2, r2, #8
 80038ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0204 	bic.w	r2, r2, #4
 80038fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69d9      	ldr	r1, [r3, #28]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	61da      	str	r2, [r3, #28]
      break;
 8003910:	e021      	b.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fa85 	bl	8003e28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69da      	ldr	r2, [r3, #28]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800392c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	69da      	ldr	r2, [r3, #28]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800393c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69d9      	ldr	r1, [r3, #28]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	021a      	lsls	r2, r3, #8
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	61da      	str	r2, [r3, #28]
      break;
 8003952:	e000      	b.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003954:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_TIM_ConfigClockSource+0x18>
 800397c:	2302      	movs	r3, #2
 800397e:	e0b3      	b.n	8003ae8 <HAL_TIM_ConfigClockSource+0x180>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800399e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b8:	d03e      	beq.n	8003a38 <HAL_TIM_ConfigClockSource+0xd0>
 80039ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039be:	f200 8087 	bhi.w	8003ad0 <HAL_TIM_ConfigClockSource+0x168>
 80039c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c6:	f000 8085 	beq.w	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80039ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ce:	d87f      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x168>
 80039d0:	2b70      	cmp	r3, #112	; 0x70
 80039d2:	d01a      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0xa2>
 80039d4:	2b70      	cmp	r3, #112	; 0x70
 80039d6:	d87b      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x168>
 80039d8:	2b60      	cmp	r3, #96	; 0x60
 80039da:	d050      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0x116>
 80039dc:	2b60      	cmp	r3, #96	; 0x60
 80039de:	d877      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x168>
 80039e0:	2b50      	cmp	r3, #80	; 0x50
 80039e2:	d03c      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0xf6>
 80039e4:	2b50      	cmp	r3, #80	; 0x50
 80039e6:	d873      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x168>
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d058      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x136>
 80039ec:	2b40      	cmp	r3, #64	; 0x40
 80039ee:	d86f      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x168>
 80039f0:	2b30      	cmp	r3, #48	; 0x30
 80039f2:	d064      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x156>
 80039f4:	2b30      	cmp	r3, #48	; 0x30
 80039f6:	d86b      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x168>
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d060      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x156>
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d867      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x168>
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d05c      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x156>
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	d05a      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003a08:	e062      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6899      	ldr	r1, [r3, #8]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f000 faca 	bl	8003fb2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	609a      	str	r2, [r3, #8]
      break;
 8003a36:	e04e      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6818      	ldr	r0, [r3, #0]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	6899      	ldr	r1, [r3, #8]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f000 fab3 	bl	8003fb2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a5a:	609a      	str	r2, [r3, #8]
      break;
 8003a5c:	e03b      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6859      	ldr	r1, [r3, #4]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f000 fa2a 	bl	8003ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2150      	movs	r1, #80	; 0x50
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fa81 	bl	8003f7e <TIM_ITRx_SetConfig>
      break;
 8003a7c:	e02b      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6859      	ldr	r1, [r3, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f000 fa48 	bl	8003f20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2160      	movs	r1, #96	; 0x60
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fa71 	bl	8003f7e <TIM_ITRx_SetConfig>
      break;
 8003a9c:	e01b      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6859      	ldr	r1, [r3, #4]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f000 fa0a 	bl	8003ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2140      	movs	r1, #64	; 0x40
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fa61 	bl	8003f7e <TIM_ITRx_SetConfig>
      break;
 8003abc:	e00b      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4610      	mov	r0, r2
 8003aca:	f000 fa58 	bl	8003f7e <TIM_ITRx_SetConfig>
        break;
 8003ace:	e002      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ad0:	bf00      	nop
 8003ad2:	e000      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ad4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a29      	ldr	r2, [pc, #164]	; (8003ba8 <TIM_Base_SetConfig+0xb8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00b      	beq.n	8003b20 <TIM_Base_SetConfig+0x30>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b0e:	d007      	beq.n	8003b20 <TIM_Base_SetConfig+0x30>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a26      	ldr	r2, [pc, #152]	; (8003bac <TIM_Base_SetConfig+0xbc>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_Base_SetConfig+0x30>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a25      	ldr	r2, [pc, #148]	; (8003bb0 <TIM_Base_SetConfig+0xc0>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d108      	bne.n	8003b32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a1c      	ldr	r2, [pc, #112]	; (8003ba8 <TIM_Base_SetConfig+0xb8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00b      	beq.n	8003b52 <TIM_Base_SetConfig+0x62>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b40:	d007      	beq.n	8003b52 <TIM_Base_SetConfig+0x62>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a19      	ldr	r2, [pc, #100]	; (8003bac <TIM_Base_SetConfig+0xbc>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d003      	beq.n	8003b52 <TIM_Base_SetConfig+0x62>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <TIM_Base_SetConfig+0xc0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d108      	bne.n	8003b64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a07      	ldr	r2, [pc, #28]	; (8003ba8 <TIM_Base_SetConfig+0xb8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d103      	bne.n	8003b98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	615a      	str	r2, [r3, #20]
}
 8003b9e:	bf00      	nop
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr
 8003ba8:	40012c00 	.word	0x40012c00
 8003bac:	40000400 	.word	0x40000400
 8003bb0:	40000800 	.word	0x40000800

08003bb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	f023 0201 	bic.w	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0303 	bic.w	r3, r3, #3
 8003bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f023 0302 	bic.w	r3, r3, #2
 8003bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a1c      	ldr	r2, [pc, #112]	; (8003c7c <TIM_OC1_SetConfig+0xc8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d10c      	bne.n	8003c2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f023 0308 	bic.w	r3, r3, #8
 8003c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f023 0304 	bic.w	r3, r3, #4
 8003c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a13      	ldr	r2, [pc, #76]	; (8003c7c <TIM_OC1_SetConfig+0xc8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d111      	bne.n	8003c56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	621a      	str	r2, [r3, #32]
}
 8003c70:	bf00      	nop
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40012c00 	.word	0x40012c00

08003c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f023 0210 	bic.w	r2, r3, #16
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f023 0320 	bic.w	r3, r3, #32
 8003cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <TIM_OC2_SetConfig+0xd0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d10d      	bne.n	8003cfc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a14      	ldr	r2, [pc, #80]	; (8003d50 <TIM_OC2_SetConfig+0xd0>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d113      	bne.n	8003d2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	621a      	str	r2, [r3, #32]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr
 8003d50:	40012c00 	.word	0x40012c00

08003d54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0303 	bic.w	r3, r3, #3
 8003d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <TIM_OC3_SetConfig+0xd0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d10d      	bne.n	8003dce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003db8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a14      	ldr	r2, [pc, #80]	; (8003e24 <TIM_OC3_SetConfig+0xd0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d113      	bne.n	8003dfe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	621a      	str	r2, [r3, #32]
}
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40012c00 	.word	0x40012c00

08003e28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	031b      	lsls	r3, r3, #12
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a0f      	ldr	r2, [pc, #60]	; (8003ec0 <TIM_OC4_SetConfig+0x98>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d109      	bne.n	8003e9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	019b      	lsls	r3, r3, #6
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	621a      	str	r2, [r3, #32]
}
 8003eb6:	bf00      	nop
 8003eb8:	371c      	adds	r7, #28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr
 8003ec0:	40012c00 	.word	0x40012c00

08003ec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	f023 0201 	bic.w	r2, r3, #1
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f023 030a 	bic.w	r3, r3, #10
 8003f00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	621a      	str	r2, [r3, #32]
}
 8003f16:	bf00      	nop
 8003f18:	371c      	adds	r7, #28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr

08003f20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	f023 0210 	bic.w	r2, r3, #16
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	031b      	lsls	r3, r3, #12
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	621a      	str	r2, [r3, #32]
}
 8003f74:	bf00      	nop
 8003f76:	371c      	adds	r7, #28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr

08003f7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f043 0307 	orr.w	r3, r3, #7
 8003fa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	609a      	str	r2, [r3, #8]
}
 8003fa8:	bf00      	nop
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr

08003fb2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b087      	sub	sp, #28
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	607a      	str	r2, [r7, #4]
 8003fbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	021a      	lsls	r2, r3, #8
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	609a      	str	r2, [r3, #8]
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr

08003ff0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	2201      	movs	r2, #1
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a1a      	ldr	r2, [r3, #32]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	43db      	mvns	r3, r3
 8004012:	401a      	ands	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a1a      	ldr	r2, [r3, #32]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	fa01 f303 	lsl.w	r3, r1, r3
 8004028:	431a      	orrs	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	621a      	str	r2, [r3, #32]
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800404c:	2302      	movs	r3, #2
 800404e:	e046      	b.n	80040de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004076:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a16      	ldr	r2, [pc, #88]	; (80040e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00e      	beq.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409c:	d009      	beq.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a12      	ldr	r2, [pc, #72]	; (80040ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a10      	ldr	r2, [pc, #64]	; (80040f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d10c      	bne.n	80040cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr
 80040e8:	40012c00 	.word	0x40012c00
 80040ec:	40000400 	.word	0x40000400
 80040f0:	40000800 	.word	0x40000800

080040f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e03f      	b.n	8004186 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fd fe5e 	bl	8001ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2224      	movs	r2, #36	; 0x24
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fd9b 	bl	8004c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800414c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800415c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800416c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b08a      	sub	sp, #40	; 0x28
 8004192:	af02      	add	r7, sp, #8
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	603b      	str	r3, [r7, #0]
 800419a:	4613      	mov	r3, r2
 800419c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d17c      	bne.n	80042a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_UART_Transmit+0x2c>
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e075      	b.n	80042aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_UART_Transmit+0x3e>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e06e      	b.n	80042aa <HAL_UART_Transmit+0x11c>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2221      	movs	r2, #33	; 0x21
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041e2:	f7fd ffb7 	bl	8002154 <HAL_GetTick>
 80041e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	88fa      	ldrh	r2, [r7, #6]
 80041ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	88fa      	ldrh	r2, [r7, #6]
 80041f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fc:	d108      	bne.n	8004210 <HAL_UART_Transmit+0x82>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d104      	bne.n	8004210 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004206:	2300      	movs	r3, #0
 8004208:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	e003      	b.n	8004218 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004214:	2300      	movs	r3, #0
 8004216:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004220:	e02a      	b.n	8004278 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2200      	movs	r2, #0
 800422a:	2180      	movs	r1, #128	; 0x80
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 fb0d 	bl	800484c <UART_WaitOnFlagUntilTimeout>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e036      	b.n	80042aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10b      	bne.n	800425a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004250:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	3302      	adds	r3, #2
 8004256:	61bb      	str	r3, [r7, #24]
 8004258:	e007      	b.n	800426a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	781a      	ldrb	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	3301      	adds	r3, #1
 8004268:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1cf      	bne.n	8004222 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2200      	movs	r2, #0
 800428a:	2140      	movs	r1, #64	; 0x40
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 fadd 	bl	800484c <UART_WaitOnFlagUntilTimeout>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e006      	b.n	80042aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	e000      	b.n	80042aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042a8:	2302      	movs	r3, #2
  }
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3720      	adds	r7, #32
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b086      	sub	sp, #24
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	4613      	mov	r3, r2
 80042be:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d13c      	bne.n	8004346 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e035      	b.n	8004348 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e02e      	b.n	8004348 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80042f8:	88fb      	ldrh	r3, [r7, #6]
 80042fa:	461a      	mov	r2, r3
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 faee 	bl	80048e0 <UART_Start_Receive_DMA>
 8004304:	4603      	mov	r3, r0
 8004306:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004308:	7dfb      	ldrb	r3, [r7, #23]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d119      	bne.n	8004342 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	2b01      	cmp	r3, #1
 8004314:	d113      	bne.n	800433e <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004316:	2300      	movs	r3, #0
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0210 	orr.w	r2, r2, #16
 800433a:	60da      	str	r2, [r3, #12]
 800433c:	e001      	b.n	8004342 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8004342:	7dfb      	ldrb	r3, [r7, #23]
 8004344:	e000      	b.n	8004348 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8004346:	2302      	movs	r3, #2
  }
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08a      	sub	sp, #40	; 0x28
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004370:	2300      	movs	r3, #0
 8004372:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10d      	bne.n	80043a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	2b00      	cmp	r3, #0
 800438e:	d008      	beq.n	80043a2 <HAL_UART_IRQHandler+0x52>
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fbc0 	bl	8004b20 <UART_Receive_IT>
      return;
 80043a0:	e17b      	b.n	800469a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 80b1 	beq.w	800450c <HAL_UART_IRQHandler+0x1bc>
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <HAL_UART_IRQHandler+0x70>
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 80a6 	beq.w	800450c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <HAL_UART_IRQHandler+0x90>
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d005      	beq.n	80043e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	f043 0201 	orr.w	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_UART_IRQHandler+0xb0>
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	f043 0202 	orr.w	r2, r3, #2
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_UART_IRQHandler+0xd0>
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	f043 0204 	orr.w	r2, r3, #4
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00f      	beq.n	800444a <HAL_UART_IRQHandler+0xfa>
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b00      	cmp	r3, #0
 8004432:	d104      	bne.n	800443e <HAL_UART_IRQHandler+0xee>
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f043 0208 	orr.w	r2, r3, #8
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 811e 	beq.w	8004690 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <HAL_UART_IRQHandler+0x11e>
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fb59 	bl	8004b20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b00      	cmp	r3, #0
 800447a:	bf14      	ite	ne
 800447c:	2301      	movne	r3, #1
 800447e:	2300      	moveq	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b00      	cmp	r3, #0
 800448e:	d102      	bne.n	8004496 <HAL_UART_IRQHandler+0x146>
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d031      	beq.n	80044fa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fa9b 	bl	80049d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d023      	beq.n	80044f2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695a      	ldr	r2, [r3, #20]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d013      	beq.n	80044ea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	4a76      	ldr	r2, [pc, #472]	; (80046a0 <HAL_UART_IRQHandler+0x350>)
 80044c8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe f870 	bl	80025b4 <HAL_DMA_Abort_IT>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d016      	beq.n	8004508 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044e4:	4610      	mov	r0, r2
 80044e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e8:	e00e      	b.n	8004508 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f8f5 	bl	80046da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f0:	e00a      	b.n	8004508 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f8f1 	bl	80046da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f8:	e006      	b.n	8004508 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f8ed 	bl	80046da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004506:	e0c3      	b.n	8004690 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004508:	bf00      	nop
    return;
 800450a:	e0c1      	b.n	8004690 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	2b01      	cmp	r3, #1
 8004512:	f040 80a1 	bne.w	8004658 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 809b 	beq.w	8004658 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8095 	beq.w	8004658 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d04e      	beq.n	80045f0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800455c:	8a3b      	ldrh	r3, [r7, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 8098 	beq.w	8004694 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004568:	8a3a      	ldrh	r2, [r7, #16]
 800456a:	429a      	cmp	r2, r3
 800456c:	f080 8092 	bcs.w	8004694 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8a3a      	ldrh	r2, [r7, #16]
 8004574:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	2b20      	cmp	r3, #32
 800457e:	d02b      	beq.n	80045d8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800458e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695a      	ldr	r2, [r3, #20]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0201 	bic.w	r2, r2, #1
 800459e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695a      	ldr	r2, [r3, #20]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0210 	bic.w	r2, r2, #16
 80045cc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fd ffb3 	bl	800253e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	4619      	mov	r1, r3
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7fc fd9f 	bl	800112c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80045ee:	e051      	b.n	8004694 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d047      	beq.n	8004698 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004608:	8a7b      	ldrh	r3, [r7, #18]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d044      	beq.n	8004698 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800461c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0201 	bic.w	r2, r2, #1
 800462c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0210 	bic.w	r2, r2, #16
 800464a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800464c:	8a7b      	ldrh	r3, [r7, #18]
 800464e:	4619      	mov	r1, r3
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7fc fd6b 	bl	800112c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004656:	e01f      	b.n	8004698 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465e:	2b00      	cmp	r3, #0
 8004660:	d008      	beq.n	8004674 <HAL_UART_IRQHandler+0x324>
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f9f0 	bl	8004a52 <UART_Transmit_IT>
    return;
 8004672:	e012      	b.n	800469a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00d      	beq.n	800469a <HAL_UART_IRQHandler+0x34a>
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 fa31 	bl	8004af0 <UART_EndTransmit_IT>
    return;
 800468e:	e004      	b.n	800469a <HAL_UART_IRQHandler+0x34a>
    return;
 8004690:	bf00      	nop
 8004692:	e002      	b.n	800469a <HAL_UART_IRQHandler+0x34a>
      return;
 8004694:	bf00      	nop
 8004696:	e000      	b.n	800469a <HAL_UART_IRQHandler+0x34a>
      return;
 8004698:	bf00      	nop
  }
}
 800469a:	3728      	adds	r7, #40	; 0x28
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	08004a2b 	.word	0x08004a2b

080046a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr

080046b6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr

080046c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr

080046da <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr

080046ec <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b00      	cmp	r3, #0
 8004706:	d12a      	bne.n	800475e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800471c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695a      	ldr	r2, [r3, #20]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0201 	bic.w	r2, r2, #1
 800472c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695a      	ldr	r2, [r3, #20]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800473c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	2b01      	cmp	r3, #1
 800474c:	d107      	bne.n	800475e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0210 	bic.w	r2, r2, #16
 800475c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	2b01      	cmp	r3, #1
 8004764:	d106      	bne.n	8004774 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800476a:	4619      	mov	r1, r3
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f7fc fcdd 	bl	800112c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004772:	e002      	b.n	800477a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f7ff ff9e 	bl	80046b6 <HAL_UART_RxCpltCallback>
}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	2b01      	cmp	r3, #1
 8004796:	d108      	bne.n	80047aa <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	b29b      	uxth	r3, r3
 80047a0:	4619      	mov	r1, r3
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f7fc fcc2 	bl	800112c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047a8:	e002      	b.n	80047b0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f7ff ff8c 	bl	80046c8 <HAL_UART_RxHalfCpltCallback>
}
 80047b0:	bf00      	nop
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bf14      	ite	ne
 80047d8:	2301      	movne	r3, #1
 80047da:	2300      	moveq	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b21      	cmp	r3, #33	; 0x21
 80047ea:	d108      	bne.n	80047fe <UART_DMAError+0x46>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d005      	beq.n	80047fe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2200      	movs	r2, #0
 80047f6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80047f8:	68b8      	ldr	r0, [r7, #8]
 80047fa:	f000 f8d5 	bl	80049a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf14      	ite	ne
 800480c:	2301      	movne	r3, #1
 800480e:	2300      	moveq	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b22      	cmp	r3, #34	; 0x22
 800481e:	d108      	bne.n	8004832 <UART_DMAError+0x7a>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2200      	movs	r2, #0
 800482a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800482c:	68b8      	ldr	r0, [r7, #8]
 800482e:	f000 f8d0 	bl	80049d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f043 0210 	orr.w	r2, r3, #16
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800483e:	68b8      	ldr	r0, [r7, #8]
 8004840:	f7ff ff4b 	bl	80046da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004844:	bf00      	nop
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	4613      	mov	r3, r2
 800485a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485c:	e02c      	b.n	80048b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004864:	d028      	beq.n	80048b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d007      	beq.n	800487c <UART_WaitOnFlagUntilTimeout+0x30>
 800486c:	f7fd fc72 	bl	8002154 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	429a      	cmp	r2, r3
 800487a:	d21d      	bcs.n	80048b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800488a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695a      	ldr	r2, [r3, #20]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0201 	bic.w	r2, r2, #1
 800489a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e00f      	b.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4013      	ands	r3, r2
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	bf0c      	ite	eq
 80048c8:	2301      	moveq	r3, #1
 80048ca:	2300      	movne	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	461a      	mov	r2, r3
 80048d0:	79fb      	ldrb	r3, [r7, #7]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d0c3      	beq.n	800485e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	4613      	mov	r3, r2
 80048ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	88fa      	ldrh	r2, [r7, #6]
 80048f8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2222      	movs	r2, #34	; 0x22
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	4a23      	ldr	r2, [pc, #140]	; (800499c <UART_Start_Receive_DMA+0xbc>)
 800490e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	4a22      	ldr	r2, [pc, #136]	; (80049a0 <UART_Start_Receive_DMA+0xc0>)
 8004916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491c:	4a21      	ldr	r2, [pc, #132]	; (80049a4 <UART_Start_Receive_DMA+0xc4>)
 800491e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004924:	2200      	movs	r2, #0
 8004926:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004928:	f107 0308 	add.w	r3, r7, #8
 800492c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3304      	adds	r3, #4
 8004938:	4619      	mov	r1, r3
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	88fb      	ldrh	r3, [r7, #6]
 8004940:	f7fd fd9e 	bl	8002480 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004944:	2300      	movs	r3, #0
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68da      	ldr	r2, [r3, #12]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004970:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695a      	ldr	r2, [r3, #20]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0201 	orr.w	r2, r2, #1
 8004980:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695a      	ldr	r2, [r3, #20]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004990:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	080046ed 	.word	0x080046ed
 80049a0:	08004783 	.word	0x08004783
 80049a4:	080047b9 	.word	0x080047b9

080049a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80049be:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr

080049d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049e8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695a      	ldr	r2, [r3, #20]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0201 	bic.w	r2, r2, #1
 80049f8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d107      	bne.n	8004a12 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68da      	ldr	r2, [r3, #12]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0210 	bic.w	r2, r2, #16
 8004a10:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bc80      	pop	{r7}
 8004a28:	4770      	bx	lr

08004a2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7ff fe48 	bl	80046da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a4a:	bf00      	nop
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b085      	sub	sp, #20
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b21      	cmp	r3, #33	; 0x21
 8004a64:	d13e      	bne.n	8004ae4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6e:	d114      	bne.n	8004a9a <UART_Transmit_IT+0x48>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d110      	bne.n	8004a9a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	1c9a      	adds	r2, r3, #2
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	621a      	str	r2, [r3, #32]
 8004a98:	e008      	b.n	8004aac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	1c59      	adds	r1, r3, #1
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6211      	str	r1, [r2, #32]
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10f      	bne.n	8004ae0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ace:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ade:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e000      	b.n	8004ae6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ae4:	2302      	movs	r3, #2
  }
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr

08004af0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff fdc7 	bl	80046a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b22      	cmp	r3, #34	; 0x22
 8004b32:	f040 8099 	bne.w	8004c68 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3e:	d117      	bne.n	8004b70 <UART_Receive_IT+0x50>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d113      	bne.n	8004b70 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b50:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b68:	1c9a      	adds	r2, r3, #2
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	629a      	str	r2, [r3, #40]	; 0x28
 8004b6e:	e026      	b.n	8004bbe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b82:	d007      	beq.n	8004b94 <UART_Receive_IT+0x74>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10a      	bne.n	8004ba2 <UART_Receive_IT+0x82>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d106      	bne.n	8004ba2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	e008      	b.n	8004bb4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	4619      	mov	r1, r3
 8004bcc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d148      	bne.n	8004c64 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0220 	bic.w	r2, r2, #32
 8004be0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bf0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695a      	ldr	r2, [r3, #20]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0201 	bic.w	r2, r2, #1
 8004c00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d123      	bne.n	8004c5a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0210 	bic.w	r2, r2, #16
 8004c26:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0310 	and.w	r3, r3, #16
 8004c32:	2b10      	cmp	r3, #16
 8004c34:	d10a      	bne.n	8004c4c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c50:	4619      	mov	r1, r3
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fc fa6a 	bl	800112c <HAL_UARTEx_RxEventCallback>
 8004c58:	e002      	b.n	8004c60 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff fd2b 	bl	80046b6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	e002      	b.n	8004c6a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	e000      	b.n	8004c6a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004c68:	2302      	movs	r3, #2
  }
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004cae:	f023 030c 	bic.w	r3, r3, #12
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6812      	ldr	r2, [r2, #0]
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a2c      	ldr	r2, [pc, #176]	; (8004d88 <UART_SetConfig+0x114>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d103      	bne.n	8004ce4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004cdc:	f7fe fbc8 	bl	8003470 <HAL_RCC_GetPCLK2Freq>
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	e002      	b.n	8004cea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ce4:	f7fe fbb0 	bl	8003448 <HAL_RCC_GetPCLK1Freq>
 8004ce8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4613      	mov	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009a      	lsls	r2, r3, #2
 8004cf4:	441a      	add	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d00:	4a22      	ldr	r2, [pc, #136]	; (8004d8c <UART_SetConfig+0x118>)
 8004d02:	fba2 2303 	umull	r2, r3, r2, r3
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	0119      	lsls	r1, r3, #4
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009a      	lsls	r2, r3, #2
 8004d14:	441a      	add	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d20:	4b1a      	ldr	r3, [pc, #104]	; (8004d8c <UART_SetConfig+0x118>)
 8004d22:	fba3 0302 	umull	r0, r3, r3, r2
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	2064      	movs	r0, #100	; 0x64
 8004d2a:	fb00 f303 	mul.w	r3, r0, r3
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	3332      	adds	r3, #50	; 0x32
 8004d34:	4a15      	ldr	r2, [pc, #84]	; (8004d8c <UART_SetConfig+0x118>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d40:	4419      	add	r1, r3
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	009a      	lsls	r2, r3, #2
 8004d4c:	441a      	add	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <UART_SetConfig+0x118>)
 8004d5a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	2064      	movs	r0, #100	; 0x64
 8004d62:	fb00 f303 	mul.w	r3, r0, r3
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	3332      	adds	r3, #50	; 0x32
 8004d6c:	4a07      	ldr	r2, [pc, #28]	; (8004d8c <UART_SetConfig+0x118>)
 8004d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	f003 020f 	and.w	r2, r3, #15
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	440a      	add	r2, r1
 8004d7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d80:	bf00      	nop
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40013800 	.word	0x40013800
 8004d8c:	51eb851f 	.word	0x51eb851f

08004d90 <__libc_init_array>:
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	2600      	movs	r6, #0
 8004d94:	4d0c      	ldr	r5, [pc, #48]	; (8004dc8 <__libc_init_array+0x38>)
 8004d96:	4c0d      	ldr	r4, [pc, #52]	; (8004dcc <__libc_init_array+0x3c>)
 8004d98:	1b64      	subs	r4, r4, r5
 8004d9a:	10a4      	asrs	r4, r4, #2
 8004d9c:	42a6      	cmp	r6, r4
 8004d9e:	d109      	bne.n	8004db4 <__libc_init_array+0x24>
 8004da0:	f000 f822 	bl	8004de8 <_init>
 8004da4:	2600      	movs	r6, #0
 8004da6:	4d0a      	ldr	r5, [pc, #40]	; (8004dd0 <__libc_init_array+0x40>)
 8004da8:	4c0a      	ldr	r4, [pc, #40]	; (8004dd4 <__libc_init_array+0x44>)
 8004daa:	1b64      	subs	r4, r4, r5
 8004dac:	10a4      	asrs	r4, r4, #2
 8004dae:	42a6      	cmp	r6, r4
 8004db0:	d105      	bne.n	8004dbe <__libc_init_array+0x2e>
 8004db2:	bd70      	pop	{r4, r5, r6, pc}
 8004db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db8:	4798      	blx	r3
 8004dba:	3601      	adds	r6, #1
 8004dbc:	e7ee      	b.n	8004d9c <__libc_init_array+0xc>
 8004dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dc2:	4798      	blx	r3
 8004dc4:	3601      	adds	r6, #1
 8004dc6:	e7f2      	b.n	8004dae <__libc_init_array+0x1e>
 8004dc8:	08004e28 	.word	0x08004e28
 8004dcc:	08004e28 	.word	0x08004e28
 8004dd0:	08004e28 	.word	0x08004e28
 8004dd4:	08004e2c 	.word	0x08004e2c

08004dd8 <memset>:
 8004dd8:	4603      	mov	r3, r0
 8004dda:	4402      	add	r2, r0
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d100      	bne.n	8004de2 <memset+0xa>
 8004de0:	4770      	bx	lr
 8004de2:	f803 1b01 	strb.w	r1, [r3], #1
 8004de6:	e7f9      	b.n	8004ddc <memset+0x4>

08004de8 <_init>:
 8004de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dea:	bf00      	nop
 8004dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dee:	bc08      	pop	{r3}
 8004df0:	469e      	mov	lr, r3
 8004df2:	4770      	bx	lr

08004df4 <_fini>:
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	bf00      	nop
 8004df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfa:	bc08      	pop	{r3}
 8004dfc:	469e      	mov	lr, r3
 8004dfe:	4770      	bx	lr
