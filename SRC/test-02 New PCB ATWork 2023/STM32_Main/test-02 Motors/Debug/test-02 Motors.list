
test-02 Motors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080043f4  080043f4  000143f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800441c  0800441c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  0800441c  0800441c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800441c  0800441c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800441c  0800441c  0001441c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004420  08004420  00014420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08004424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000028  0800444c  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  0800444c  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa8e  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad2  00000000  00000000  0002aadf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  0002c5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  0002d1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c2c  00000000  00000000  0002dda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c29d  00000000  00000000  000449cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000867d1  00000000  00000000  00050c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d743a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000346c  00000000  00000000  000d748c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	080043dc 	.word	0x080043dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	080043dc 	.word	0x080043dc

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <delay_us>:
uint8_t GY_Set_Command[] = {0xA5, 0x55};

uint32_t Last_Time = 0;
uint16_t oldPos=0, newPos=0;
void delay_us (uint16_t us)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	80fb      	strh	r3, [r7, #6]
//	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
//	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <initGY>:
	if(direction == 8)  motor(-v, -v,  v,  v);
	if(direction == 10) motor(-v,  0,  v,  0);
	if(direction == 12) motor(-v,  v,  v, -v);
	if(direction == 14) motor( 0,  v,  0, -v);
}
void initGY(){
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8000950:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000954:	f001 f8f6 	bl	8001b44 <HAL_Delay>
	HAL_UART_Transmit(&huart2, GY_A5, 1, PHY_FULLDUPLEX_10M);
 8000958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800095c:	2201      	movs	r2, #1
 800095e:	491a      	ldr	r1, [pc, #104]	; (80009c8 <initGY+0x7c>)
 8000960:	481a      	ldr	r0, [pc, #104]	; (80009cc <initGY+0x80>)
 8000962:	f002 ff0e 	bl	8003782 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, GY_54, 1, PHY_FULLDUPLEX_10M);
 8000966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096a:	2201      	movs	r2, #1
 800096c:	4918      	ldr	r1, [pc, #96]	; (80009d0 <initGY+0x84>)
 800096e:	4817      	ldr	r0, [pc, #92]	; (80009cc <initGY+0x80>)
 8000970:	f002 ff07 	bl	8003782 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000974:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000978:	f001 f8e4 	bl	8001b44 <HAL_Delay>
	HAL_UART_Transmit(&huart2, GY_A5, 1, PHY_FULLDUPLEX_10M);
 800097c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000980:	2201      	movs	r2, #1
 8000982:	4911      	ldr	r1, [pc, #68]	; (80009c8 <initGY+0x7c>)
 8000984:	4811      	ldr	r0, [pc, #68]	; (80009cc <initGY+0x80>)
 8000986:	f002 fefc 	bl	8003782 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, GY_51, 1, PHY_FULLDUPLEX_10M);
 800098a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800098e:	2201      	movs	r2, #1
 8000990:	4910      	ldr	r1, [pc, #64]	; (80009d4 <initGY+0x88>)
 8000992:	480e      	ldr	r0, [pc, #56]	; (80009cc <initGY+0x80>)
 8000994:	f002 fef5 	bl	8003782 <HAL_UART_Transmit>
	HAL_Delay(500);
 8000998:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800099c:	f001 f8d2 	bl	8001b44 <HAL_Delay>
	HAL_UART_Transmit(&huart2, GY_A5, 1, PHY_FULLDUPLEX_10M);
 80009a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a4:	2201      	movs	r2, #1
 80009a6:	4908      	ldr	r1, [pc, #32]	; (80009c8 <initGY+0x7c>)
 80009a8:	4808      	ldr	r0, [pc, #32]	; (80009cc <initGY+0x80>)
 80009aa:	f002 feea 	bl	8003782 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, GY_55, 1, PHY_FULLDUPLEX_10M);
 80009ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b2:	2201      	movs	r2, #1
 80009b4:	4908      	ldr	r1, [pc, #32]	; (80009d8 <initGY+0x8c>)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <initGY+0x80>)
 80009b8:	f002 fee3 	bl	8003782 <HAL_UART_Transmit>
	HAL_Delay(500);
 80009bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009c0:	f001 f8c0 	bl	8001b44 <HAL_Delay>
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000004 	.word	0x20000004
 80009cc:	20000118 	.word	0x20000118
 80009d0:	20000008 	.word	0x20000008
 80009d4:	2000000c 	.word	0x2000000c
 80009d8:	20000010 	.word	0x20000010

080009dc <delay>:
void delay(int t){
 80009dc:	b490      	push	{r4, r7}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	for(register int i=0; i<t; i++);
 80009e4:	2400      	movs	r4, #0
 80009e6:	e000      	b.n	80009ea <delay+0xe>
 80009e8:	3401      	adds	r4, #1
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	429c      	cmp	r4, r3
 80009ee:	dbfb      	blt.n	80009e8 <delay+0xc>
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc90      	pop	{r4, r7}
 80009fa:	4770      	bx	lr

080009fc <pinMode>:
void pinMode(int state){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0308 	add.w	r3, r7, #8
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
	if(state == 0) // INPUT
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d10e      	bne.n	8000a36 <pinMode+0x3a>
	{
		GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000a18:	2372      	movs	r3, #114	; 0x72
 8000a1a:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2302      	movs	r3, #2
 8000a26:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480c      	ldr	r0, [pc, #48]	; (8000a60 <pinMode+0x64>)
 8000a30:	f001 fc58 	bl	80022e4 <HAL_GPIO_Init>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	}
}
 8000a34:	e010      	b.n	8000a58 <pinMode+0x5c>
	else if(state == 1) // OUTPUT
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d10d      	bne.n	8000a58 <pinMode+0x5c>
		GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000a3c:	2372      	movs	r3, #114	; 0x72
 8000a3e:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	4619      	mov	r1, r3
 8000a52:	4803      	ldr	r0, [pc, #12]	; (8000a60 <pinMode+0x64>)
 8000a54:	f001 fc46 	bl	80022e4 <HAL_GPIO_Init>
}
 8000a58:	bf00      	nop
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40010800 	.word	0x40010800

08000a64 <getDistances>:
void getDistances(){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	pinMode(1);
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f7ff ffc7 	bl	80009fc <pinMode>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2102      	movs	r1, #2
 8000a72:	4864      	ldr	r0, [pc, #400]	; (8000c04 <getDistances+0x1a0>)
 8000a74:	f001 fdd1 	bl	800261a <HAL_GPIO_WritePin>
	delay_us(10);
 8000a78:	200a      	movs	r0, #10
 8000a7a:	f7ff ff5d 	bl	8000938 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2102      	movs	r1, #2
 8000a82:	4860      	ldr	r0, [pc, #384]	; (8000c04 <getDistances+0x1a0>)
 8000a84:	f001 fdc9 	bl	800261a <HAL_GPIO_WritePin>
	pinMode(0);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff ffb7 	bl	80009fc <pinMode>
	srf_cnt = 0;
 8000a8e:	4b5e      	ldr	r3, [pc, #376]	; (8000c08 <getDistances+0x1a4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0);
 8000a94:	bf00      	nop
 8000a96:	2102      	movs	r1, #2
 8000a98:	485a      	ldr	r0, [pc, #360]	; (8000c04 <getDistances+0x1a0>)
 8000a9a:	f001 fda7 	bl	80025ec <HAL_GPIO_ReadPin>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d0f8      	beq.n	8000a96 <getDistances+0x32>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1) srf_cnt++;
 8000aa4:	e004      	b.n	8000ab0 <getDistances+0x4c>
 8000aa6:	4b58      	ldr	r3, [pc, #352]	; (8000c08 <getDistances+0x1a4>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	4a56      	ldr	r2, [pc, #344]	; (8000c08 <getDistances+0x1a4>)
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	4854      	ldr	r0, [pc, #336]	; (8000c04 <getDistances+0x1a0>)
 8000ab4:	f001 fd9a 	bl	80025ec <HAL_GPIO_ReadPin>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d0f3      	beq.n	8000aa6 <getDistances+0x42>
	Front_Dist = srf_cnt/52;
 8000abe:	4b52      	ldr	r3, [pc, #328]	; (8000c08 <getDistances+0x1a4>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a52      	ldr	r2, [pc, #328]	; (8000c0c <getDistances+0x1a8>)
 8000ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac8:	091b      	lsrs	r3, r3, #4
 8000aca:	4a51      	ldr	r2, [pc, #324]	; (8000c10 <getDistances+0x1ac>)
 8000acc:	6013      	str	r3, [r2, #0]

	pinMode(1);
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f7ff ff94 	bl	80009fc <pinMode>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2110      	movs	r1, #16
 8000ad8:	484a      	ldr	r0, [pc, #296]	; (8000c04 <getDistances+0x1a0>)
 8000ada:	f001 fd9e 	bl	800261a <HAL_GPIO_WritePin>
	delay_us(10);
 8000ade:	200a      	movs	r0, #10
 8000ae0:	f7ff ff2a 	bl	8000938 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2110      	movs	r1, #16
 8000ae8:	4846      	ldr	r0, [pc, #280]	; (8000c04 <getDistances+0x1a0>)
 8000aea:	f001 fd96 	bl	800261a <HAL_GPIO_WritePin>
	pinMode(0);
 8000aee:	2000      	movs	r0, #0
 8000af0:	f7ff ff84 	bl	80009fc <pinMode>
	srf_cnt = 0;
 8000af4:	4b44      	ldr	r3, [pc, #272]	; (8000c08 <getDistances+0x1a4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0);
 8000afa:	bf00      	nop
 8000afc:	2110      	movs	r1, #16
 8000afe:	4841      	ldr	r0, [pc, #260]	; (8000c04 <getDistances+0x1a0>)
 8000b00:	f001 fd74 	bl	80025ec <HAL_GPIO_ReadPin>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d0f8      	beq.n	8000afc <getDistances+0x98>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 1) srf_cnt++;
 8000b0a:	e004      	b.n	8000b16 <getDistances+0xb2>
 8000b0c:	4b3e      	ldr	r3, [pc, #248]	; (8000c08 <getDistances+0x1a4>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	3301      	adds	r3, #1
 8000b12:	4a3d      	ldr	r2, [pc, #244]	; (8000c08 <getDistances+0x1a4>)
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	2110      	movs	r1, #16
 8000b18:	483a      	ldr	r0, [pc, #232]	; (8000c04 <getDistances+0x1a0>)
 8000b1a:	f001 fd67 	bl	80025ec <HAL_GPIO_ReadPin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d0f3      	beq.n	8000b0c <getDistances+0xa8>
	Right_Dist = srf_cnt/52;
 8000b24:	4b38      	ldr	r3, [pc, #224]	; (8000c08 <getDistances+0x1a4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a38      	ldr	r2, [pc, #224]	; (8000c0c <getDistances+0x1a8>)
 8000b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2e:	091b      	lsrs	r3, r3, #4
 8000b30:	4a38      	ldr	r2, [pc, #224]	; (8000c14 <getDistances+0x1b0>)
 8000b32:	6013      	str	r3, [r2, #0]

	pinMode(1);
 8000b34:	2001      	movs	r0, #1
 8000b36:	f7ff ff61 	bl	80009fc <pinMode>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2120      	movs	r1, #32
 8000b3e:	4831      	ldr	r0, [pc, #196]	; (8000c04 <getDistances+0x1a0>)
 8000b40:	f001 fd6b 	bl	800261a <HAL_GPIO_WritePin>
	delay_us(10);
 8000b44:	200a      	movs	r0, #10
 8000b46:	f7ff fef7 	bl	8000938 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	482d      	ldr	r0, [pc, #180]	; (8000c04 <getDistances+0x1a0>)
 8000b50:	f001 fd63 	bl	800261a <HAL_GPIO_WritePin>
	pinMode(0);
 8000b54:	2000      	movs	r0, #0
 8000b56:	f7ff ff51 	bl	80009fc <pinMode>
	srf_cnt = 0;
 8000b5a:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <getDistances+0x1a4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0);
 8000b60:	bf00      	nop
 8000b62:	2120      	movs	r1, #32
 8000b64:	4827      	ldr	r0, [pc, #156]	; (8000c04 <getDistances+0x1a0>)
 8000b66:	f001 fd41 	bl	80025ec <HAL_GPIO_ReadPin>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d0f8      	beq.n	8000b62 <getDistances+0xfe>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 1) srf_cnt++;
 8000b70:	e004      	b.n	8000b7c <getDistances+0x118>
 8000b72:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <getDistances+0x1a4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3301      	adds	r3, #1
 8000b78:	4a23      	ldr	r2, [pc, #140]	; (8000c08 <getDistances+0x1a4>)
 8000b7a:	6013      	str	r3, [r2, #0]
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	4821      	ldr	r0, [pc, #132]	; (8000c04 <getDistances+0x1a0>)
 8000b80:	f001 fd34 	bl	80025ec <HAL_GPIO_ReadPin>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d0f3      	beq.n	8000b72 <getDistances+0x10e>
	Back_Dist = srf_cnt/52;
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <getDistances+0x1a4>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a1f      	ldr	r2, [pc, #124]	; (8000c0c <getDistances+0x1a8>)
 8000b90:	fba2 2303 	umull	r2, r3, r2, r3
 8000b94:	091b      	lsrs	r3, r3, #4
 8000b96:	4a20      	ldr	r2, [pc, #128]	; (8000c18 <getDistances+0x1b4>)
 8000b98:	6013      	str	r3, [r2, #0]

	pinMode(1);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff ff2e 	bl	80009fc <pinMode>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2140      	movs	r1, #64	; 0x40
 8000ba4:	4817      	ldr	r0, [pc, #92]	; (8000c04 <getDistances+0x1a0>)
 8000ba6:	f001 fd38 	bl	800261a <HAL_GPIO_WritePin>
	delay_us(10);
 8000baa:	200a      	movs	r0, #10
 8000bac:	f7ff fec4 	bl	8000938 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2140      	movs	r1, #64	; 0x40
 8000bb4:	4813      	ldr	r0, [pc, #76]	; (8000c04 <getDistances+0x1a0>)
 8000bb6:	f001 fd30 	bl	800261a <HAL_GPIO_WritePin>
	pinMode(0);
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f7ff ff1e 	bl	80009fc <pinMode>
	srf_cnt = 0;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <getDistances+0x1a4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0);
 8000bc6:	bf00      	nop
 8000bc8:	2140      	movs	r1, #64	; 0x40
 8000bca:	480e      	ldr	r0, [pc, #56]	; (8000c04 <getDistances+0x1a0>)
 8000bcc:	f001 fd0e 	bl	80025ec <HAL_GPIO_ReadPin>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0f8      	beq.n	8000bc8 <getDistances+0x164>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) srf_cnt++;
 8000bd6:	e004      	b.n	8000be2 <getDistances+0x17e>
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <getDistances+0x1a4>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <getDistances+0x1a4>)
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	2140      	movs	r1, #64	; 0x40
 8000be4:	4807      	ldr	r0, [pc, #28]	; (8000c04 <getDistances+0x1a0>)
 8000be6:	f001 fd01 	bl	80025ec <HAL_GPIO_ReadPin>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d0f3      	beq.n	8000bd8 <getDistances+0x174>
	Left_Dist = srf_cnt/52;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <getDistances+0x1a4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <getDistances+0x1a8>)
 8000bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <getDistances+0x1b8>)
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40010800 	.word	0x40010800
 8000c08:	20000224 	.word	0x20000224
 8000c0c:	4ec4ec4f 	.word	0x4ec4ec4f
 8000c10:	20000214 	.word	0x20000214
 8000c14:	2000021c 	.word	0x2000021c
 8000c18:	20000218 	.word	0x20000218
 8000c1c:	20000220 	.word	0x20000220

08000c20 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1){
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a79      	ldr	r2, [pc, #484]	; (8000e18 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	f040 80e1 	bne.w	8000dfa <HAL_UARTEx_RxEventCallback+0x1da>
		RED_ON;
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c3e:	4877      	ldr	r0, [pc, #476]	; (8000e1c <HAL_UARTEx_RxEventCallback+0x1fc>)
 8000c40:	f001 fceb 	bl	800261a <HAL_GPIO_WritePin>
		if(Rx1_Buff[0] == 'M') {
 8000c44:	4b76      	ldr	r3, [pc, #472]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b4d      	cmp	r3, #77	; 0x4d
 8000c4a:	d13c      	bne.n	8000cc6 <HAL_UARTEx_RxEventCallback+0xa6>
		  if(Rx1_Buff[1]=='-') 	r1 =-(int)Rx1_Buff[2];
 8000c4c:	4b74      	ldr	r3, [pc, #464]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000c4e:	785b      	ldrb	r3, [r3, #1]
 8000c50:	2b2d      	cmp	r3, #45	; 0x2d
 8000c52:	d105      	bne.n	8000c60 <HAL_UARTEx_RxEventCallback+0x40>
 8000c54:	4b72      	ldr	r3, [pc, #456]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000c56:	789b      	ldrb	r3, [r3, #2]
 8000c58:	425b      	negs	r3, r3
 8000c5a:	4a72      	ldr	r2, [pc, #456]	; (8000e24 <HAL_UARTEx_RxEventCallback+0x204>)
 8000c5c:	6013      	str	r3, [r2, #0]
 8000c5e:	e004      	b.n	8000c6a <HAL_UARTEx_RxEventCallback+0x4a>
		  else  				r1 = (int)Rx1_Buff[2];
 8000c60:	4b6f      	ldr	r3, [pc, #444]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000c62:	789b      	ldrb	r3, [r3, #2]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b6f      	ldr	r3, [pc, #444]	; (8000e24 <HAL_UARTEx_RxEventCallback+0x204>)
 8000c68:	601a      	str	r2, [r3, #0]
		  ////////////////
		  if(Rx1_Buff[3]=='-') 	r2 =-(int)Rx1_Buff[4];
 8000c6a:	4b6d      	ldr	r3, [pc, #436]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000c6c:	78db      	ldrb	r3, [r3, #3]
 8000c6e:	2b2d      	cmp	r3, #45	; 0x2d
 8000c70:	d105      	bne.n	8000c7e <HAL_UARTEx_RxEventCallback+0x5e>
 8000c72:	4b6b      	ldr	r3, [pc, #428]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000c74:	791b      	ldrb	r3, [r3, #4]
 8000c76:	425b      	negs	r3, r3
 8000c78:	4a6b      	ldr	r2, [pc, #428]	; (8000e28 <HAL_UARTEx_RxEventCallback+0x208>)
 8000c7a:	6013      	str	r3, [r2, #0]
 8000c7c:	e004      	b.n	8000c88 <HAL_UARTEx_RxEventCallback+0x68>
		  else  				r2 = (int)Rx1_Buff[4];
 8000c7e:	4b68      	ldr	r3, [pc, #416]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000c80:	791b      	ldrb	r3, [r3, #4]
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b68      	ldr	r3, [pc, #416]	; (8000e28 <HAL_UARTEx_RxEventCallback+0x208>)
 8000c86:	601a      	str	r2, [r3, #0]
		  ////////////////
		  if(Rx1_Buff[5]=='-') 	l2 =-(int)Rx1_Buff[6];
 8000c88:	4b65      	ldr	r3, [pc, #404]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000c8a:	795b      	ldrb	r3, [r3, #5]
 8000c8c:	2b2d      	cmp	r3, #45	; 0x2d
 8000c8e:	d105      	bne.n	8000c9c <HAL_UARTEx_RxEventCallback+0x7c>
 8000c90:	4b63      	ldr	r3, [pc, #396]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000c92:	799b      	ldrb	r3, [r3, #6]
 8000c94:	425b      	negs	r3, r3
 8000c96:	4a65      	ldr	r2, [pc, #404]	; (8000e2c <HAL_UARTEx_RxEventCallback+0x20c>)
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	e004      	b.n	8000ca6 <HAL_UARTEx_RxEventCallback+0x86>
		  else  				l2 = (int)Rx1_Buff[6];
 8000c9c:	4b60      	ldr	r3, [pc, #384]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000c9e:	799b      	ldrb	r3, [r3, #6]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b62      	ldr	r3, [pc, #392]	; (8000e2c <HAL_UARTEx_RxEventCallback+0x20c>)
 8000ca4:	601a      	str	r2, [r3, #0]
		  ////////////////
		  if(Rx1_Buff[7]=='-') 	l1 =-(int)Rx1_Buff[8];
 8000ca6:	4b5e      	ldr	r3, [pc, #376]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000ca8:	79db      	ldrb	r3, [r3, #7]
 8000caa:	2b2d      	cmp	r3, #45	; 0x2d
 8000cac:	d105      	bne.n	8000cba <HAL_UARTEx_RxEventCallback+0x9a>
 8000cae:	4b5c      	ldr	r3, [pc, #368]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000cb0:	7a1b      	ldrb	r3, [r3, #8]
 8000cb2:	425b      	negs	r3, r3
 8000cb4:	4a5e      	ldr	r2, [pc, #376]	; (8000e30 <HAL_UARTEx_RxEventCallback+0x210>)
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	e08b      	b.n	8000dd2 <HAL_UARTEx_RxEventCallback+0x1b2>
		  else  				l1 = (int)Rx1_Buff[8];
 8000cba:	4b59      	ldr	r3, [pc, #356]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000cbc:	7a1b      	ldrb	r3, [r3, #8]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b5b      	ldr	r3, [pc, #364]	; (8000e30 <HAL_UARTEx_RxEventCallback+0x210>)
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	e085      	b.n	8000dd2 <HAL_UARTEx_RxEventCallback+0x1b2>
		}
		else if(Rx1_Buff[0] == 'S') {
 8000cc6:	4b56      	ldr	r3, [pc, #344]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b53      	cmp	r3, #83	; 0x53
 8000ccc:	d114      	bne.n	8000cf8 <HAL_UARTEx_RxEventCallback+0xd8>
			HAL_UART_Transmit(&huart2, GY_Set_Command, 2, PHY_FULLDUPLEX_10M);
 8000cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	4957      	ldr	r1, [pc, #348]	; (8000e34 <HAL_UARTEx_RxEventCallback+0x214>)
 8000cd6:	4858      	ldr	r0, [pc, #352]	; (8000e38 <HAL_UARTEx_RxEventCallback+0x218>)
 8000cd8:	f002 fd53 	bl	8003782 <HAL_UART_Transmit>
			delay(100000);
 8000cdc:	4857      	ldr	r0, [pc, #348]	; (8000e3c <HAL_UARTEx_RxEventCallback+0x21c>)
 8000cde:	f7ff fe7d 	bl	80009dc <delay>
			HAL_UART_Transmit(&huart2, GY_Set_Command, 2, PHY_FULLDUPLEX_10M);
 8000ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	4952      	ldr	r1, [pc, #328]	; (8000e34 <HAL_UARTEx_RxEventCallback+0x214>)
 8000cea:	4853      	ldr	r0, [pc, #332]	; (8000e38 <HAL_UARTEx_RxEventCallback+0x218>)
 8000cec:	f002 fd49 	bl	8003782 <HAL_UART_Transmit>
			delay(100000);
 8000cf0:	4852      	ldr	r0, [pc, #328]	; (8000e3c <HAL_UARTEx_RxEventCallback+0x21c>)
 8000cf2:	f7ff fe73 	bl	80009dc <delay>
 8000cf6:	e06c      	b.n	8000dd2 <HAL_UARTEx_RxEventCallback+0x1b2>
		}
		else if(Rx1_Buff[0] == 'C') {
 8000cf8:	4b49      	ldr	r3, [pc, #292]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b43      	cmp	r3, #67	; 0x43
 8000cfe:	d11d      	bne.n	8000d3c <HAL_UARTEx_RxEventCallback+0x11c>
			if(Rx1_Buff[1] == 'T'){
 8000d00:	4b47      	ldr	r3, [pc, #284]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000d02:	785b      	ldrb	r3, [r3, #1]
 8000d04:	2b54      	cmp	r3, #84	; 0x54
 8000d06:	d10a      	bne.n	8000d1e <HAL_UARTEx_RxEventCallback+0xfe>
				if(Correction_EN == 1) Correction_EN = 0;
 8000d08:	4b4d      	ldr	r3, [pc, #308]	; (8000e40 <HAL_UARTEx_RxEventCallback+0x220>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d103      	bne.n	8000d18 <HAL_UARTEx_RxEventCallback+0xf8>
 8000d10:	4b4b      	ldr	r3, [pc, #300]	; (8000e40 <HAL_UARTEx_RxEventCallback+0x220>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	e002      	b.n	8000d1e <HAL_UARTEx_RxEventCallback+0xfe>
				else				   Correction_EN = 1;
 8000d18:	4b49      	ldr	r3, [pc, #292]	; (8000e40 <HAL_UARTEx_RxEventCallback+0x220>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]
			}if(Rx1_Buff[1] == '1'){
 8000d1e:	4b40      	ldr	r3, [pc, #256]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000d20:	785b      	ldrb	r3, [r3, #1]
 8000d22:	2b31      	cmp	r3, #49	; 0x31
 8000d24:	d102      	bne.n	8000d2c <HAL_UARTEx_RxEventCallback+0x10c>
				Correction_EN = 1;
 8000d26:	4b46      	ldr	r3, [pc, #280]	; (8000e40 <HAL_UARTEx_RxEventCallback+0x220>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	601a      	str	r2, [r3, #0]
			}if(Rx1_Buff[1] == '0'){
 8000d2c:	4b3c      	ldr	r3, [pc, #240]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000d2e:	785b      	ldrb	r3, [r3, #1]
 8000d30:	2b30      	cmp	r3, #48	; 0x30
 8000d32:	d14e      	bne.n	8000dd2 <HAL_UARTEx_RxEventCallback+0x1b2>
				Correction_EN = 0;
 8000d34:	4b42      	ldr	r3, [pc, #264]	; (8000e40 <HAL_UARTEx_RxEventCallback+0x220>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	e04a      	b.n	8000dd2 <HAL_UARTEx_RxEventCallback+0x1b2>
			}
		}
		else if(Rx1_Buff[0] == 'D') {
 8000d3c:	4b38      	ldr	r3, [pc, #224]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b44      	cmp	r3, #68	; 0x44
 8000d42:	d13e      	bne.n	8000dc2 <HAL_UARTEx_RxEventCallback+0x1a2>
			if(Rx1_Buff[1] == 'A' && Rx1_Buff[2] == 'L' && Rx1_Buff[3] == 'L'){
 8000d44:	4b36      	ldr	r3, [pc, #216]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000d46:	785b      	ldrb	r3, [r3, #1]
 8000d48:	2b41      	cmp	r3, #65	; 0x41
 8000d4a:	d142      	bne.n	8000dd2 <HAL_UARTEx_RxEventCallback+0x1b2>
 8000d4c:	4b34      	ldr	r3, [pc, #208]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000d4e:	789b      	ldrb	r3, [r3, #2]
 8000d50:	2b4c      	cmp	r3, #76	; 0x4c
 8000d52:	d13e      	bne.n	8000dd2 <HAL_UARTEx_RxEventCallback+0x1b2>
 8000d54:	4b32      	ldr	r3, [pc, #200]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000d56:	78db      	ldrb	r3, [r3, #3]
 8000d58:	2b4c      	cmp	r3, #76	; 0x4c
 8000d5a:	d13a      	bne.n	8000dd2 <HAL_UARTEx_RxEventCallback+0x1b2>
				getDistances();
 8000d5c:	f7ff fe82 	bl	8000a64 <getDistances>
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 8000d60:	4b38      	ldr	r3, [pc, #224]	; (8000e44 <HAL_UARTEx_RxEventCallback+0x224>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	121b      	asrs	r3, r3, #8
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	733b      	strb	r3, [r7, #12]
 8000d6c:	4b35      	ldr	r3, [pc, #212]	; (8000e44 <HAL_UARTEx_RxEventCallback+0x224>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	737b      	strb	r3, [r7, #13]
									 (uint8_t) Right_Dist >> 8,(uint8_t) Right_Dist & 0xFF,
 8000d74:	4b34      	ldr	r3, [pc, #208]	; (8000e48 <HAL_UARTEx_RxEventCallback+0x228>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	121b      	asrs	r3, r3, #8
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	73bb      	strb	r3, [r7, #14]
									 (uint8_t) Right_Dist >> 8,(uint8_t) Right_Dist & 0xFF,
 8000d80:	4b31      	ldr	r3, [pc, #196]	; (8000e48 <HAL_UARTEx_RxEventCallback+0x228>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	b2db      	uxtb	r3, r3
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 8000d86:	73fb      	strb	r3, [r7, #15]
									 (uint8_t) Back_Dist  >> 8,(uint8_t) Back_Dist  & 0xFF,
 8000d88:	4b30      	ldr	r3, [pc, #192]	; (8000e4c <HAL_UARTEx_RxEventCallback+0x22c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	121b      	asrs	r3, r3, #8
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	743b      	strb	r3, [r7, #16]
									 (uint8_t) Back_Dist  >> 8,(uint8_t) Back_Dist  & 0xFF,
 8000d94:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <HAL_UARTEx_RxEventCallback+0x22c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	b2db      	uxtb	r3, r3
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 8000d9a:	747b      	strb	r3, [r7, #17]
									 (uint8_t) Left_Dist  >> 8,(uint8_t) Left_Dist  & 0xFF};
 8000d9c:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <HAL_UARTEx_RxEventCallback+0x230>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	121b      	asrs	r3, r3, #8
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	74bb      	strb	r3, [r7, #18]
									 (uint8_t) Left_Dist  >> 8,(uint8_t) Left_Dist  & 0xFF};
 8000da8:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <HAL_UARTEx_RxEventCallback+0x230>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	b2db      	uxtb	r3, r3
				uint8_t tx_data[] = {(uint8_t) Front_Dist >> 8,(uint8_t) Front_Dist & 0xFF,
 8000dae:	74fb      	strb	r3, [r7, #19]
				HAL_UART_Transmit(&huart1, tx_data, 8, PHY_FULLDUPLEX_10M);
 8000db0:	f107 010c 	add.w	r1, r7, #12
 8000db4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db8:	2208      	movs	r2, #8
 8000dba:	4826      	ldr	r0, [pc, #152]	; (8000e54 <HAL_UARTEx_RxEventCallback+0x234>)
 8000dbc:	f002 fce1 	bl	8003782 <HAL_UART_Transmit>
 8000dc0:	e007      	b.n	8000dd2 <HAL_UARTEx_RxEventCallback+0x1b2>
			}
		}
		else if(Rx1_Buff[0] == 'P') {
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b50      	cmp	r3, #80	; 0x50
 8000dc8:	d103      	bne.n	8000dd2 <HAL_UARTEx_RxEventCallback+0x1b2>
			look_direction = Rx1_Buff[1];
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000dcc:	785a      	ldrb	r2, [r3, #1]
 8000dce:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <HAL_UARTEx_RxEventCallback+0x238>)
 8000dd0:	701a      	strb	r2, [r3, #0]
		}
		RED_OFF;
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd8:	4810      	ldr	r0, [pc, #64]	; (8000e1c <HAL_UARTEx_RxEventCallback+0x1fc>)
 8000dda:	f001 fc1e 	bl	800261a <HAL_GPIO_WritePin>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx1_Buff, RX1_Size);
 8000dde:	2209      	movs	r2, #9
 8000de0:	490f      	ldr	r1, [pc, #60]	; (8000e20 <HAL_UARTEx_RxEventCallback+0x200>)
 8000de2:	481c      	ldr	r0, [pc, #112]	; (8000e54 <HAL_UARTEx_RxEventCallback+0x234>)
 8000de4:	f002 fd5f 	bl	80038a6 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <HAL_UARTEx_RxEventCallback+0x23c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <HAL_UARTEx_RxEventCallback+0x23c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 0204 	bic.w	r2, r2, #4
 8000df6:	601a      	str	r2, [r3, #0]
		GREEN_OFF;
		HAL_UART_Transmit(&huart2, GY_Request_Command, 2, PHY_FULLDUPLEX_10M);
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx2_Buff, RX2_Size);
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
	}
}
 8000df8:	e136      	b.n	8001068 <HAL_UARTEx_RxEventCallback+0x448>
	else if(huart->Instance == USART2){
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a18      	ldr	r2, [pc, #96]	; (8000e60 <HAL_UARTEx_RxEventCallback+0x240>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	f040 8131 	bne.w	8001068 <HAL_UARTEx_RxEventCallback+0x448>
		GREEN_ON;
 8000e06:	2201      	movs	r2, #1
 8000e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <HAL_UARTEx_RxEventCallback+0x1fc>)
 8000e0e:	f001 fc04 	bl	800261a <HAL_GPIO_WritePin>
		for(int i=0; i<RX2_Size; i++){
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	e109      	b.n	800102c <HAL_UARTEx_RxEventCallback+0x40c>
 8000e18:	40013800 	.word	0x40013800
 8000e1c:	40011000 	.word	0x40011000
 8000e20:	200001e4 	.word	0x200001e4
 8000e24:	20000204 	.word	0x20000204
 8000e28:	20000200 	.word	0x20000200
 8000e2c:	200001fc 	.word	0x200001fc
 8000e30:	200001f8 	.word	0x200001f8
 8000e34:	20000018 	.word	0x20000018
 8000e38:	20000118 	.word	0x20000118
 8000e3c:	000186a0 	.word	0x000186a0
 8000e40:	20000210 	.word	0x20000210
 8000e44:	20000214 	.word	0x20000214
 8000e48:	2000021c 	.word	0x2000021c
 8000e4c:	20000218 	.word	0x20000218
 8000e50:	20000220 	.word	0x20000220
 8000e54:	200000d4 	.word	0x200000d4
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	2000015c 	.word	0x2000015c
 8000e60:	40004400 	.word	0x40004400
			if(Rx2_Buff[i] == 0xAA){
 8000e64:	4a82      	ldr	r2, [pc, #520]	; (8001070 <HAL_UARTEx_RxEventCallback+0x450>)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	4413      	add	r3, r2
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2baa      	cmp	r3, #170	; 0xaa
 8000e6e:	f040 80da 	bne.w	8001026 <HAL_UARTEx_RxEventCallback+0x406>
				Heading = (int16_t)(Rx2_Buff[(i+1)%8]<<8 | Rx2_Buff[(i+2)%8])/100.00;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	425a      	negs	r2, r3
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	f002 0207 	and.w	r2, r2, #7
 8000e80:	bf58      	it	pl
 8000e82:	4253      	negpl	r3, r2
 8000e84:	4a7a      	ldr	r2, [pc, #488]	; (8001070 <HAL_UARTEx_RxEventCallback+0x450>)
 8000e86:	5cd3      	ldrb	r3, [r2, r3]
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	3302      	adds	r3, #2
 8000e90:	4259      	negs	r1, r3
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	f001 0107 	and.w	r1, r1, #7
 8000e9a:	bf58      	it	pl
 8000e9c:	424b      	negpl	r3, r1
 8000e9e:	4974      	ldr	r1, [pc, #464]	; (8001070 <HAL_UARTEx_RxEventCallback+0x450>)
 8000ea0:	5ccb      	ldrb	r3, [r1, r3]
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff faa1 	bl	80003f0 <__aeabi_i2d>
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	4b70      	ldr	r3, [pc, #448]	; (8001074 <HAL_UARTEx_RxEventCallback+0x454>)
 8000eb4:	f7ff fc30 	bl	8000718 <__aeabi_ddiv>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f7ff fd12 	bl	80008e8 <__aeabi_d2iz>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	b21a      	sxth	r2, r3
 8000ec8:	4b6b      	ldr	r3, [pc, #428]	; (8001078 <HAL_UARTEx_RxEventCallback+0x458>)
 8000eca:	801a      	strh	r2, [r3, #0]
				Pitch = (int16_t)(Rx2_Buff[(i+3)%8]<<8 | Rx2_Buff[(i+4)%8])/100.00;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	3303      	adds	r3, #3
 8000ed0:	425a      	negs	r2, r3
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	f002 0207 	and.w	r2, r2, #7
 8000eda:	bf58      	it	pl
 8000edc:	4253      	negpl	r3, r2
 8000ede:	4a64      	ldr	r2, [pc, #400]	; (8001070 <HAL_UARTEx_RxEventCallback+0x450>)
 8000ee0:	5cd3      	ldrb	r3, [r2, r3]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	4259      	negs	r1, r3
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	f001 0107 	and.w	r1, r1, #7
 8000ef4:	bf58      	it	pl
 8000ef6:	424b      	negpl	r3, r1
 8000ef8:	495d      	ldr	r1, [pc, #372]	; (8001070 <HAL_UARTEx_RxEventCallback+0x450>)
 8000efa:	5ccb      	ldrb	r3, [r1, r3]
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fa74 	bl	80003f0 <__aeabi_i2d>
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	4b59      	ldr	r3, [pc, #356]	; (8001074 <HAL_UARTEx_RxEventCallback+0x454>)
 8000f0e:	f7ff fc03 	bl	8000718 <__aeabi_ddiv>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f7ff fce5 	bl	80008e8 <__aeabi_d2iz>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b21a      	sxth	r2, r3
 8000f22:	4b56      	ldr	r3, [pc, #344]	; (800107c <HAL_UARTEx_RxEventCallback+0x45c>)
 8000f24:	801a      	strh	r2, [r3, #0]
				Roll = (int16_t)(Rx2_Buff[(i+5)%8]<<8 | Rx2_Buff[(i+6)%8])/100.00;
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3305      	adds	r3, #5
 8000f2a:	425a      	negs	r2, r3
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	f002 0207 	and.w	r2, r2, #7
 8000f34:	bf58      	it	pl
 8000f36:	4253      	negpl	r3, r2
 8000f38:	4a4d      	ldr	r2, [pc, #308]	; (8001070 <HAL_UARTEx_RxEventCallback+0x450>)
 8000f3a:	5cd3      	ldrb	r3, [r2, r3]
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3306      	adds	r3, #6
 8000f44:	4259      	negs	r1, r3
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	f001 0107 	and.w	r1, r1, #7
 8000f4e:	bf58      	it	pl
 8000f50:	424b      	negpl	r3, r1
 8000f52:	4947      	ldr	r1, [pc, #284]	; (8001070 <HAL_UARTEx_RxEventCallback+0x450>)
 8000f54:	5ccb      	ldrb	r3, [r1, r3]
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fa47 	bl	80003f0 <__aeabi_i2d>
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	4b43      	ldr	r3, [pc, #268]	; (8001074 <HAL_UARTEx_RxEventCallback+0x454>)
 8000f68:	f7ff fbd6 	bl	8000718 <__aeabi_ddiv>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	f7ff fcb8 	bl	80008e8 <__aeabi_d2iz>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	4b40      	ldr	r3, [pc, #256]	; (8001080 <HAL_UARTEx_RxEventCallback+0x460>)
 8000f7e:	801a      	strh	r2, [r3, #0]
				if(look_direction == 'W'){
 8000f80:	4b40      	ldr	r3, [pc, #256]	; (8001084 <HAL_UARTEx_RxEventCallback+0x464>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b57      	cmp	r3, #87	; 0x57
 8000f86:	d108      	bne.n	8000f9a <HAL_UARTEx_RxEventCallback+0x37a>
					Heading -= 90;
 8000f88:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <HAL_UARTEx_RxEventCallback+0x458>)
 8000f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	3b5a      	subs	r3, #90	; 0x5a
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	4b38      	ldr	r3, [pc, #224]	; (8001078 <HAL_UARTEx_RxEventCallback+0x458>)
 8000f98:	801a      	strh	r2, [r3, #0]
				if(look_direction == 'E'){
 8000f9a:	4b3a      	ldr	r3, [pc, #232]	; (8001084 <HAL_UARTEx_RxEventCallback+0x464>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b45      	cmp	r3, #69	; 0x45
 8000fa0:	d108      	bne.n	8000fb4 <HAL_UARTEx_RxEventCallback+0x394>
					Heading += 90;
 8000fa2:	4b35      	ldr	r3, [pc, #212]	; (8001078 <HAL_UARTEx_RxEventCallback+0x458>)
 8000fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	335a      	adds	r3, #90	; 0x5a
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	4b31      	ldr	r3, [pc, #196]	; (8001078 <HAL_UARTEx_RxEventCallback+0x458>)
 8000fb2:	801a      	strh	r2, [r3, #0]
				if(look_direction == 'S'){
 8000fb4:	4b33      	ldr	r3, [pc, #204]	; (8001084 <HAL_UARTEx_RxEventCallback+0x464>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b53      	cmp	r3, #83	; 0x53
 8000fba:	d117      	bne.n	8000fec <HAL_UARTEx_RxEventCallback+0x3cc>
					if(Heading > 0) Heading = Heading - 180;
 8000fbc:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <HAL_UARTEx_RxEventCallback+0x458>)
 8000fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	dd09      	ble.n	8000fda <HAL_UARTEx_RxEventCallback+0x3ba>
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <HAL_UARTEx_RxEventCallback+0x458>)
 8000fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	3bb4      	subs	r3, #180	; 0xb4
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	4b28      	ldr	r3, [pc, #160]	; (8001078 <HAL_UARTEx_RxEventCallback+0x458>)
 8000fd6:	801a      	strh	r2, [r3, #0]
 8000fd8:	e008      	b.n	8000fec <HAL_UARTEx_RxEventCallback+0x3cc>
					else		    Heading = Heading + 180;
 8000fda:	4b27      	ldr	r3, [pc, #156]	; (8001078 <HAL_UARTEx_RxEventCallback+0x458>)
 8000fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	33b4      	adds	r3, #180	; 0xb4
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <HAL_UARTEx_RxEventCallback+0x458>)
 8000fea:	801a      	strh	r2, [r3, #0]
				if(Heading > 180) Heading -= 180;
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <HAL_UARTEx_RxEventCallback+0x458>)
 8000fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff2:	2bb4      	cmp	r3, #180	; 0xb4
 8000ff4:	dd08      	ble.n	8001008 <HAL_UARTEx_RxEventCallback+0x3e8>
 8000ff6:	4b20      	ldr	r3, [pc, #128]	; (8001078 <HAL_UARTEx_RxEventCallback+0x458>)
 8000ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	3bb4      	subs	r3, #180	; 0xb4
 8001000:	b29b      	uxth	r3, r3
 8001002:	b21a      	sxth	r2, r3
 8001004:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <HAL_UARTEx_RxEventCallback+0x458>)
 8001006:	801a      	strh	r2, [r3, #0]
				if(Heading <-180) Heading += 180;
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <HAL_UARTEx_RxEventCallback+0x458>)
 800100a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100e:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 8001012:	da08      	bge.n	8001026 <HAL_UARTEx_RxEventCallback+0x406>
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <HAL_UARTEx_RxEventCallback+0x458>)
 8001016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101a:	b29b      	uxth	r3, r3
 800101c:	33b4      	adds	r3, #180	; 0xb4
 800101e:	b29b      	uxth	r3, r3
 8001020:	b21a      	sxth	r2, r3
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_UARTEx_RxEventCallback+0x458>)
 8001024:	801a      	strh	r2, [r3, #0]
		for(int i=0; i<RX2_Size; i++){
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	2b07      	cmp	r3, #7
 8001030:	f77f af18 	ble.w	8000e64 <HAL_UARTEx_RxEventCallback+0x244>
		GREEN_OFF;
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103a:	4813      	ldr	r0, [pc, #76]	; (8001088 <HAL_UARTEx_RxEventCallback+0x468>)
 800103c:	f001 faed 	bl	800261a <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, GY_Request_Command, 2, PHY_FULLDUPLEX_10M);
 8001040:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001044:	2202      	movs	r2, #2
 8001046:	4911      	ldr	r1, [pc, #68]	; (800108c <HAL_UARTEx_RxEventCallback+0x46c>)
 8001048:	4811      	ldr	r0, [pc, #68]	; (8001090 <HAL_UARTEx_RxEventCallback+0x470>)
 800104a:	f002 fb9a 	bl	8003782 <HAL_UART_Transmit>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx2_Buff, RX2_Size);
 800104e:	2208      	movs	r2, #8
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <HAL_UARTEx_RxEventCallback+0x450>)
 8001052:	480f      	ldr	r0, [pc, #60]	; (8001090 <HAL_UARTEx_RxEventCallback+0x470>)
 8001054:	f002 fc27 	bl	80038a6 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_UARTEx_RxEventCallback+0x474>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_UARTEx_RxEventCallback+0x474>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0204 	bic.w	r2, r2, #4
 8001066:	601a      	str	r2, [r3, #0]
}
 8001068:	bf00      	nop
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200001f0 	.word	0x200001f0
 8001074:	40590000 	.word	0x40590000
 8001078:	2000020c 	.word	0x2000020c
 800107c:	20000208 	.word	0x20000208
 8001080:	2000020a 	.word	0x2000020a
 8001084:	20000000 	.word	0x20000000
 8001088:	40011000 	.word	0x40011000
 800108c:	20000014 	.word	0x20000014
 8001090:	20000118 	.word	0x20000118
 8001094:	200001a0 	.word	0x200001a0

08001098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109e:	f000 fcef 	bl	8001a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a2:	f000 f8a7 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a6:	f000 fa3f 	bl	8001528 <MX_GPIO_Init>
  MX_TIM4_Init();
 80010aa:	f000 f949 	bl	8001340 <MX_TIM4_Init>
  MX_DMA_Init();
 80010ae:	f000 fa15 	bl	80014dc <MX_DMA_Init>
  MX_USART1_UART_Init();
 80010b2:	f000 f9bf 	bl	8001434 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80010b6:	f000 f9e7 	bl	8001488 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80010ba:	f000 f8dd 	bl	8001278 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80010be:	2100      	movs	r1, #0
 80010c0:	483f      	ldr	r0, [pc, #252]	; (80011c0 <main+0x128>)
 80010c2:	f001 ff45 	bl	8002f50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80010c6:	2104      	movs	r1, #4
 80010c8:	483d      	ldr	r0, [pc, #244]	; (80011c0 <main+0x128>)
 80010ca:	f001 ff41 	bl	8002f50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80010ce:	2108      	movs	r1, #8
 80010d0:	483b      	ldr	r0, [pc, #236]	; (80011c0 <main+0x128>)
 80010d2:	f001 ff3d 	bl	8002f50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80010d6:	210c      	movs	r1, #12
 80010d8:	4839      	ldr	r0, [pc, #228]	; (80011c0 <main+0x128>)
 80010da:	f001 ff39 	bl	8002f50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80010de:	2108      	movs	r1, #8
 80010e0:	4838      	ldr	r0, [pc, #224]	; (80011c4 <main+0x12c>)
 80010e2:	f001 ff35 	bl	8002f50 <HAL_TIM_PWM_Start>
//  HAL_TIM_Base_Start(&htim1);

  HAL_GPIO_WritePin(MOTORS_EN_GPIO_Port, MOTORS_EN_Pin, 1);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2108      	movs	r1, #8
 80010ea:	4837      	ldr	r0, [pc, #220]	; (80011c8 <main+0x130>)
 80010ec:	f001 fa95 	bl	800261a <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // Red LED
 80010f0:	2201      	movs	r2, #1
 80010f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f6:	4835      	ldr	r0, [pc, #212]	; (80011cc <main+0x134>)
 80010f8:	f001 fa8f 	bl	800261a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0); // Red LED
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001102:	4832      	ldr	r0, [pc, #200]	; (80011cc <main+0x134>)
 8001104:	f001 fa89 	bl	800261a <HAL_GPIO_WritePin>
  for(int i=0; i<5; i++){
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	e00f      	b.n	800112e <main+0x96>
	  HAL_Delay(100);
 800110e:	2064      	movs	r0, #100	; 0x64
 8001110:	f000 fd18 	bl	8001b44 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14); // Red LED
 8001114:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001118:	482c      	ldr	r0, [pc, #176]	; (80011cc <main+0x134>)
 800111a:	f001 fa96 	bl	800264a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Green LED
 800111e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001122:	482a      	ldr	r0, [pc, #168]	; (80011cc <main+0x134>)
 8001124:	f001 fa91 	bl	800264a <HAL_GPIO_TogglePin>
  for(int i=0; i<5; i++){
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3301      	adds	r3, #1
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b04      	cmp	r3, #4
 8001132:	ddec      	ble.n	800110e <main+0x76>
  }
  RED_OFF;
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800113a:	4824      	ldr	r0, [pc, #144]	; (80011cc <main+0x134>)
 800113c:	f001 fa6d 	bl	800261a <HAL_GPIO_WritePin>
  GREEN_OFF;
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001146:	4821      	ldr	r0, [pc, #132]	; (80011cc <main+0x134>)
 8001148:	f001 fa67 	bl	800261a <HAL_GPIO_WritePin>

  initGY();
 800114c:	f7ff fbfe 	bl	800094c <initGY>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx1_Buff, RX1_Size);
 8001150:	2209      	movs	r2, #9
 8001152:	491f      	ldr	r1, [pc, #124]	; (80011d0 <main+0x138>)
 8001154:	481f      	ldr	r0, [pc, #124]	; (80011d4 <main+0x13c>)
 8001156:	f002 fba6 	bl	80038a6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <main+0x140>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <main+0x140>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0204 	bic.w	r2, r2, #4
 8001168:	601a      	str	r2, [r3, #0]

  HAL_UART_Transmit(&huart2, GY_Request_Command, 2, PHY_FULLDUPLEX_10M);
 800116a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116e:	2202      	movs	r2, #2
 8001170:	491a      	ldr	r1, [pc, #104]	; (80011dc <main+0x144>)
 8001172:	481b      	ldr	r0, [pc, #108]	; (80011e0 <main+0x148>)
 8001174:	f002 fb05 	bl	8003782 <HAL_UART_Transmit>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx2_Buff, RX2_Size);
 8001178:	2208      	movs	r2, #8
 800117a:	491a      	ldr	r1, [pc, #104]	; (80011e4 <main+0x14c>)
 800117c:	4818      	ldr	r0, [pc, #96]	; (80011e0 <main+0x148>)
 800117e:	f002 fb92 	bl	80038a6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <main+0x150>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <main+0x150>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f022 0204 	bic.w	r2, r2, #4
 8001190:	601a      	str	r2, [r3, #0]


  Last_Time = HAL_GetTick();
 8001192:	f000 fccd 	bl	8001b30 <HAL_GetTick>
 8001196:	4603      	mov	r3, r0
 8001198:	4a14      	ldr	r2, [pc, #80]	; (80011ec <main+0x154>)
 800119a:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, 1);
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a2:	4809      	ldr	r0, [pc, #36]	; (80011c8 <main+0x130>)
 80011a4:	f001 fa39 	bl	800261a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <main+0x130>)
 80011b0:	f001 fa33 	bl	800261a <HAL_GPIO_WritePin>
		TIM4->CCR2 = 10000;
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <main+0x158>)
 80011b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80011ba:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, 1);
 80011bc:	e7ee      	b.n	800119c <main+0x104>
 80011be:	bf00      	nop
 80011c0:	2000008c 	.word	0x2000008c
 80011c4:	20000044 	.word	0x20000044
 80011c8:	40010c00 	.word	0x40010c00
 80011cc:	40011000 	.word	0x40011000
 80011d0:	200001e4 	.word	0x200001e4
 80011d4:	200000d4 	.word	0x200000d4
 80011d8:	2000015c 	.word	0x2000015c
 80011dc:	20000014 	.word	0x20000014
 80011e0:	20000118 	.word	0x20000118
 80011e4:	200001f0 	.word	0x200001f0
 80011e8:	200001a0 	.word	0x200001a0
 80011ec:	20000228 	.word	0x20000228
 80011f0:	40000800 	.word	0x40000800

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b090      	sub	sp, #64	; 0x40
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0318 	add.w	r3, r7, #24
 80011fe:	2228      	movs	r2, #40	; 0x28
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f003 f8e2 	bl	80043cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121a:	2301      	movs	r3, #1
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121e:	2310      	movs	r3, #16
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001222:	2302      	movs	r3, #2
 8001224:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001226:	2300      	movs	r3, #0
 8001228:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800122a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	f107 0318 	add.w	r3, r7, #24
 8001234:	4618      	mov	r0, r3
 8001236:	f001 fa21 	bl	800267c <HAL_RCC_OscConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001240:	f000 f9ec 	bl	800161c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001244:	230f      	movs	r3, #15
 8001246:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001248:	2302      	movs	r3, #2
 800124a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2102      	movs	r1, #2
 800125e:	4618      	mov	r0, r3
 8001260:	f001 fc8e 	bl	8002b80 <HAL_RCC_ClockConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800126a:	f000 f9d7 	bl	800161c <Error_Handler>
  }
}
 800126e:	bf00      	nop
 8001270:	3740      	adds	r7, #64	; 0x40
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
 8001296:	615a      	str	r2, [r3, #20]
 8001298:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800129a:	4b28      	ldr	r3, [pc, #160]	; (800133c <MX_TIM2_Init+0xc4>)
 800129c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <MX_TIM2_Init+0xc4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <MX_TIM2_Init+0xc4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80012ae:	4b23      	ldr	r3, [pc, #140]	; (800133c <MX_TIM2_Init+0xc4>)
 80012b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <MX_TIM2_Init+0xc4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012bc:	4b1f      	ldr	r3, [pc, #124]	; (800133c <MX_TIM2_Init+0xc4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012c2:	481e      	ldr	r0, [pc, #120]	; (800133c <MX_TIM2_Init+0xc4>)
 80012c4:	f001 fdf4 	bl	8002eb0 <HAL_TIM_PWM_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012ce:	f000 f9a5 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012da:	f107 0320 	add.w	r3, r7, #32
 80012de:	4619      	mov	r1, r3
 80012e0:	4816      	ldr	r0, [pc, #88]	; (800133c <MX_TIM2_Init+0xc4>)
 80012e2:	f002 f9a3 	bl	800362c <HAL_TIMEx_MasterConfigSynchronization>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80012ec:	f000 f996 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f0:	2360      	movs	r3, #96	; 0x60
 80012f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2208      	movs	r2, #8
 8001304:	4619      	mov	r1, r3
 8001306:	480d      	ldr	r0, [pc, #52]	; (800133c <MX_TIM2_Init+0xc4>)
 8001308:	f001 fec4 	bl	8003094 <HAL_TIM_PWM_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001312:	f000 f983 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	220c      	movs	r2, #12
 800131a:	4619      	mov	r1, r3
 800131c:	4807      	ldr	r0, [pc, #28]	; (800133c <MX_TIM2_Init+0xc4>)
 800131e:	f001 feb9 	bl	8003094 <HAL_TIM_PWM_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001328:	f000 f978 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800132c:	4803      	ldr	r0, [pc, #12]	; (800133c <MX_TIM2_Init+0xc4>)
 800132e:	f000 f9dd 	bl	80016ec <HAL_TIM_MspPostInit>

}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000044 	.word	0x20000044

08001340 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001346:	f107 0320 	add.w	r3, r7, #32
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]
 800135e:	615a      	str	r2, [r3, #20]
 8001360:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001362:	4b32      	ldr	r3, [pc, #200]	; (800142c <MX_TIM4_Init+0xec>)
 8001364:	4a32      	ldr	r2, [pc, #200]	; (8001430 <MX_TIM4_Init+0xf0>)
 8001366:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001368:	4b30      	ldr	r3, [pc, #192]	; (800142c <MX_TIM4_Init+0xec>)
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136e:	4b2f      	ldr	r3, [pc, #188]	; (800142c <MX_TIM4_Init+0xec>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001374:	4b2d      	ldr	r3, [pc, #180]	; (800142c <MX_TIM4_Init+0xec>)
 8001376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800137a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137c:	4b2b      	ldr	r3, [pc, #172]	; (800142c <MX_TIM4_Init+0xec>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001382:	4b2a      	ldr	r3, [pc, #168]	; (800142c <MX_TIM4_Init+0xec>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001388:	4828      	ldr	r0, [pc, #160]	; (800142c <MX_TIM4_Init+0xec>)
 800138a:	f001 fd91 	bl	8002eb0 <HAL_TIM_PWM_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001394:	f000 f942 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013a0:	f107 0320 	add.w	r3, r7, #32
 80013a4:	4619      	mov	r1, r3
 80013a6:	4821      	ldr	r0, [pc, #132]	; (800142c <MX_TIM4_Init+0xec>)
 80013a8:	f002 f940 	bl	800362c <HAL_TIMEx_MasterConfigSynchronization>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80013b2:	f000 f933 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013b6:	2360      	movs	r3, #96	; 0x60
 80013b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2200      	movs	r2, #0
 80013ca:	4619      	mov	r1, r3
 80013cc:	4817      	ldr	r0, [pc, #92]	; (800142c <MX_TIM4_Init+0xec>)
 80013ce:	f001 fe61 	bl	8003094 <HAL_TIM_PWM_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80013d8:	f000 f920 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2204      	movs	r2, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	4812      	ldr	r0, [pc, #72]	; (800142c <MX_TIM4_Init+0xec>)
 80013e4:	f001 fe56 	bl	8003094 <HAL_TIM_PWM_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80013ee:	f000 f915 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2208      	movs	r2, #8
 80013f6:	4619      	mov	r1, r3
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <MX_TIM4_Init+0xec>)
 80013fa:	f001 fe4b 	bl	8003094 <HAL_TIM_PWM_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001404:	f000 f90a 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	220c      	movs	r2, #12
 800140c:	4619      	mov	r1, r3
 800140e:	4807      	ldr	r0, [pc, #28]	; (800142c <MX_TIM4_Init+0xec>)
 8001410:	f001 fe40 	bl	8003094 <HAL_TIM_PWM_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800141a:	f000 f8ff 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800141e:	4803      	ldr	r0, [pc, #12]	; (800142c <MX_TIM4_Init+0xec>)
 8001420:	f000 f964 	bl	80016ec <HAL_TIM_MspPostInit>

}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	; 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000008c 	.word	0x2000008c
 8001430:	40000800 	.word	0x40000800

08001434 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_USART1_UART_Init+0x4c>)
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <MX_USART1_UART_Init+0x50>)
 800143c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_USART1_UART_Init+0x4c>)
 8001440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001444:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_USART1_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_USART1_UART_Init+0x4c>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_USART1_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_USART1_UART_Init+0x4c>)
 800145a:	220c      	movs	r2, #12
 800145c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_USART1_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_USART1_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_USART1_UART_Init+0x4c>)
 800146c:	f002 f93c 	bl	80036e8 <HAL_UART_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001476:	f000 f8d1 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200000d4 	.word	0x200000d4
 8001484:	40013800 	.word	0x40013800

08001488 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <MX_USART2_UART_Init+0x50>)
 8001490:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 8001494:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001498:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014c0:	f002 f912 	bl	80036e8 <HAL_UART_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ca:	f000 f8a7 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000118 	.word	0x20000118
 80014d8:	40004400 	.word	0x40004400

080014dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <MX_DMA_Init+0x48>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <MX_DMA_Init+0x48>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6153      	str	r3, [r2, #20]
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <MX_DMA_Init+0x48>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	200f      	movs	r0, #15
 8001500:	f000 fc1b 	bl	8001d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001504:	200f      	movs	r0, #15
 8001506:	f000 fc34 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	2010      	movs	r0, #16
 8001510:	f000 fc13 	bl	8001d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001514:	2010      	movs	r0, #16
 8001516:	f000 fc2c 	bl	8001d72 <HAL_NVIC_EnableIRQ>

}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000

08001528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153c:	4b33      	ldr	r3, [pc, #204]	; (800160c <MX_GPIO_Init+0xe4>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a32      	ldr	r2, [pc, #200]	; (800160c <MX_GPIO_Init+0xe4>)
 8001542:	f043 0310 	orr.w	r3, r3, #16
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b30      	ldr	r3, [pc, #192]	; (800160c <MX_GPIO_Init+0xe4>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0310 	and.w	r3, r3, #16
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b2d      	ldr	r3, [pc, #180]	; (800160c <MX_GPIO_Init+0xe4>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a2c      	ldr	r2, [pc, #176]	; (800160c <MX_GPIO_Init+0xe4>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b2a      	ldr	r3, [pc, #168]	; (800160c <MX_GPIO_Init+0xe4>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156c:	4b27      	ldr	r3, [pc, #156]	; (800160c <MX_GPIO_Init+0xe4>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a26      	ldr	r2, [pc, #152]	; (800160c <MX_GPIO_Init+0xe4>)
 8001572:	f043 0308 	orr.w	r3, r3, #8
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b24      	ldr	r3, [pc, #144]	; (800160c <MX_GPIO_Init+0xe4>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800158a:	4821      	ldr	r0, [pc, #132]	; (8001610 <MX_GPIO_Init+0xe8>)
 800158c:	f001 f845 	bl	800261a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INA2_Pin|INB2_Pin|INA1_Pin|INB1_Pin
 8001590:	2200      	movs	r2, #0
 8001592:	f24f 0138 	movw	r1, #61496	; 0xf038
 8001596:	481f      	ldr	r0, [pc, #124]	; (8001614 <MX_GPIO_Init+0xec>)
 8001598:	f001 f83f 	bl	800261a <HAL_GPIO_WritePin>
                          |MOTORS_EN_Pin|INA4_Pin|INB4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INA3_Pin|INB3_Pin, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80015a2:	481d      	ldr	r0, [pc, #116]	; (8001618 <MX_GPIO_Init+0xf0>)
 80015a4:	f001 f839 	bl	800261a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80015a8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80015ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	4619      	mov	r1, r3
 80015c0:	4813      	ldr	r0, [pc, #76]	; (8001610 <MX_GPIO_Init+0xe8>)
 80015c2:	f000 fe8f 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INA2_Pin INB2_Pin INA1_Pin INB1_Pin
                           MOTORS_EN_Pin INA4_Pin INB4_Pin */
  GPIO_InitStruct.Pin = INA2_Pin|INB2_Pin|INA1_Pin|INB1_Pin
 80015c6:	f24f 0338 	movw	r3, #61496	; 0xf038
 80015ca:	613b      	str	r3, [r7, #16]
                          |MOTORS_EN_Pin|INA4_Pin|INB4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2302      	movs	r3, #2
 80015d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	4619      	mov	r1, r3
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_GPIO_Init+0xec>)
 80015e0:	f000 fe80 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INA3_Pin INB3_Pin */
  GPIO_InitStruct.Pin = INA3_Pin|INB3_Pin;
 80015e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0310 	add.w	r3, r7, #16
 80015fa:	4619      	mov	r1, r3
 80015fc:	4806      	ldr	r0, [pc, #24]	; (8001618 <MX_GPIO_Init+0xf0>)
 80015fe:	f000 fe71 	bl	80022e4 <HAL_GPIO_Init>

}
 8001602:	bf00      	nop
 8001604:	3720      	adds	r7, #32
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000
 8001610:	40011000 	.word	0x40011000
 8001614:	40010c00 	.word	0x40010c00
 8001618:	40010800 	.word	0x40010800

0800161c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
}
 8001622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001624:	e7fe      	b.n	8001624 <Error_Handler+0x8>
	...

08001628 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_MspInit+0x5c>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	4a14      	ldr	r2, [pc, #80]	; (8001684 <HAL_MspInit+0x5c>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6193      	str	r3, [r2, #24]
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_MspInit+0x5c>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_MspInit+0x5c>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_MspInit+0x5c>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001650:	61d3      	str	r3, [r2, #28]
 8001652:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_MspInit+0x5c>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800165e:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_MspInit+0x60>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	4a04      	ldr	r2, [pc, #16]	; (8001688 <HAL_MspInit+0x60>)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167a:	bf00      	nop
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	40021000 	.word	0x40021000
 8001688:	40010000 	.word	0x40010000

0800168c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800169c:	d10c      	bne.n	80016b8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_TIM_PWM_MspInit+0x58>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a10      	ldr	r2, [pc, #64]	; (80016e4 <HAL_TIM_PWM_MspInit+0x58>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	61d3      	str	r3, [r2, #28]
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_TIM_PWM_MspInit+0x58>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80016b6:	e010      	b.n	80016da <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <HAL_TIM_PWM_MspInit+0x5c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d10b      	bne.n	80016da <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_TIM_PWM_MspInit+0x58>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_TIM_PWM_MspInit+0x58>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_TIM_PWM_MspInit+0x58>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40000800 	.word	0x40000800

080016ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800170a:	d12b      	bne.n	8001764 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170c:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <HAL_TIM_MspPostInit+0xbc>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a25      	ldr	r2, [pc, #148]	; (80017a8 <HAL_TIM_MspPostInit+0xbc>)
 8001712:	f043 0308 	orr.w	r3, r3, #8
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <HAL_TIM_MspPostInit+0xbc>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001724:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2302      	movs	r3, #2
 8001730:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f107 0314 	add.w	r3, r7, #20
 8001736:	4619      	mov	r1, r3
 8001738:	481c      	ldr	r0, [pc, #112]	; (80017ac <HAL_TIM_MspPostInit+0xc0>)
 800173a:	f000 fdd3 	bl	80022e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 800173e:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <HAL_TIM_MspPostInit+0xc4>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <HAL_TIM_MspPostInit+0xc4>)
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001762:	e01d      	b.n	80017a0 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM4)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <HAL_TIM_MspPostInit+0xc8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d118      	bne.n	80017a0 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_TIM_MspPostInit+0xbc>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <HAL_TIM_MspPostInit+0xbc>)
 8001774:	f043 0308 	orr.w	r3, r3, #8
 8001778:	6193      	str	r3, [r2, #24]
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_TIM_MspPostInit+0xbc>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001786:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800178a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2302      	movs	r3, #2
 8001792:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	4804      	ldr	r0, [pc, #16]	; (80017ac <HAL_TIM_MspPostInit+0xc0>)
 800179c:	f000 fda2 	bl	80022e4 <HAL_GPIO_Init>
}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	; 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010c00 	.word	0x40010c00
 80017b0:	40010000 	.word	0x40010000
 80017b4:	40000800 	.word	0x40000800

080017b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0318 	add.w	r3, r7, #24
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a65      	ldr	r2, [pc, #404]	; (8001968 <HAL_UART_MspInit+0x1b0>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d160      	bne.n	800189a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017d8:	4b64      	ldr	r3, [pc, #400]	; (800196c <HAL_UART_MspInit+0x1b4>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	4a63      	ldr	r2, [pc, #396]	; (800196c <HAL_UART_MspInit+0x1b4>)
 80017de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e2:	6193      	str	r3, [r2, #24]
 80017e4:	4b61      	ldr	r3, [pc, #388]	; (800196c <HAL_UART_MspInit+0x1b4>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f0:	4b5e      	ldr	r3, [pc, #376]	; (800196c <HAL_UART_MspInit+0x1b4>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a5d      	ldr	r2, [pc, #372]	; (800196c <HAL_UART_MspInit+0x1b4>)
 80017f6:	f043 0304 	orr.w	r3, r3, #4
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b5b      	ldr	r3, [pc, #364]	; (800196c <HAL_UART_MspInit+0x1b4>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	f107 0318 	add.w	r3, r7, #24
 800181a:	4619      	mov	r1, r3
 800181c:	4854      	ldr	r0, [pc, #336]	; (8001970 <HAL_UART_MspInit+0x1b8>)
 800181e:	f000 fd61 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 0318 	add.w	r3, r7, #24
 8001834:	4619      	mov	r1, r3
 8001836:	484e      	ldr	r0, [pc, #312]	; (8001970 <HAL_UART_MspInit+0x1b8>)
 8001838:	f000 fd54 	bl	80022e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800183c:	4b4d      	ldr	r3, [pc, #308]	; (8001974 <HAL_UART_MspInit+0x1bc>)
 800183e:	4a4e      	ldr	r2, [pc, #312]	; (8001978 <HAL_UART_MspInit+0x1c0>)
 8001840:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001842:	4b4c      	ldr	r3, [pc, #304]	; (8001974 <HAL_UART_MspInit+0x1bc>)
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001848:	4b4a      	ldr	r3, [pc, #296]	; (8001974 <HAL_UART_MspInit+0x1bc>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800184e:	4b49      	ldr	r3, [pc, #292]	; (8001974 <HAL_UART_MspInit+0x1bc>)
 8001850:	2280      	movs	r2, #128	; 0x80
 8001852:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001854:	4b47      	ldr	r3, [pc, #284]	; (8001974 <HAL_UART_MspInit+0x1bc>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800185a:	4b46      	ldr	r3, [pc, #280]	; (8001974 <HAL_UART_MspInit+0x1bc>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001860:	4b44      	ldr	r3, [pc, #272]	; (8001974 <HAL_UART_MspInit+0x1bc>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001866:	4b43      	ldr	r3, [pc, #268]	; (8001974 <HAL_UART_MspInit+0x1bc>)
 8001868:	2200      	movs	r2, #0
 800186a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800186c:	4841      	ldr	r0, [pc, #260]	; (8001974 <HAL_UART_MspInit+0x1bc>)
 800186e:	f000 fa9b 	bl	8001da8 <HAL_DMA_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001878:	f7ff fed0 	bl	800161c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a3d      	ldr	r2, [pc, #244]	; (8001974 <HAL_UART_MspInit+0x1bc>)
 8001880:	639a      	str	r2, [r3, #56]	; 0x38
 8001882:	4a3c      	ldr	r2, [pc, #240]	; (8001974 <HAL_UART_MspInit+0x1bc>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001888:	2200      	movs	r2, #0
 800188a:	2100      	movs	r1, #0
 800188c:	2025      	movs	r0, #37	; 0x25
 800188e:	f000 fa54 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001892:	2025      	movs	r0, #37	; 0x25
 8001894:	f000 fa6d 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001898:	e062      	b.n	8001960 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a37      	ldr	r2, [pc, #220]	; (800197c <HAL_UART_MspInit+0x1c4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d15d      	bne.n	8001960 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018a4:	4b31      	ldr	r3, [pc, #196]	; (800196c <HAL_UART_MspInit+0x1b4>)
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	4a30      	ldr	r2, [pc, #192]	; (800196c <HAL_UART_MspInit+0x1b4>)
 80018aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ae:	61d3      	str	r3, [r2, #28]
 80018b0:	4b2e      	ldr	r3, [pc, #184]	; (800196c <HAL_UART_MspInit+0x1b4>)
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	4b2b      	ldr	r3, [pc, #172]	; (800196c <HAL_UART_MspInit+0x1b4>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a2a      	ldr	r2, [pc, #168]	; (800196c <HAL_UART_MspInit+0x1b4>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b28      	ldr	r3, [pc, #160]	; (800196c <HAL_UART_MspInit+0x1b4>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018d4:	2304      	movs	r3, #4
 80018d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018dc:	2303      	movs	r3, #3
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 0318 	add.w	r3, r7, #24
 80018e4:	4619      	mov	r1, r3
 80018e6:	4822      	ldr	r0, [pc, #136]	; (8001970 <HAL_UART_MspInit+0x1b8>)
 80018e8:	f000 fcfc 	bl	80022e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018ec:	2308      	movs	r3, #8
 80018ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 0318 	add.w	r3, r7, #24
 80018fc:	4619      	mov	r1, r3
 80018fe:	481c      	ldr	r0, [pc, #112]	; (8001970 <HAL_UART_MspInit+0x1b8>)
 8001900:	f000 fcf0 	bl	80022e4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001904:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <HAL_UART_MspInit+0x1c8>)
 8001906:	4a1f      	ldr	r2, [pc, #124]	; (8001984 <HAL_UART_MspInit+0x1cc>)
 8001908:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <HAL_UART_MspInit+0x1c8>)
 800190c:	2200      	movs	r2, #0
 800190e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <HAL_UART_MspInit+0x1c8>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <HAL_UART_MspInit+0x1c8>)
 8001918:	2280      	movs	r2, #128	; 0x80
 800191a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <HAL_UART_MspInit+0x1c8>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <HAL_UART_MspInit+0x1c8>)
 8001924:	2200      	movs	r2, #0
 8001926:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_UART_MspInit+0x1c8>)
 800192a:	2200      	movs	r2, #0
 800192c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_UART_MspInit+0x1c8>)
 8001930:	2200      	movs	r2, #0
 8001932:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001934:	4812      	ldr	r0, [pc, #72]	; (8001980 <HAL_UART_MspInit+0x1c8>)
 8001936:	f000 fa37 	bl	8001da8 <HAL_DMA_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8001940:	f7ff fe6c 	bl	800161c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <HAL_UART_MspInit+0x1c8>)
 8001948:	639a      	str	r2, [r3, #56]	; 0x38
 800194a:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <HAL_UART_MspInit+0x1c8>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	2026      	movs	r0, #38	; 0x26
 8001956:	f000 f9f0 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800195a:	2026      	movs	r0, #38	; 0x26
 800195c:	f000 fa09 	bl	8001d72 <HAL_NVIC_EnableIRQ>
}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40013800 	.word	0x40013800
 800196c:	40021000 	.word	0x40021000
 8001970:	40010800 	.word	0x40010800
 8001974:	2000015c 	.word	0x2000015c
 8001978:	40020058 	.word	0x40020058
 800197c:	40004400 	.word	0x40004400
 8001980:	200001a0 	.word	0x200001a0
 8001984:	4002006c 	.word	0x4002006c

08001988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800198c:	e7fe      	b.n	800198c <NMI_Handler+0x4>

0800198e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001992:	e7fe      	b.n	8001992 <HardFault_Handler+0x4>

08001994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <MemManage_Handler+0x4>

0800199a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <BusFault_Handler+0x4>

080019a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <UsageFault_Handler+0x4>

080019a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ce:	f000 f89d 	bl	8001b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <DMA1_Channel5_IRQHandler+0x10>)
 80019de:	f000 fb4d 	bl	800207c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2000015c 	.word	0x2000015c

080019ec <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <DMA1_Channel6_IRQHandler+0x10>)
 80019f2:	f000 fb43 	bl	800207c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200001a0 	.word	0x200001a0

08001a00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <USART1_IRQHandler+0x10>)
 8001a06:	f001 ff9d 	bl	8003944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200000d4 	.word	0x200000d4

08001a14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <USART2_IRQHandler+0x10>)
 8001a1a:	f001 ff93 	bl	8003944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000118 	.word	0x20000118

08001a28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a34:	480c      	ldr	r0, [pc, #48]	; (8001a68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a36:	490d      	ldr	r1, [pc, #52]	; (8001a6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a38:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a3c:	e002      	b.n	8001a44 <LoopCopyDataInit>

08001a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a42:	3304      	adds	r3, #4

08001a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a48:	d3f9      	bcc.n	8001a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a4c:	4c0a      	ldr	r4, [pc, #40]	; (8001a78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a50:	e001      	b.n	8001a56 <LoopFillZerobss>

08001a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a54:	3204      	adds	r2, #4

08001a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a58:	d3fb      	bcc.n	8001a52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a5a:	f7ff ffe5 	bl	8001a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a5e:	f002 fc91 	bl	8004384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a62:	f7ff fb19 	bl	8001098 <main>
  bx lr
 8001a66:	4770      	bx	lr
  ldr r0, =_sdata
 8001a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a6c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001a70:	08004424 	.word	0x08004424
  ldr r2, =_sbss
 8001a74:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001a78:	20000230 	.word	0x20000230

08001a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a7c:	e7fe      	b.n	8001a7c <ADC1_2_IRQHandler>
	...

08001a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <HAL_Init+0x28>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a07      	ldr	r2, [pc, #28]	; (8001aa8 <HAL_Init+0x28>)
 8001a8a:	f043 0310 	orr.w	r3, r3, #16
 8001a8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a90:	2003      	movs	r0, #3
 8001a92:	f000 f947 	bl	8001d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a96:	200f      	movs	r0, #15
 8001a98:	f000 f808 	bl	8001aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a9c:	f7ff fdc4 	bl	8001628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40022000 	.word	0x40022000

08001aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_InitTick+0x54>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_InitTick+0x58>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f95f 	bl	8001d8e <HAL_SYSTICK_Config>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00e      	b.n	8001af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b0f      	cmp	r3, #15
 8001ade:	d80a      	bhi.n	8001af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	f000 f927 	bl	8001d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aec:	4a06      	ldr	r2, [pc, #24]	; (8001b08 <HAL_InitTick+0x5c>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	e000      	b.n	8001af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	2000001c 	.word	0x2000001c
 8001b04:	20000024 	.word	0x20000024
 8001b08:	20000020 	.word	0x20000020

08001b0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_IncTick+0x1c>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_IncTick+0x20>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4a03      	ldr	r2, [pc, #12]	; (8001b2c <HAL_IncTick+0x20>)
 8001b1e:	6013      	str	r3, [r2, #0]
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr
 8001b28:	20000024 	.word	0x20000024
 8001b2c:	2000022c 	.word	0x2000022c

08001b30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return uwTick;
 8001b34:	4b02      	ldr	r3, [pc, #8]	; (8001b40 <HAL_GetTick+0x10>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	2000022c 	.word	0x2000022c

08001b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff fff0 	bl	8001b30 <HAL_GetTick>
 8001b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5c:	d005      	beq.n	8001b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_Delay+0x44>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b6a:	bf00      	nop
 8001b6c:	f7ff ffe0 	bl	8001b30 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d8f7      	bhi.n	8001b6c <HAL_Delay+0x28>
  {
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000024 	.word	0x20000024

08001b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bbe:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	60d3      	str	r3, [r2, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db0b      	blt.n	8001c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	4906      	ldr	r1, [pc, #24]	; (8001c24 <__NVIC_EnableIRQ+0x34>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	e000e100 	.word	0xe000e100

08001c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	db0a      	blt.n	8001c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	490c      	ldr	r1, [pc, #48]	; (8001c74 <__NVIC_SetPriority+0x4c>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	0112      	lsls	r2, r2, #4
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c50:	e00a      	b.n	8001c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4908      	ldr	r1, [pc, #32]	; (8001c78 <__NVIC_SetPriority+0x50>)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	3b04      	subs	r3, #4
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	761a      	strb	r2, [r3, #24]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000e100 	.word	0xe000e100
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f1c3 0307 	rsb	r3, r3, #7
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	bf28      	it	cs
 8001c9a:	2304      	movcs	r3, #4
 8001c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d902      	bls.n	8001cac <NVIC_EncodePriority+0x30>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3b03      	subs	r3, #3
 8001caa:	e000      	b.n	8001cae <NVIC_EncodePriority+0x32>
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	4313      	orrs	r3, r2
         );
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3724      	adds	r7, #36	; 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf0:	d301      	bcc.n	8001cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00f      	b.n	8001d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <SysTick_Config+0x40>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfe:	210f      	movs	r1, #15
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f7ff ff90 	bl	8001c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <SysTick_Config+0x40>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <SysTick_Config+0x40>)
 8001d10:	2207      	movs	r2, #7
 8001d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	e000e010 	.word	0xe000e010

08001d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff2d 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d4c:	f7ff ff42 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	6978      	ldr	r0, [r7, #20]
 8001d58:	f7ff ff90 	bl	8001c7c <NVIC_EncodePriority>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff5f 	bl	8001c28 <__NVIC_SetPriority>
}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff35 	bl	8001bf0 <__NVIC_EnableIRQ>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ffa2 	bl	8001ce0 <SysTick_Config>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e043      	b.n	8001e46 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <HAL_DMA_Init+0xa8>)
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a22      	ldr	r2, [pc, #136]	; (8001e54 <HAL_DMA_Init+0xac>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	091b      	lsrs	r3, r3, #4
 8001dd0:	009a      	lsls	r2, r3, #2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a1f      	ldr	r2, [pc, #124]	; (8001e58 <HAL_DMA_Init+0xb0>)
 8001dda:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001df2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001df6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	bffdfff8 	.word	0xbffdfff8
 8001e54:	cccccccd 	.word	0xcccccccd
 8001e58:	40020000 	.word	0x40020000

08001e5c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_DMA_Start_IT+0x20>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e04a      	b.n	8001f12 <HAL_DMA_Start_IT+0xb6>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d13a      	bne.n	8001f04 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2202      	movs	r2, #2
 8001e92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0201 	bic.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 f9e8 	bl	8002288 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 020e 	orr.w	r2, r2, #14
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	e00f      	b.n	8001ef2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0204 	bic.w	r2, r2, #4
 8001ee0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f042 020a 	orr.w	r2, r2, #10
 8001ef0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0201 	orr.w	r2, r2, #1
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	e005      	b.n	8001f10 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b085      	sub	sp, #20
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d008      	beq.n	8001f42 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2204      	movs	r2, #4
 8001f34:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e020      	b.n	8001f84 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 020e 	bic.w	r2, r2, #14
 8001f50:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0201 	bic.w	r2, r2, #1
 8001f60:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f70:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
	...

08001f90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d005      	beq.n	8001fb2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2204      	movs	r2, #4
 8001faa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
 8001fb0:	e051      	b.n	8002056 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 020e 	bic.w	r2, r2, #14
 8001fc0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0201 	bic.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a22      	ldr	r2, [pc, #136]	; (8002060 <HAL_DMA_Abort_IT+0xd0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d029      	beq.n	8002030 <HAL_DMA_Abort_IT+0xa0>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a20      	ldr	r2, [pc, #128]	; (8002064 <HAL_DMA_Abort_IT+0xd4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d022      	beq.n	800202c <HAL_DMA_Abort_IT+0x9c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a1f      	ldr	r2, [pc, #124]	; (8002068 <HAL_DMA_Abort_IT+0xd8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d01a      	beq.n	8002026 <HAL_DMA_Abort_IT+0x96>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1d      	ldr	r2, [pc, #116]	; (800206c <HAL_DMA_Abort_IT+0xdc>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d012      	beq.n	8002020 <HAL_DMA_Abort_IT+0x90>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1c      	ldr	r2, [pc, #112]	; (8002070 <HAL_DMA_Abort_IT+0xe0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00a      	beq.n	800201a <HAL_DMA_Abort_IT+0x8a>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1a      	ldr	r2, [pc, #104]	; (8002074 <HAL_DMA_Abort_IT+0xe4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d102      	bne.n	8002014 <HAL_DMA_Abort_IT+0x84>
 800200e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002012:	e00e      	b.n	8002032 <HAL_DMA_Abort_IT+0xa2>
 8002014:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002018:	e00b      	b.n	8002032 <HAL_DMA_Abort_IT+0xa2>
 800201a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800201e:	e008      	b.n	8002032 <HAL_DMA_Abort_IT+0xa2>
 8002020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002024:	e005      	b.n	8002032 <HAL_DMA_Abort_IT+0xa2>
 8002026:	f44f 7380 	mov.w	r3, #256	; 0x100
 800202a:	e002      	b.n	8002032 <HAL_DMA_Abort_IT+0xa2>
 800202c:	2310      	movs	r3, #16
 800202e:	e000      	b.n	8002032 <HAL_DMA_Abort_IT+0xa2>
 8002030:	2301      	movs	r3, #1
 8002032:	4a11      	ldr	r2, [pc, #68]	; (8002078 <HAL_DMA_Abort_IT+0xe8>)
 8002034:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	4798      	blx	r3
    } 
  }
  return status;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40020008 	.word	0x40020008
 8002064:	4002001c 	.word	0x4002001c
 8002068:	40020030 	.word	0x40020030
 800206c:	40020044 	.word	0x40020044
 8002070:	40020058 	.word	0x40020058
 8002074:	4002006c 	.word	0x4002006c
 8002078:	40020000 	.word	0x40020000

0800207c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	2204      	movs	r2, #4
 800209a:	409a      	lsls	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d04f      	beq.n	8002144 <HAL_DMA_IRQHandler+0xc8>
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d04a      	beq.n	8002144 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d107      	bne.n	80020cc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0204 	bic.w	r2, r2, #4
 80020ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a66      	ldr	r2, [pc, #408]	; (800226c <HAL_DMA_IRQHandler+0x1f0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d029      	beq.n	800212a <HAL_DMA_IRQHandler+0xae>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a65      	ldr	r2, [pc, #404]	; (8002270 <HAL_DMA_IRQHandler+0x1f4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d022      	beq.n	8002126 <HAL_DMA_IRQHandler+0xaa>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a63      	ldr	r2, [pc, #396]	; (8002274 <HAL_DMA_IRQHandler+0x1f8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d01a      	beq.n	8002120 <HAL_DMA_IRQHandler+0xa4>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a62      	ldr	r2, [pc, #392]	; (8002278 <HAL_DMA_IRQHandler+0x1fc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d012      	beq.n	800211a <HAL_DMA_IRQHandler+0x9e>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a60      	ldr	r2, [pc, #384]	; (800227c <HAL_DMA_IRQHandler+0x200>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d00a      	beq.n	8002114 <HAL_DMA_IRQHandler+0x98>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a5f      	ldr	r2, [pc, #380]	; (8002280 <HAL_DMA_IRQHandler+0x204>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d102      	bne.n	800210e <HAL_DMA_IRQHandler+0x92>
 8002108:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800210c:	e00e      	b.n	800212c <HAL_DMA_IRQHandler+0xb0>
 800210e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002112:	e00b      	b.n	800212c <HAL_DMA_IRQHandler+0xb0>
 8002114:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002118:	e008      	b.n	800212c <HAL_DMA_IRQHandler+0xb0>
 800211a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800211e:	e005      	b.n	800212c <HAL_DMA_IRQHandler+0xb0>
 8002120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002124:	e002      	b.n	800212c <HAL_DMA_IRQHandler+0xb0>
 8002126:	2340      	movs	r3, #64	; 0x40
 8002128:	e000      	b.n	800212c <HAL_DMA_IRQHandler+0xb0>
 800212a:	2304      	movs	r3, #4
 800212c:	4a55      	ldr	r2, [pc, #340]	; (8002284 <HAL_DMA_IRQHandler+0x208>)
 800212e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 8094 	beq.w	8002262 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002142:	e08e      	b.n	8002262 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	2202      	movs	r2, #2
 800214a:	409a      	lsls	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d056      	beq.n	8002202 <HAL_DMA_IRQHandler+0x186>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d051      	beq.n	8002202 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0320 	and.w	r3, r3, #32
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10b      	bne.n	8002184 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 020a 	bic.w	r2, r2, #10
 800217a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a38      	ldr	r2, [pc, #224]	; (800226c <HAL_DMA_IRQHandler+0x1f0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d029      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x166>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a37      	ldr	r2, [pc, #220]	; (8002270 <HAL_DMA_IRQHandler+0x1f4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d022      	beq.n	80021de <HAL_DMA_IRQHandler+0x162>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a35      	ldr	r2, [pc, #212]	; (8002274 <HAL_DMA_IRQHandler+0x1f8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d01a      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x15c>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a34      	ldr	r2, [pc, #208]	; (8002278 <HAL_DMA_IRQHandler+0x1fc>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d012      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x156>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a32      	ldr	r2, [pc, #200]	; (800227c <HAL_DMA_IRQHandler+0x200>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00a      	beq.n	80021cc <HAL_DMA_IRQHandler+0x150>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a31      	ldr	r2, [pc, #196]	; (8002280 <HAL_DMA_IRQHandler+0x204>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d102      	bne.n	80021c6 <HAL_DMA_IRQHandler+0x14a>
 80021c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021c4:	e00e      	b.n	80021e4 <HAL_DMA_IRQHandler+0x168>
 80021c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ca:	e00b      	b.n	80021e4 <HAL_DMA_IRQHandler+0x168>
 80021cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021d0:	e008      	b.n	80021e4 <HAL_DMA_IRQHandler+0x168>
 80021d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021d6:	e005      	b.n	80021e4 <HAL_DMA_IRQHandler+0x168>
 80021d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021dc:	e002      	b.n	80021e4 <HAL_DMA_IRQHandler+0x168>
 80021de:	2320      	movs	r3, #32
 80021e0:	e000      	b.n	80021e4 <HAL_DMA_IRQHandler+0x168>
 80021e2:	2302      	movs	r3, #2
 80021e4:	4a27      	ldr	r2, [pc, #156]	; (8002284 <HAL_DMA_IRQHandler+0x208>)
 80021e6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d034      	beq.n	8002262 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002200:	e02f      	b.n	8002262 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	2208      	movs	r2, #8
 8002208:	409a      	lsls	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4013      	ands	r3, r2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d028      	beq.n	8002264 <HAL_DMA_IRQHandler+0x1e8>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d023      	beq.n	8002264 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 020e 	bic.w	r2, r2, #14
 800222a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	2101      	movs	r1, #1
 8002236:	fa01 f202 	lsl.w	r2, r1, r2
 800223a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	2b00      	cmp	r3, #0
 8002258:	d004      	beq.n	8002264 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
    }
  }
  return;
 8002262:	bf00      	nop
 8002264:	bf00      	nop
}
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40020008 	.word	0x40020008
 8002270:	4002001c 	.word	0x4002001c
 8002274:	40020030 	.word	0x40020030
 8002278:	40020044 	.word	0x40020044
 800227c:	40020058 	.word	0x40020058
 8002280:	4002006c 	.word	0x4002006c
 8002284:	40020000 	.word	0x40020000

08002288 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229e:	2101      	movs	r1, #1
 80022a0:	fa01 f202 	lsl.w	r2, r1, r2
 80022a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b10      	cmp	r3, #16
 80022b4:	d108      	bne.n	80022c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022c6:	e007      	b.n	80022d8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	60da      	str	r2, [r3, #12]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
	...

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b08b      	sub	sp, #44	; 0x2c
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f6:	e169      	b.n	80025cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022f8:	2201      	movs	r2, #1
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	429a      	cmp	r2, r3
 8002312:	f040 8158 	bne.w	80025c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4a9a      	ldr	r2, [pc, #616]	; (8002584 <HAL_GPIO_Init+0x2a0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d05e      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002320:	4a98      	ldr	r2, [pc, #608]	; (8002584 <HAL_GPIO_Init+0x2a0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d875      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 8002326:	4a98      	ldr	r2, [pc, #608]	; (8002588 <HAL_GPIO_Init+0x2a4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d058      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 800232c:	4a96      	ldr	r2, [pc, #600]	; (8002588 <HAL_GPIO_Init+0x2a4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d86f      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 8002332:	4a96      	ldr	r2, [pc, #600]	; (800258c <HAL_GPIO_Init+0x2a8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d052      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002338:	4a94      	ldr	r2, [pc, #592]	; (800258c <HAL_GPIO_Init+0x2a8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d869      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 800233e:	4a94      	ldr	r2, [pc, #592]	; (8002590 <HAL_GPIO_Init+0x2ac>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d04c      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002344:	4a92      	ldr	r2, [pc, #584]	; (8002590 <HAL_GPIO_Init+0x2ac>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d863      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 800234a:	4a92      	ldr	r2, [pc, #584]	; (8002594 <HAL_GPIO_Init+0x2b0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d046      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002350:	4a90      	ldr	r2, [pc, #576]	; (8002594 <HAL_GPIO_Init+0x2b0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d85d      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 8002356:	2b12      	cmp	r3, #18
 8002358:	d82a      	bhi.n	80023b0 <HAL_GPIO_Init+0xcc>
 800235a:	2b12      	cmp	r3, #18
 800235c:	d859      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 800235e:	a201      	add	r2, pc, #4	; (adr r2, 8002364 <HAL_GPIO_Init+0x80>)
 8002360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002364:	080023df 	.word	0x080023df
 8002368:	080023b9 	.word	0x080023b9
 800236c:	080023cb 	.word	0x080023cb
 8002370:	0800240d 	.word	0x0800240d
 8002374:	08002413 	.word	0x08002413
 8002378:	08002413 	.word	0x08002413
 800237c:	08002413 	.word	0x08002413
 8002380:	08002413 	.word	0x08002413
 8002384:	08002413 	.word	0x08002413
 8002388:	08002413 	.word	0x08002413
 800238c:	08002413 	.word	0x08002413
 8002390:	08002413 	.word	0x08002413
 8002394:	08002413 	.word	0x08002413
 8002398:	08002413 	.word	0x08002413
 800239c:	08002413 	.word	0x08002413
 80023a0:	08002413 	.word	0x08002413
 80023a4:	08002413 	.word	0x08002413
 80023a8:	080023c1 	.word	0x080023c1
 80023ac:	080023d5 	.word	0x080023d5
 80023b0:	4a79      	ldr	r2, [pc, #484]	; (8002598 <HAL_GPIO_Init+0x2b4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023b6:	e02c      	b.n	8002412 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	623b      	str	r3, [r7, #32]
          break;
 80023be:	e029      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	3304      	adds	r3, #4
 80023c6:	623b      	str	r3, [r7, #32]
          break;
 80023c8:	e024      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	3308      	adds	r3, #8
 80023d0:	623b      	str	r3, [r7, #32]
          break;
 80023d2:	e01f      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	330c      	adds	r3, #12
 80023da:	623b      	str	r3, [r7, #32]
          break;
 80023dc:	e01a      	b.n	8002414 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023e6:	2304      	movs	r3, #4
 80023e8:	623b      	str	r3, [r7, #32]
          break;
 80023ea:	e013      	b.n	8002414 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023f4:	2308      	movs	r3, #8
 80023f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	611a      	str	r2, [r3, #16]
          break;
 80023fe:	e009      	b.n	8002414 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002400:	2308      	movs	r3, #8
 8002402:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	615a      	str	r2, [r3, #20]
          break;
 800240a:	e003      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800240c:	2300      	movs	r3, #0
 800240e:	623b      	str	r3, [r7, #32]
          break;
 8002410:	e000      	b.n	8002414 <HAL_GPIO_Init+0x130>
          break;
 8002412:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2bff      	cmp	r3, #255	; 0xff
 8002418:	d801      	bhi.n	800241e <HAL_GPIO_Init+0x13a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	e001      	b.n	8002422 <HAL_GPIO_Init+0x13e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2bff      	cmp	r3, #255	; 0xff
 8002428:	d802      	bhi.n	8002430 <HAL_GPIO_Init+0x14c>
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	e002      	b.n	8002436 <HAL_GPIO_Init+0x152>
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	3b08      	subs	r3, #8
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	210f      	movs	r1, #15
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	401a      	ands	r2, r3
 8002448:	6a39      	ldr	r1, [r7, #32]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	431a      	orrs	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80b1 	beq.w	80025c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002464:	4b4d      	ldr	r3, [pc, #308]	; (800259c <HAL_GPIO_Init+0x2b8>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	4a4c      	ldr	r2, [pc, #304]	; (800259c <HAL_GPIO_Init+0x2b8>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6193      	str	r3, [r2, #24]
 8002470:	4b4a      	ldr	r3, [pc, #296]	; (800259c <HAL_GPIO_Init+0x2b8>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800247c:	4a48      	ldr	r2, [pc, #288]	; (80025a0 <HAL_GPIO_Init+0x2bc>)
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	3302      	adds	r3, #2
 8002484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002488:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	220f      	movs	r2, #15
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4013      	ands	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a40      	ldr	r2, [pc, #256]	; (80025a4 <HAL_GPIO_Init+0x2c0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d013      	beq.n	80024d0 <HAL_GPIO_Init+0x1ec>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a3f      	ldr	r2, [pc, #252]	; (80025a8 <HAL_GPIO_Init+0x2c4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00d      	beq.n	80024cc <HAL_GPIO_Init+0x1e8>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a3e      	ldr	r2, [pc, #248]	; (80025ac <HAL_GPIO_Init+0x2c8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d007      	beq.n	80024c8 <HAL_GPIO_Init+0x1e4>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a3d      	ldr	r2, [pc, #244]	; (80025b0 <HAL_GPIO_Init+0x2cc>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d101      	bne.n	80024c4 <HAL_GPIO_Init+0x1e0>
 80024c0:	2303      	movs	r3, #3
 80024c2:	e006      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024c4:	2304      	movs	r3, #4
 80024c6:	e004      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e002      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024d0:	2300      	movs	r3, #0
 80024d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d4:	f002 0203 	and.w	r2, r2, #3
 80024d8:	0092      	lsls	r2, r2, #2
 80024da:	4093      	lsls	r3, r2
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024e2:	492f      	ldr	r1, [pc, #188]	; (80025a0 <HAL_GPIO_Init+0x2bc>)
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	3302      	adds	r3, #2
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d006      	beq.n	800250a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024fc:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	492c      	ldr	r1, [pc, #176]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]
 8002508:	e006      	b.n	8002518 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800250a:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	43db      	mvns	r3, r3
 8002512:	4928      	ldr	r1, [pc, #160]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002514:	4013      	ands	r3, r2
 8002516:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d006      	beq.n	8002532 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002524:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	4922      	ldr	r1, [pc, #136]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
 8002530:	e006      	b.n	8002540 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	43db      	mvns	r3, r3
 800253a:	491e      	ldr	r1, [pc, #120]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800253c:	4013      	ands	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d006      	beq.n	800255a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800254c:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	4918      	ldr	r1, [pc, #96]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	608b      	str	r3, [r1, #8]
 8002558:	e006      	b.n	8002568 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800255a:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	43db      	mvns	r3, r3
 8002562:	4914      	ldr	r1, [pc, #80]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002564:	4013      	ands	r3, r2
 8002566:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d021      	beq.n	80025b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	490e      	ldr	r1, [pc, #56]	; (80025b4 <HAL_GPIO_Init+0x2d0>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	4313      	orrs	r3, r2
 800257e:	60cb      	str	r3, [r1, #12]
 8002580:	e021      	b.n	80025c6 <HAL_GPIO_Init+0x2e2>
 8002582:	bf00      	nop
 8002584:	10320000 	.word	0x10320000
 8002588:	10310000 	.word	0x10310000
 800258c:	10220000 	.word	0x10220000
 8002590:	10210000 	.word	0x10210000
 8002594:	10120000 	.word	0x10120000
 8002598:	10110000 	.word	0x10110000
 800259c:	40021000 	.word	0x40021000
 80025a0:	40010000 	.word	0x40010000
 80025a4:	40010800 	.word	0x40010800
 80025a8:	40010c00 	.word	0x40010c00
 80025ac:	40011000 	.word	0x40011000
 80025b0:	40011400 	.word	0x40011400
 80025b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_GPIO_Init+0x304>)
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	43db      	mvns	r3, r3
 80025c0:	4909      	ldr	r1, [pc, #36]	; (80025e8 <HAL_GPIO_Init+0x304>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	3301      	adds	r3, #1
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	fa22 f303 	lsr.w	r3, r2, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f47f ae8e 	bne.w	80022f8 <HAL_GPIO_Init+0x14>
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	372c      	adds	r7, #44	; 0x2c
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	40010400 	.word	0x40010400

080025ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	887b      	ldrh	r3, [r7, #2]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	e001      	b.n	800260e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	460b      	mov	r3, r1
 8002624:	807b      	strh	r3, [r7, #2]
 8002626:	4613      	mov	r3, r2
 8002628:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800262a:	787b      	ldrb	r3, [r7, #1]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002630:	887a      	ldrh	r2, [r7, #2]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002636:	e003      	b.n	8002640 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002638:	887b      	ldrh	r3, [r7, #2]
 800263a:	041a      	lsls	r2, r3, #16
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	611a      	str	r2, [r3, #16]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800264a:	b480      	push	{r7}
 800264c:	b085      	sub	sp, #20
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800265c:	887a      	ldrh	r2, [r7, #2]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4013      	ands	r3, r2
 8002662:	041a      	lsls	r2, r3, #16
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	43d9      	mvns	r1, r3
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	400b      	ands	r3, r1
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	611a      	str	r2, [r3, #16]
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e272      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8087 	beq.w	80027aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800269c:	4b92      	ldr	r3, [pc, #584]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d00c      	beq.n	80026c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026a8:	4b8f      	ldr	r3, [pc, #572]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d112      	bne.n	80026da <HAL_RCC_OscConfig+0x5e>
 80026b4:	4b8c      	ldr	r3, [pc, #560]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c0:	d10b      	bne.n	80026da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c2:	4b89      	ldr	r3, [pc, #548]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d06c      	beq.n	80027a8 <HAL_RCC_OscConfig+0x12c>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d168      	bne.n	80027a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e24c      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e2:	d106      	bne.n	80026f2 <HAL_RCC_OscConfig+0x76>
 80026e4:	4b80      	ldr	r3, [pc, #512]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a7f      	ldr	r2, [pc, #508]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	e02e      	b.n	8002750 <HAL_RCC_OscConfig+0xd4>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0x98>
 80026fa:	4b7b      	ldr	r3, [pc, #492]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a7a      	ldr	r2, [pc, #488]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b78      	ldr	r3, [pc, #480]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a77      	ldr	r2, [pc, #476]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800270c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e01d      	b.n	8002750 <HAL_RCC_OscConfig+0xd4>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0xbc>
 800271e:	4b72      	ldr	r3, [pc, #456]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a71      	ldr	r2, [pc, #452]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b6f      	ldr	r3, [pc, #444]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a6e      	ldr	r2, [pc, #440]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e00b      	b.n	8002750 <HAL_RCC_OscConfig+0xd4>
 8002738:	4b6b      	ldr	r3, [pc, #428]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a6a      	ldr	r2, [pc, #424]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800273e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b68      	ldr	r3, [pc, #416]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a67      	ldr	r2, [pc, #412]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800274a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d013      	beq.n	8002780 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7ff f9ea 	bl	8001b30 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002760:	f7ff f9e6 	bl	8001b30 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e200      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	4b5d      	ldr	r3, [pc, #372]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0xe4>
 800277e:	e014      	b.n	80027aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7ff f9d6 	bl	8001b30 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002788:	f7ff f9d2 	bl	8001b30 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	; 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e1ec      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	4b53      	ldr	r3, [pc, #332]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x10c>
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d063      	beq.n	800287e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027b6:	4b4c      	ldr	r3, [pc, #304]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00b      	beq.n	80027da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027c2:	4b49      	ldr	r3, [pc, #292]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d11c      	bne.n	8002808 <HAL_RCC_OscConfig+0x18c>
 80027ce:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d116      	bne.n	8002808 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027da:	4b43      	ldr	r3, [pc, #268]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_RCC_OscConfig+0x176>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e1c0      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f2:	4b3d      	ldr	r3, [pc, #244]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4939      	ldr	r1, [pc, #228]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	e03a      	b.n	800287e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002810:	4b36      	ldr	r3, [pc, #216]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 8002812:	2201      	movs	r2, #1
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002816:	f7ff f98b 	bl	8001b30 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281e:	f7ff f987 	bl	8001b30 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e1a1      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002830:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b2a      	ldr	r3, [pc, #168]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4927      	ldr	r1, [pc, #156]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 800284c:	4313      	orrs	r3, r2
 800284e:	600b      	str	r3, [r1, #0]
 8002850:	e015      	b.n	800287e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002852:	4b26      	ldr	r3, [pc, #152]	; (80028ec <HAL_RCC_OscConfig+0x270>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7ff f96a 	bl	8001b30 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002860:	f7ff f966 	bl	8001b30 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e180      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002872:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d03a      	beq.n	8002900 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d019      	beq.n	80028c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002892:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <HAL_RCC_OscConfig+0x274>)
 8002894:	2201      	movs	r2, #1
 8002896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002898:	f7ff f94a 	bl	8001b30 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a0:	f7ff f946 	bl	8001b30 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e160      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028be:	2001      	movs	r0, #1
 80028c0:	f000 fad8 	bl	8002e74 <RCC_Delay>
 80028c4:	e01c      	b.n	8002900 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <HAL_RCC_OscConfig+0x274>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028cc:	f7ff f930 	bl	8001b30 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d2:	e00f      	b.n	80028f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d4:	f7ff f92c 	bl	8001b30 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d908      	bls.n	80028f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e146      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	42420000 	.word	0x42420000
 80028f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	4b92      	ldr	r3, [pc, #584]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1e9      	bne.n	80028d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80a6 	beq.w	8002a5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002912:	4b8b      	ldr	r3, [pc, #556]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10d      	bne.n	800293a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291e:	4b88      	ldr	r3, [pc, #544]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	4a87      	ldr	r2, [pc, #540]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002928:	61d3      	str	r3, [r2, #28]
 800292a:	4b85      	ldr	r3, [pc, #532]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002936:	2301      	movs	r3, #1
 8002938:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293a:	4b82      	ldr	r3, [pc, #520]	; (8002b44 <HAL_RCC_OscConfig+0x4c8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d118      	bne.n	8002978 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002946:	4b7f      	ldr	r3, [pc, #508]	; (8002b44 <HAL_RCC_OscConfig+0x4c8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a7e      	ldr	r2, [pc, #504]	; (8002b44 <HAL_RCC_OscConfig+0x4c8>)
 800294c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002952:	f7ff f8ed 	bl	8001b30 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295a:	f7ff f8e9 	bl	8001b30 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b64      	cmp	r3, #100	; 0x64
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e103      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296c:	4b75      	ldr	r3, [pc, #468]	; (8002b44 <HAL_RCC_OscConfig+0x4c8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d106      	bne.n	800298e <HAL_RCC_OscConfig+0x312>
 8002980:	4b6f      	ldr	r3, [pc, #444]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4a6e      	ldr	r2, [pc, #440]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6213      	str	r3, [r2, #32]
 800298c:	e02d      	b.n	80029ea <HAL_RCC_OscConfig+0x36e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x334>
 8002996:	4b6a      	ldr	r3, [pc, #424]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	4a69      	ldr	r2, [pc, #420]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	f023 0301 	bic.w	r3, r3, #1
 80029a0:	6213      	str	r3, [r2, #32]
 80029a2:	4b67      	ldr	r3, [pc, #412]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4a66      	ldr	r2, [pc, #408]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	f023 0304 	bic.w	r3, r3, #4
 80029ac:	6213      	str	r3, [r2, #32]
 80029ae:	e01c      	b.n	80029ea <HAL_RCC_OscConfig+0x36e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b05      	cmp	r3, #5
 80029b6:	d10c      	bne.n	80029d2 <HAL_RCC_OscConfig+0x356>
 80029b8:	4b61      	ldr	r3, [pc, #388]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	4a60      	ldr	r2, [pc, #384]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	6213      	str	r3, [r2, #32]
 80029c4:	4b5e      	ldr	r3, [pc, #376]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	4a5d      	ldr	r2, [pc, #372]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6213      	str	r3, [r2, #32]
 80029d0:	e00b      	b.n	80029ea <HAL_RCC_OscConfig+0x36e>
 80029d2:	4b5b      	ldr	r3, [pc, #364]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	4a5a      	ldr	r2, [pc, #360]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	6213      	str	r3, [r2, #32]
 80029de:	4b58      	ldr	r3, [pc, #352]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	4a57      	ldr	r2, [pc, #348]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 80029e4:	f023 0304 	bic.w	r3, r3, #4
 80029e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d015      	beq.n	8002a1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f2:	f7ff f89d 	bl	8001b30 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f8:	e00a      	b.n	8002a10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fa:	f7ff f899 	bl	8001b30 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e0b1      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a10:	4b4b      	ldr	r3, [pc, #300]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0ee      	beq.n	80029fa <HAL_RCC_OscConfig+0x37e>
 8002a1c:	e014      	b.n	8002a48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1e:	f7ff f887 	bl	8001b30 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a24:	e00a      	b.n	8002a3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a26:	f7ff f883 	bl	8001b30 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e09b      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3c:	4b40      	ldr	r3, [pc, #256]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1ee      	bne.n	8002a26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d105      	bne.n	8002a5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4e:	4b3c      	ldr	r3, [pc, #240]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	4a3b      	ldr	r2, [pc, #236]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8087 	beq.w	8002b72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a64:	4b36      	ldr	r3, [pc, #216]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d061      	beq.n	8002b34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d146      	bne.n	8002b06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a78:	4b33      	ldr	r3, [pc, #204]	; (8002b48 <HAL_RCC_OscConfig+0x4cc>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7e:	f7ff f857 	bl	8001b30 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a86:	f7ff f853 	bl	8001b30 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e06d      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a98:	4b29      	ldr	r3, [pc, #164]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f0      	bne.n	8002a86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aac:	d108      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002aae:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	4921      	ldr	r1, [pc, #132]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac0:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a19      	ldr	r1, [r3, #32]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	491b      	ldr	r1, [pc, #108]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_RCC_OscConfig+0x4cc>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7ff f827 	bl	8001b30 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae6:	f7ff f823 	bl	8001b30 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e03d      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af8:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x46a>
 8002b04:	e035      	b.n	8002b72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <HAL_RCC_OscConfig+0x4cc>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7ff f810 	bl	8001b30 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b14:	f7ff f80c 	bl	8001b30 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e026      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x498>
 8002b32:	e01e      	b.n	8002b72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e019      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40007000 	.word	0x40007000
 8002b48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_OscConfig+0x500>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d001      	beq.n	8002b72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000

08002b80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0d0      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b94:	4b6a      	ldr	r3, [pc, #424]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d910      	bls.n	8002bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b67      	ldr	r3, [pc, #412]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 0207 	bic.w	r2, r3, #7
 8002baa:	4965      	ldr	r1, [pc, #404]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb2:	4b63      	ldr	r3, [pc, #396]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0b8      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d020      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bdc:	4b59      	ldr	r3, [pc, #356]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4a58      	ldr	r2, [pc, #352]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002be6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bf4:	4b53      	ldr	r3, [pc, #332]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	4a52      	ldr	r2, [pc, #328]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c00:	4b50      	ldr	r3, [pc, #320]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	494d      	ldr	r1, [pc, #308]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d040      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d107      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4b47      	ldr	r3, [pc, #284]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d115      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e07f      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3e:	4b41      	ldr	r3, [pc, #260]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e073      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4e:	4b3d      	ldr	r3, [pc, #244]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e06b      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5e:	4b39      	ldr	r3, [pc, #228]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f023 0203 	bic.w	r2, r3, #3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4936      	ldr	r1, [pc, #216]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c70:	f7fe ff5e 	bl	8001b30 <HAL_GetTick>
 8002c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c76:	e00a      	b.n	8002c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c78:	f7fe ff5a 	bl	8001b30 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e053      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	4b2d      	ldr	r3, [pc, #180]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 020c 	and.w	r2, r3, #12
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d1eb      	bne.n	8002c78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d210      	bcs.n	8002cd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 0207 	bic.w	r2, r3, #7
 8002cb6:	4922      	ldr	r1, [pc, #136]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e032      	b.n	8002d36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cdc:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	4916      	ldr	r1, [pc, #88]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cfa:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	490e      	ldr	r1, [pc, #56]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d0e:	f000 f821 	bl	8002d54 <HAL_RCC_GetSysClockFreq>
 8002d12:	4602      	mov	r2, r0
 8002d14:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	490a      	ldr	r1, [pc, #40]	; (8002d48 <HAL_RCC_ClockConfig+0x1c8>)
 8002d20:	5ccb      	ldrb	r3, [r1, r3]
 8002d22:	fa22 f303 	lsr.w	r3, r2, r3
 8002d26:	4a09      	ldr	r2, [pc, #36]	; (8002d4c <HAL_RCC_ClockConfig+0x1cc>)
 8002d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d2a:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <HAL_RCC_ClockConfig+0x1d0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe febc 	bl	8001aac <HAL_InitTick>

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40022000 	.word	0x40022000
 8002d44:	40021000 	.word	0x40021000
 8002d48:	08004404 	.word	0x08004404
 8002d4c:	2000001c 	.word	0x2000001c
 8002d50:	20000020 	.word	0x20000020

08002d54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d54:	b490      	push	{r4, r7}
 8002d56:	b08a      	sub	sp, #40	; 0x28
 8002d58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d5a:	4b29      	ldr	r3, [pc, #164]	; (8002e00 <HAL_RCC_GetSysClockFreq+0xac>)
 8002d5c:	1d3c      	adds	r4, r7, #4
 8002d5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d64:	f240 2301 	movw	r3, #513	; 0x201
 8002d68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d7e:	4b21      	ldr	r3, [pc, #132]	; (8002e04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d002      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0x40>
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d003      	beq.n	8002d9a <HAL_RCC_GetSysClockFreq+0x46>
 8002d92:	e02b      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d94:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d96:	623b      	str	r3, [r7, #32]
      break;
 8002d98:	e02b      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	0c9b      	lsrs	r3, r3, #18
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	3328      	adds	r3, #40	; 0x28
 8002da4:	443b      	add	r3, r7
 8002da6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002daa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d012      	beq.n	8002ddc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002db6:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	0c5b      	lsrs	r3, r3, #17
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	3328      	adds	r3, #40	; 0x28
 8002dc2:	443b      	add	r3, r7
 8002dc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002dc8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	4a0e      	ldr	r2, [pc, #56]	; (8002e08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dce:	fb03 f202 	mul.w	r2, r3, r2
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dda:	e004      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	4a0b      	ldr	r2, [pc, #44]	; (8002e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002de0:	fb02 f303 	mul.w	r3, r2, r3
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	623b      	str	r3, [r7, #32]
      break;
 8002dea:	e002      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dee:	623b      	str	r3, [r7, #32]
      break;
 8002df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002df2:	6a3b      	ldr	r3, [r7, #32]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3728      	adds	r7, #40	; 0x28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc90      	pop	{r4, r7}
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	080043f4 	.word	0x080043f4
 8002e04:	40021000 	.word	0x40021000
 8002e08:	007a1200 	.word	0x007a1200
 8002e0c:	003d0900 	.word	0x003d0900

08002e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e14:	4b02      	ldr	r3, [pc, #8]	; (8002e20 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e16:	681b      	ldr	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	2000001c 	.word	0x2000001c

08002e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e28:	f7ff fff2 	bl	8002e10 <HAL_RCC_GetHCLKFreq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	0a1b      	lsrs	r3, r3, #8
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	4903      	ldr	r1, [pc, #12]	; (8002e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e3a:	5ccb      	ldrb	r3, [r1, r3]
 8002e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000
 8002e48:	08004414 	.word	0x08004414

08002e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e50:	f7ff ffde 	bl	8002e10 <HAL_RCC_GetHCLKFreq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	0adb      	lsrs	r3, r3, #11
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4903      	ldr	r1, [pc, #12]	; (8002e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e62:	5ccb      	ldrb	r3, [r1, r3]
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	08004414 	.word	0x08004414

08002e74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <RCC_Delay+0x34>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <RCC_Delay+0x38>)
 8002e82:	fba2 2303 	umull	r2, r3, r2, r3
 8002e86:	0a5b      	lsrs	r3, r3, #9
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	fb02 f303 	mul.w	r3, r2, r3
 8002e8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e90:	bf00      	nop
  }
  while (Delay --);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1e5a      	subs	r2, r3, #1
 8002e96:	60fa      	str	r2, [r7, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f9      	bne.n	8002e90 <RCC_Delay+0x1c>
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	2000001c 	.word	0x2000001c
 8002eac:	10624dd3 	.word	0x10624dd3

08002eb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e041      	b.n	8002f46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe fbd8 	bl	800168c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3304      	adds	r3, #4
 8002eec:	4619      	mov	r1, r3
 8002eee:	4610      	mov	r0, r2
 8002ef0:	f000 f98e 	bl	8003210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <HAL_TIM_PWM_Start+0x24>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	e022      	b.n	8002fba <HAL_TIM_PWM_Start+0x6a>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d109      	bne.n	8002f8e <HAL_TIM_PWM_Start+0x3e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	bf14      	ite	ne
 8002f86:	2301      	movne	r3, #1
 8002f88:	2300      	moveq	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	e015      	b.n	8002fba <HAL_TIM_PWM_Start+0x6a>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d109      	bne.n	8002fa8 <HAL_TIM_PWM_Start+0x58>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	bf14      	ite	ne
 8002fa0:	2301      	movne	r3, #1
 8002fa2:	2300      	moveq	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	e008      	b.n	8002fba <HAL_TIM_PWM_Start+0x6a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	bf14      	ite	ne
 8002fb4:	2301      	movne	r3, #1
 8002fb6:	2300      	moveq	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e05e      	b.n	8003080 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d104      	bne.n	8002fd2 <HAL_TIM_PWM_Start+0x82>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fd0:	e013      	b.n	8002ffa <HAL_TIM_PWM_Start+0xaa>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d104      	bne.n	8002fe2 <HAL_TIM_PWM_Start+0x92>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fe0:	e00b      	b.n	8002ffa <HAL_TIM_PWM_Start+0xaa>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d104      	bne.n	8002ff2 <HAL_TIM_PWM_Start+0xa2>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff0:	e003      	b.n	8002ffa <HAL_TIM_PWM_Start+0xaa>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2201      	movs	r2, #1
 8003000:	6839      	ldr	r1, [r7, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f000 faee 	bl	80035e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a1e      	ldr	r2, [pc, #120]	; (8003088 <HAL_TIM_PWM_Start+0x138>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d107      	bne.n	8003022 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003020:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a18      	ldr	r2, [pc, #96]	; (8003088 <HAL_TIM_PWM_Start+0x138>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00e      	beq.n	800304a <HAL_TIM_PWM_Start+0xfa>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003034:	d009      	beq.n	800304a <HAL_TIM_PWM_Start+0xfa>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a14      	ldr	r2, [pc, #80]	; (800308c <HAL_TIM_PWM_Start+0x13c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_TIM_PWM_Start+0xfa>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a12      	ldr	r2, [pc, #72]	; (8003090 <HAL_TIM_PWM_Start+0x140>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d111      	bne.n	800306e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b06      	cmp	r3, #6
 800305a:	d010      	beq.n	800307e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306c:	e007      	b.n	800307e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 0201 	orr.w	r2, r2, #1
 800307c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40012c00 	.word	0x40012c00
 800308c:	40000400 	.word	0x40000400
 8003090:	40000800 	.word	0x40000800

08003094 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e0ac      	b.n	8003208 <HAL_TIM_PWM_ConfigChannel+0x174>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	f200 809f 	bhi.w	80031fc <HAL_TIM_PWM_ConfigChannel+0x168>
 80030be:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80030c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c4:	080030f9 	.word	0x080030f9
 80030c8:	080031fd 	.word	0x080031fd
 80030cc:	080031fd 	.word	0x080031fd
 80030d0:	080031fd 	.word	0x080031fd
 80030d4:	08003139 	.word	0x08003139
 80030d8:	080031fd 	.word	0x080031fd
 80030dc:	080031fd 	.word	0x080031fd
 80030e0:	080031fd 	.word	0x080031fd
 80030e4:	0800317b 	.word	0x0800317b
 80030e8:	080031fd 	.word	0x080031fd
 80030ec:	080031fd 	.word	0x080031fd
 80030f0:	080031fd 	.word	0x080031fd
 80030f4:	080031bb 	.word	0x080031bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 f8e8 	bl	80032d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0208 	orr.w	r2, r2, #8
 8003112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0204 	bic.w	r2, r2, #4
 8003122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6999      	ldr	r1, [r3, #24]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	691a      	ldr	r2, [r3, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	619a      	str	r2, [r3, #24]
      break;
 8003136:	e062      	b.n	80031fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	4618      	mov	r0, r3
 8003140:	f000 f92e 	bl	80033a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6999      	ldr	r1, [r3, #24]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	021a      	lsls	r2, r3, #8
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	619a      	str	r2, [r3, #24]
      break;
 8003178:	e041      	b.n	80031fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	4618      	mov	r0, r3
 8003182:	f000 f977 	bl	8003474 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69da      	ldr	r2, [r3, #28]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0208 	orr.w	r2, r2, #8
 8003194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69da      	ldr	r2, [r3, #28]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0204 	bic.w	r2, r2, #4
 80031a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69d9      	ldr	r1, [r3, #28]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	61da      	str	r2, [r3, #28]
      break;
 80031b8:	e021      	b.n	80031fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 f9c1 	bl	8003548 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69da      	ldr	r2, [r3, #28]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69d9      	ldr	r1, [r3, #28]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	021a      	lsls	r2, r3, #8
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	61da      	str	r2, [r3, #28]
      break;
 80031fa:	e000      	b.n	80031fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80031fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a29      	ldr	r2, [pc, #164]	; (80032c8 <TIM_Base_SetConfig+0xb8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00b      	beq.n	8003240 <TIM_Base_SetConfig+0x30>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800322e:	d007      	beq.n	8003240 <TIM_Base_SetConfig+0x30>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a26      	ldr	r2, [pc, #152]	; (80032cc <TIM_Base_SetConfig+0xbc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d003      	beq.n	8003240 <TIM_Base_SetConfig+0x30>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a25      	ldr	r2, [pc, #148]	; (80032d0 <TIM_Base_SetConfig+0xc0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d108      	bne.n	8003252 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a1c      	ldr	r2, [pc, #112]	; (80032c8 <TIM_Base_SetConfig+0xb8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00b      	beq.n	8003272 <TIM_Base_SetConfig+0x62>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003260:	d007      	beq.n	8003272 <TIM_Base_SetConfig+0x62>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a19      	ldr	r2, [pc, #100]	; (80032cc <TIM_Base_SetConfig+0xbc>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d003      	beq.n	8003272 <TIM_Base_SetConfig+0x62>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a18      	ldr	r2, [pc, #96]	; (80032d0 <TIM_Base_SetConfig+0xc0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d108      	bne.n	8003284 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a07      	ldr	r2, [pc, #28]	; (80032c8 <TIM_Base_SetConfig+0xb8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d103      	bne.n	80032b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	615a      	str	r2, [r3, #20]
}
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	40012c00 	.word	0x40012c00
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40000800 	.word	0x40000800

080032d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	f023 0201 	bic.w	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0303 	bic.w	r3, r3, #3
 800330a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f023 0302 	bic.w	r3, r3, #2
 800331c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a1c      	ldr	r2, [pc, #112]	; (800339c <TIM_OC1_SetConfig+0xc8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d10c      	bne.n	800334a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f023 0308 	bic.w	r3, r3, #8
 8003336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4313      	orrs	r3, r2
 8003340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f023 0304 	bic.w	r3, r3, #4
 8003348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a13      	ldr	r2, [pc, #76]	; (800339c <TIM_OC1_SetConfig+0xc8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d111      	bne.n	8003376 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	621a      	str	r2, [r3, #32]
}
 8003390:	bf00      	nop
 8003392:	371c      	adds	r7, #28
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40012c00 	.word	0x40012c00

080033a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f023 0210 	bic.w	r2, r3, #16
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	021b      	lsls	r3, r3, #8
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f023 0320 	bic.w	r3, r3, #32
 80033ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a1d      	ldr	r2, [pc, #116]	; (8003470 <TIM_OC2_SetConfig+0xd0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d10d      	bne.n	800341c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800341a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a14      	ldr	r2, [pc, #80]	; (8003470 <TIM_OC2_SetConfig+0xd0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d113      	bne.n	800344c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800342a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	621a      	str	r2, [r3, #32]
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr
 8003470:	40012c00 	.word	0x40012c00

08003474 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0303 	bic.w	r3, r3, #3
 80034aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <TIM_OC3_SetConfig+0xd0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d10d      	bne.n	80034ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	021b      	lsls	r3, r3, #8
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a14      	ldr	r2, [pc, #80]	; (8003544 <TIM_OC3_SetConfig+0xd0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d113      	bne.n	800351e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	621a      	str	r2, [r3, #32]
}
 8003538:	bf00      	nop
 800353a:	371c      	adds	r7, #28
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40012c00 	.word	0x40012c00

08003548 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	021b      	lsls	r3, r3, #8
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003592:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	031b      	lsls	r3, r3, #12
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a0f      	ldr	r2, [pc, #60]	; (80035e0 <TIM_OC4_SetConfig+0x98>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d109      	bne.n	80035bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	019b      	lsls	r3, r3, #6
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	621a      	str	r2, [r3, #32]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr
 80035e0:	40012c00 	.word	0x40012c00

080035e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	2201      	movs	r2, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a1a      	ldr	r2, [r3, #32]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	43db      	mvns	r3, r3
 8003606:	401a      	ands	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a1a      	ldr	r2, [r3, #32]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	fa01 f303 	lsl.w	r3, r1, r3
 800361c:	431a      	orrs	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	621a      	str	r2, [r3, #32]
}
 8003622:	bf00      	nop
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr

0800362c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003640:	2302      	movs	r3, #2
 8003642:	e046      	b.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a16      	ldr	r2, [pc, #88]	; (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00e      	beq.n	80036a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003690:	d009      	beq.n	80036a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a10      	ldr	r2, [pc, #64]	; (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d10c      	bne.n	80036c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	40012c00 	.word	0x40012c00
 80036e0:	40000400 	.word	0x40000400
 80036e4:	40000800 	.word	0x40000800

080036e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e03f      	b.n	800377a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fe f852 	bl	80017b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2224      	movs	r2, #36	; 0x24
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800372a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 fd9b 	bl	8004268 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003750:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003760:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b08a      	sub	sp, #40	; 0x28
 8003786:	af02      	add	r7, sp, #8
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	4613      	mov	r3, r2
 8003790:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d17c      	bne.n	800389c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <HAL_UART_Transmit+0x2c>
 80037a8:	88fb      	ldrh	r3, [r7, #6]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e075      	b.n	800389e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_UART_Transmit+0x3e>
 80037bc:	2302      	movs	r3, #2
 80037be:	e06e      	b.n	800389e <HAL_UART_Transmit+0x11c>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2221      	movs	r2, #33	; 0x21
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037d6:	f7fe f9ab 	bl	8001b30 <HAL_GetTick>
 80037da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	88fa      	ldrh	r2, [r7, #6]
 80037e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f0:	d108      	bne.n	8003804 <HAL_UART_Transmit+0x82>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d104      	bne.n	8003804 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	e003      	b.n	800380c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003808:	2300      	movs	r3, #0
 800380a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003814:	e02a      	b.n	800386c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2200      	movs	r2, #0
 800381e:	2180      	movs	r1, #128	; 0x80
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fb0d 	bl	8003e40 <UART_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e036      	b.n	800389e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10b      	bne.n	800384e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003844:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	3302      	adds	r3, #2
 800384a:	61bb      	str	r3, [r7, #24]
 800384c:	e007      	b.n	800385e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	781a      	ldrb	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	3301      	adds	r3, #1
 800385c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1cf      	bne.n	8003816 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2200      	movs	r2, #0
 800387e:	2140      	movs	r1, #64	; 0x40
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 fadd 	bl	8003e40 <UART_WaitOnFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e006      	b.n	800389e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	e000      	b.n	800389e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800389c:	2302      	movs	r3, #2
  }
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b086      	sub	sp, #24
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	4613      	mov	r3, r2
 80038b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d13c      	bne.n	800393a <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e035      	b.n	800393c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80038da:	2302      	movs	r3, #2
 80038dc:	e02e      	b.n	800393c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2201      	movs	r2, #1
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	461a      	mov	r2, r3
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 faee 	bl	8003ed4 <UART_Start_Receive_DMA>
 80038f8:	4603      	mov	r3, r0
 80038fa:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d119      	bne.n	8003936 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	2b01      	cmp	r3, #1
 8003908:	d113      	bne.n	8003932 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0210 	orr.w	r2, r2, #16
 800392e:	60da      	str	r2, [r3, #12]
 8003930:	e001      	b.n	8003936 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8003936:	7dfb      	ldrb	r3, [r7, #23]
 8003938:	e000      	b.n	800393c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 800393a:	2302      	movs	r3, #2
  }
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08a      	sub	sp, #40	; 0x28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003964:	2300      	movs	r3, #0
 8003966:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10d      	bne.n	8003996 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_UART_IRQHandler+0x52>
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fbc0 	bl	8004114 <UART_Receive_IT>
      return;
 8003994:	e17b      	b.n	8003c8e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80b1 	beq.w	8003b00 <HAL_UART_IRQHandler+0x1bc>
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d105      	bne.n	80039b4 <HAL_UART_IRQHandler+0x70>
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 80a6 	beq.w	8003b00 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <HAL_UART_IRQHandler+0x90>
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	f043 0201 	orr.w	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_UART_IRQHandler+0xb0>
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	f043 0202 	orr.w	r2, r3, #2
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <HAL_UART_IRQHandler+0xd0>
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	f043 0204 	orr.w	r2, r3, #4
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00f      	beq.n	8003a3e <HAL_UART_IRQHandler+0xfa>
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d104      	bne.n	8003a32 <HAL_UART_IRQHandler+0xee>
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f043 0208 	orr.w	r2, r3, #8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 811e 	beq.w	8003c84 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d007      	beq.n	8003a62 <HAL_UART_IRQHandler+0x11e>
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fb59 	bl	8004114 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf14      	ite	ne
 8003a70:	2301      	movne	r3, #1
 8003a72:	2300      	moveq	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d102      	bne.n	8003a8a <HAL_UART_IRQHandler+0x146>
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d031      	beq.n	8003aee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fa9b 	bl	8003fc6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d023      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d013      	beq.n	8003ade <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	4a76      	ldr	r2, [pc, #472]	; (8003c94 <HAL_UART_IRQHandler+0x350>)
 8003abc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe fa64 	bl	8001f90 <HAL_DMA_Abort_IT>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d016      	beq.n	8003afc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ad8:	4610      	mov	r0, r2
 8003ada:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003adc:	e00e      	b.n	8003afc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f8f5 	bl	8003cce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae4:	e00a      	b.n	8003afc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f8f1 	bl	8003cce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aec:	e006      	b.n	8003afc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f8ed 	bl	8003cce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003afa:	e0c3      	b.n	8003c84 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afc:	bf00      	nop
    return;
 8003afe:	e0c1      	b.n	8003c84 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	f040 80a1 	bne.w	8003c4c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	f003 0310 	and.w	r3, r3, #16
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 809b 	beq.w	8003c4c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 8095 	beq.w	8003c4c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d04e      	beq.n	8003be4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003b50:	8a3b      	ldrh	r3, [r7, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 8098 	beq.w	8003c88 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b5c:	8a3a      	ldrh	r2, [r7, #16]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	f080 8092 	bcs.w	8003c88 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8a3a      	ldrh	r2, [r7, #16]
 8003b68:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	d02b      	beq.n	8003bcc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b82:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ba2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0210 	bic.w	r2, r2, #16
 8003bc0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe f9a7 	bl	8001f1a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7fd f81f 	bl	8000c20 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003be2:	e051      	b.n	8003c88 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d047      	beq.n	8003c8c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003bfc:	8a7b      	ldrh	r3, [r7, #18]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d044      	beq.n	8003c8c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c10:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695a      	ldr	r2, [r3, #20]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0210 	bic.w	r2, r2, #16
 8003c3e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c40:	8a7b      	ldrh	r3, [r7, #18]
 8003c42:	4619      	mov	r1, r3
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7fc ffeb 	bl	8000c20 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c4a:	e01f      	b.n	8003c8c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d008      	beq.n	8003c68 <HAL_UART_IRQHandler+0x324>
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f9f0 	bl	8004046 <UART_Transmit_IT>
    return;
 8003c66:	e012      	b.n	8003c8e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00d      	beq.n	8003c8e <HAL_UART_IRQHandler+0x34a>
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fa31 	bl	80040e4 <UART_EndTransmit_IT>
    return;
 8003c82:	e004      	b.n	8003c8e <HAL_UART_IRQHandler+0x34a>
    return;
 8003c84:	bf00      	nop
 8003c86:	e002      	b.n	8003c8e <HAL_UART_IRQHandler+0x34a>
      return;
 8003c88:	bf00      	nop
 8003c8a:	e000      	b.n	8003c8e <HAL_UART_IRQHandler+0x34a>
      return;
 8003c8c:	bf00      	nop
  }
}
 8003c8e:	3728      	adds	r7, #40	; 0x28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	0800401f 	.word	0x0800401f

08003c98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr

08003caa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d12a      	bne.n	8003d52 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d10:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695a      	ldr	r2, [r3, #20]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0201 	bic.w	r2, r2, #1
 8003d20:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d30:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d107      	bne.n	8003d52 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0210 	bic.w	r2, r2, #16
 8003d50:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d106      	bne.n	8003d68 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d5e:	4619      	mov	r1, r3
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f7fc ff5d 	bl	8000c20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d66:	e002      	b.n	8003d6e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff ff9e 	bl	8003caa <HAL_UART_RxCpltCallback>
}
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d108      	bne.n	8003d9e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d90:	085b      	lsrs	r3, r3, #1
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	4619      	mov	r1, r3
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f7fc ff42 	bl	8000c20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d9c:	e002      	b.n	8003da4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f7ff ff8c 	bl	8003cbc <HAL_UART_RxHalfCpltCallback>
}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bf14      	ite	ne
 8003dcc:	2301      	movne	r3, #1
 8003dce:	2300      	moveq	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b21      	cmp	r3, #33	; 0x21
 8003dde:	d108      	bne.n	8003df2 <UART_DMAError+0x46>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d005      	beq.n	8003df2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2200      	movs	r2, #0
 8003dea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003dec:	68b8      	ldr	r0, [r7, #8]
 8003dee:	f000 f8d5 	bl	8003f9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf14      	ite	ne
 8003e00:	2301      	movne	r3, #1
 8003e02:	2300      	moveq	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b22      	cmp	r3, #34	; 0x22
 8003e12:	d108      	bne.n	8003e26 <UART_DMAError+0x7a>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003e20:	68b8      	ldr	r0, [r7, #8]
 8003e22:	f000 f8d0 	bl	8003fc6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f043 0210 	orr.w	r2, r3, #16
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e32:	68b8      	ldr	r0, [r7, #8]
 8003e34:	f7ff ff4b 	bl	8003cce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e38:	bf00      	nop
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e50:	e02c      	b.n	8003eac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e58:	d028      	beq.n	8003eac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d007      	beq.n	8003e70 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e60:	f7fd fe66 	bl	8001b30 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d21d      	bcs.n	8003eac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e7e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695a      	ldr	r2, [r3, #20]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0201 	bic.w	r2, r2, #1
 8003e8e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e00f      	b.n	8003ecc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	bf0c      	ite	eq
 8003ebc:	2301      	moveq	r3, #1
 8003ebe:	2300      	movne	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d0c3      	beq.n	8003e52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	88fa      	ldrh	r2, [r7, #6]
 8003eec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2222      	movs	r2, #34	; 0x22
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	4a23      	ldr	r2, [pc, #140]	; (8003f90 <UART_Start_Receive_DMA+0xbc>)
 8003f02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	4a22      	ldr	r2, [pc, #136]	; (8003f94 <UART_Start_Receive_DMA+0xc0>)
 8003f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	4a21      	ldr	r2, [pc, #132]	; (8003f98 <UART_Start_Receive_DMA+0xc4>)
 8003f12:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	2200      	movs	r2, #0
 8003f1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003f1c:	f107 0308 	add.w	r3, r7, #8
 8003f20:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	f7fd ff92 	bl	8001e5c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003f38:	2300      	movs	r3, #0
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f64:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 0201 	orr.w	r2, r2, #1
 8003f74:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695a      	ldr	r2, [r3, #20]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f84:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	08003ce1 	.word	0x08003ce1
 8003f94:	08003d77 	.word	0x08003d77
 8003f98:	08003dad 	.word	0x08003dad

08003f9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003fb2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003fdc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695a      	ldr	r2, [r3, #20]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0201 	bic.w	r2, r2, #1
 8003fec:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d107      	bne.n	8004006 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0210 	bic.w	r2, r2, #16
 8004004:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b084      	sub	sp, #16
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f7ff fe48 	bl	8003cce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800403e:	bf00      	nop
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004046:	b480      	push	{r7}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b21      	cmp	r3, #33	; 0x21
 8004058:	d13e      	bne.n	80040d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004062:	d114      	bne.n	800408e <UART_Transmit_IT+0x48>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d110      	bne.n	800408e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004080:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	1c9a      	adds	r2, r3, #2
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	621a      	str	r2, [r3, #32]
 800408c:	e008      	b.n	80040a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	1c59      	adds	r1, r3, #1
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6211      	str	r1, [r2, #32]
 8004098:	781a      	ldrb	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	4619      	mov	r1, r3
 80040ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10f      	bne.n	80040d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	e000      	b.n	80040da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040d8:	2302      	movs	r3, #2
  }
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff fdc7 	bl	8003c98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b22      	cmp	r3, #34	; 0x22
 8004126:	f040 8099 	bne.w	800425c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004132:	d117      	bne.n	8004164 <UART_Receive_IT+0x50>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d113      	bne.n	8004164 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800413c:	2300      	movs	r3, #0
 800413e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004144:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	b29b      	uxth	r3, r3
 800414e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004152:	b29a      	uxth	r2, r3
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415c:	1c9a      	adds	r2, r3, #2
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	629a      	str	r2, [r3, #40]	; 0x28
 8004162:	e026      	b.n	80041b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004168:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004176:	d007      	beq.n	8004188 <UART_Receive_IT+0x74>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10a      	bne.n	8004196 <UART_Receive_IT+0x82>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d106      	bne.n	8004196 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	b2da      	uxtb	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	701a      	strb	r2, [r3, #0]
 8004194:	e008      	b.n	80041a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	4619      	mov	r1, r3
 80041c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d148      	bne.n	8004258 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0220 	bic.w	r2, r2, #32
 80041d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695a      	ldr	r2, [r3, #20]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	2b01      	cmp	r3, #1
 8004204:	d123      	bne.n	800424e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0210 	bic.w	r2, r2, #16
 800421a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b10      	cmp	r3, #16
 8004228:	d10a      	bne.n	8004240 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004244:	4619      	mov	r1, r3
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fc fcea 	bl	8000c20 <HAL_UARTEx_RxEventCallback>
 800424c:	e002      	b.n	8004254 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff fd2b 	bl	8003caa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	e002      	b.n	800425e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e000      	b.n	800425e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800425c:	2302      	movs	r3, #2
  }
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042a2:	f023 030c 	bic.w	r3, r3, #12
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6812      	ldr	r2, [r2, #0]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	430b      	orrs	r3, r1
 80042ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a2c      	ldr	r2, [pc, #176]	; (800437c <UART_SetConfig+0x114>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d103      	bne.n	80042d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042d0:	f7fe fdbc 	bl	8002e4c <HAL_RCC_GetPCLK2Freq>
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	e002      	b.n	80042de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042d8:	f7fe fda4 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 80042dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	009a      	lsls	r2, r3, #2
 80042e8:	441a      	add	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f4:	4a22      	ldr	r2, [pc, #136]	; (8004380 <UART_SetConfig+0x118>)
 80042f6:	fba2 2303 	umull	r2, r3, r2, r3
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	0119      	lsls	r1, r3, #4
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	009a      	lsls	r2, r3, #2
 8004308:	441a      	add	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	fbb2 f2f3 	udiv	r2, r2, r3
 8004314:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <UART_SetConfig+0x118>)
 8004316:	fba3 0302 	umull	r0, r3, r3, r2
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	2064      	movs	r0, #100	; 0x64
 800431e:	fb00 f303 	mul.w	r3, r0, r3
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	3332      	adds	r3, #50	; 0x32
 8004328:	4a15      	ldr	r2, [pc, #84]	; (8004380 <UART_SetConfig+0x118>)
 800432a:	fba2 2303 	umull	r2, r3, r2, r3
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004334:	4419      	add	r1, r3
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	009a      	lsls	r2, r3, #2
 8004340:	441a      	add	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	fbb2 f2f3 	udiv	r2, r2, r3
 800434c:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <UART_SetConfig+0x118>)
 800434e:	fba3 0302 	umull	r0, r3, r3, r2
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2064      	movs	r0, #100	; 0x64
 8004356:	fb00 f303 	mul.w	r3, r0, r3
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	3332      	adds	r3, #50	; 0x32
 8004360:	4a07      	ldr	r2, [pc, #28]	; (8004380 <UART_SetConfig+0x118>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	f003 020f 	and.w	r2, r3, #15
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	440a      	add	r2, r1
 8004372:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004374:	bf00      	nop
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40013800 	.word	0x40013800
 8004380:	51eb851f 	.word	0x51eb851f

08004384 <__libc_init_array>:
 8004384:	b570      	push	{r4, r5, r6, lr}
 8004386:	2600      	movs	r6, #0
 8004388:	4d0c      	ldr	r5, [pc, #48]	; (80043bc <__libc_init_array+0x38>)
 800438a:	4c0d      	ldr	r4, [pc, #52]	; (80043c0 <__libc_init_array+0x3c>)
 800438c:	1b64      	subs	r4, r4, r5
 800438e:	10a4      	asrs	r4, r4, #2
 8004390:	42a6      	cmp	r6, r4
 8004392:	d109      	bne.n	80043a8 <__libc_init_array+0x24>
 8004394:	f000 f822 	bl	80043dc <_init>
 8004398:	2600      	movs	r6, #0
 800439a:	4d0a      	ldr	r5, [pc, #40]	; (80043c4 <__libc_init_array+0x40>)
 800439c:	4c0a      	ldr	r4, [pc, #40]	; (80043c8 <__libc_init_array+0x44>)
 800439e:	1b64      	subs	r4, r4, r5
 80043a0:	10a4      	asrs	r4, r4, #2
 80043a2:	42a6      	cmp	r6, r4
 80043a4:	d105      	bne.n	80043b2 <__libc_init_array+0x2e>
 80043a6:	bd70      	pop	{r4, r5, r6, pc}
 80043a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ac:	4798      	blx	r3
 80043ae:	3601      	adds	r6, #1
 80043b0:	e7ee      	b.n	8004390 <__libc_init_array+0xc>
 80043b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b6:	4798      	blx	r3
 80043b8:	3601      	adds	r6, #1
 80043ba:	e7f2      	b.n	80043a2 <__libc_init_array+0x1e>
 80043bc:	0800441c 	.word	0x0800441c
 80043c0:	0800441c 	.word	0x0800441c
 80043c4:	0800441c 	.word	0x0800441c
 80043c8:	08004420 	.word	0x08004420

080043cc <memset>:
 80043cc:	4603      	mov	r3, r0
 80043ce:	4402      	add	r2, r0
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d100      	bne.n	80043d6 <memset+0xa>
 80043d4:	4770      	bx	lr
 80043d6:	f803 1b01 	strb.w	r1, [r3], #1
 80043da:	e7f9      	b.n	80043d0 <memset+0x4>

080043dc <_init>:
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043de:	bf00      	nop
 80043e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e2:	bc08      	pop	{r3}
 80043e4:	469e      	mov	lr, r3
 80043e6:	4770      	bx	lr

080043e8 <_fini>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	bf00      	nop
 80043ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ee:	bc08      	pop	{r3}
 80043f0:	469e      	mov	lr, r3
 80043f2:	4770      	bx	lr
