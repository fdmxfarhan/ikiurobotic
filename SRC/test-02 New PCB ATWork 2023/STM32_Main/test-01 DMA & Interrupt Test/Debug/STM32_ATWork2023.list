
STM32_ATWork2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003238  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003344  08003344  00013344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800336c  0800336c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800336c  0800336c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800336c  0800336c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800336c  0800336c  0001336c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003370  08003370  00013370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000014  08003388  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003388  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ee0  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001907  00000000  00000000  00029f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  0002b828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  0002c428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c4a  00000000  00000000  0002cf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be3c  00000000  00000000  00043bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086769  00000000  00000000  0004fa16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d617f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003364  00000000  00000000  000d61d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	0800332c 	.word	0x0800332c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	0800332c 	.word	0x0800332c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <motor>:
uint8_t GY_Init_Command[]    = {0xA5, 0x54, 0xA5, 0x51};
uint8_t GY_Request_Command[] = {0xA5, 0x51};



void motor(int L1, int L2, int R2, int R1){
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	603b      	str	r3, [r7, #0]
	L1 = L1*255;
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	4613      	mov	r3, r2
 800094a:	021b      	lsls	r3, r3, #8
 800094c:	1a9b      	subs	r3, r3, r2
 800094e:	60fb      	str	r3, [r7, #12]
	L2 = L2*255;
 8000950:	68ba      	ldr	r2, [r7, #8]
 8000952:	4613      	mov	r3, r2
 8000954:	021b      	lsls	r3, r3, #8
 8000956:	1a9b      	subs	r3, r3, r2
 8000958:	60bb      	str	r3, [r7, #8]
	R2 = R2*255;
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	4613      	mov	r3, r2
 800095e:	021b      	lsls	r3, r3, #8
 8000960:	1a9b      	subs	r3, r3, r2
 8000962:	607b      	str	r3, [r7, #4]
	R1 = R1*255;
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	4613      	mov	r3, r2
 8000968:	021b      	lsls	r3, r3, #8
 800096a:	1a9b      	subs	r3, r3, r2
 800096c:	603b      	str	r3, [r7, #0]

	if(L1 > 65535) L1 = 65535;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000974:	db02      	blt.n	800097c <motor+0x44>
 8000976:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800097a:	60fb      	str	r3, [r7, #12]
	if(L2 > 65535) L2 = 65535;
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000982:	db02      	blt.n	800098a <motor+0x52>
 8000984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000988:	60bb      	str	r3, [r7, #8]
	if(R2 > 65535) R2 = 65535;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000990:	db02      	blt.n	8000998 <motor+0x60>
 8000992:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000996:	607b      	str	r3, [r7, #4]
	if(R1 > 65535) R1 = 65535;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800099e:	db02      	blt.n	80009a6 <motor+0x6e>
 80009a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009a4:	603b      	str	r3, [r7, #0]

	if(L1 < -65535) L1 = -65535;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80009ac:	dc01      	bgt.n	80009b2 <motor+0x7a>
 80009ae:	4b77      	ldr	r3, [pc, #476]	; (8000b8c <motor+0x254>)
 80009b0:	60fb      	str	r3, [r7, #12]
	if(L2 < -65535) L2 = -65535;
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80009b8:	dc01      	bgt.n	80009be <motor+0x86>
 80009ba:	4b74      	ldr	r3, [pc, #464]	; (8000b8c <motor+0x254>)
 80009bc:	60bb      	str	r3, [r7, #8]
	if(R2 < -65535) R2 = -65535;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80009c4:	dc01      	bgt.n	80009ca <motor+0x92>
 80009c6:	4b71      	ldr	r3, [pc, #452]	; (8000b8c <motor+0x254>)
 80009c8:	607b      	str	r3, [r7, #4]
	if(R1 < -65535) R1 = -65535;
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80009d0:	dc01      	bgt.n	80009d6 <motor+0x9e>
 80009d2:	4b6e      	ldr	r3, [pc, #440]	; (8000b8c <motor+0x254>)
 80009d4:	603b      	str	r3, [r7, #0]

	// ------------------ L1
	if(L1 == 0){
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d110      	bne.n	80009fe <motor+0xc6>
		HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e2:	486b      	ldr	r0, [pc, #428]	; (8000b90 <motor+0x258>)
 80009e4:	f001 f8e2 	bl	8001bac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ee:	4868      	ldr	r0, [pc, #416]	; (8000b90 <motor+0x258>)
 80009f0:	f001 f8dc 	bl	8001bac <HAL_GPIO_WritePin>
		TIM4->CCR1 = 65535;
 80009f4:	4b67      	ldr	r3, [pc, #412]	; (8000b94 <motor+0x25c>)
 80009f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009fa:	635a      	str	r2, [r3, #52]	; 0x34
 80009fc:	e022      	b.n	8000a44 <motor+0x10c>
	}
	else if(L1 > 0){
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	dd0f      	ble.n	8000a24 <motor+0xec>
		HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, 1);
 8000a04:	2201      	movs	r2, #1
 8000a06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a0a:	4861      	ldr	r0, [pc, #388]	; (8000b90 <motor+0x258>)
 8000a0c:	f001 f8ce 	bl	8001bac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a16:	485e      	ldr	r0, [pc, #376]	; (8000b90 <motor+0x258>)
 8000a18:	f001 f8c8 	bl	8001bac <HAL_GPIO_WritePin>
		TIM4->CCR1 = L1;
 8000a1c:	4a5d      	ldr	r2, [pc, #372]	; (8000b94 <motor+0x25c>)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	6353      	str	r3, [r2, #52]	; 0x34
 8000a22:	e00f      	b.n	8000a44 <motor+0x10c>
	}else{
		HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a2a:	4859      	ldr	r0, [pc, #356]	; (8000b90 <motor+0x258>)
 8000a2c:	f001 f8be 	bl	8001bac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, 1);
 8000a30:	2201      	movs	r2, #1
 8000a32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a36:	4856      	ldr	r0, [pc, #344]	; (8000b90 <motor+0x258>)
 8000a38:	f001 f8b8 	bl	8001bac <HAL_GPIO_WritePin>
		TIM4->CCR1 = -L1;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	425a      	negs	r2, r3
 8000a40:	4b54      	ldr	r3, [pc, #336]	; (8000b94 <motor+0x25c>)
 8000a42:	635a      	str	r2, [r3, #52]	; 0x34
	}
	// ------------------ L2
	if(L2 == 0){
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d110      	bne.n	8000a6c <motor+0x134>
		HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a50:	484f      	ldr	r0, [pc, #316]	; (8000b90 <motor+0x258>)
 8000a52:	f001 f8ab 	bl	8001bac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5c:	484c      	ldr	r0, [pc, #304]	; (8000b90 <motor+0x258>)
 8000a5e:	f001 f8a5 	bl	8001bac <HAL_GPIO_WritePin>
		TIM4->CCR2 = 65535;
 8000a62:	4b4c      	ldr	r3, [pc, #304]	; (8000b94 <motor+0x25c>)
 8000a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a68:	639a      	str	r2, [r3, #56]	; 0x38
 8000a6a:	e022      	b.n	8000ab2 <motor+0x17a>
	}
	else if(L2 > 0){
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	dd0f      	ble.n	8000a92 <motor+0x15a>
		HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, 1);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a78:	4845      	ldr	r0, [pc, #276]	; (8000b90 <motor+0x258>)
 8000a7a:	f001 f897 	bl	8001bac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a84:	4842      	ldr	r0, [pc, #264]	; (8000b90 <motor+0x258>)
 8000a86:	f001 f891 	bl	8001bac <HAL_GPIO_WritePin>
		TIM4->CCR2 = L2;
 8000a8a:	4a42      	ldr	r2, [pc, #264]	; (8000b94 <motor+0x25c>)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38
 8000a90:	e00f      	b.n	8000ab2 <motor+0x17a>
	}else{
		HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a98:	483d      	ldr	r0, [pc, #244]	; (8000b90 <motor+0x258>)
 8000a9a:	f001 f887 	bl	8001bac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, 1);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa4:	483a      	ldr	r0, [pc, #232]	; (8000b90 <motor+0x258>)
 8000aa6:	f001 f881 	bl	8001bac <HAL_GPIO_WritePin>
		TIM4->CCR2 = -L2;
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	425a      	negs	r2, r3
 8000aae:	4b39      	ldr	r3, [pc, #228]	; (8000b94 <motor+0x25c>)
 8000ab0:	639a      	str	r2, [r3, #56]	; 0x38
	}
	// ------------------ R2
	if(R2 == 0){
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d110      	bne.n	8000ada <motor+0x1a2>
		HAL_GPIO_WritePin(INA3_GPIO_Port, INA3_Pin, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000abe:	4836      	ldr	r0, [pc, #216]	; (8000b98 <motor+0x260>)
 8000ac0:	f001 f874 	bl	8001bac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB3_GPIO_Port, INB3_Pin, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aca:	4833      	ldr	r0, [pc, #204]	; (8000b98 <motor+0x260>)
 8000acc:	f001 f86e 	bl	8001bac <HAL_GPIO_WritePin>
		TIM4->CCR3 = 65535;
 8000ad0:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <motor+0x25c>)
 8000ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ad8:	e022      	b.n	8000b20 <motor+0x1e8>
	}
	else if(R2 > 0){
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	dd0f      	ble.n	8000b00 <motor+0x1c8>
		HAL_GPIO_WritePin(INA3_GPIO_Port, INA3_Pin, 1);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae6:	482c      	ldr	r0, [pc, #176]	; (8000b98 <motor+0x260>)
 8000ae8:	f001 f860 	bl	8001bac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB3_GPIO_Port, INB3_Pin, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af2:	4829      	ldr	r0, [pc, #164]	; (8000b98 <motor+0x260>)
 8000af4:	f001 f85a 	bl	8001bac <HAL_GPIO_WritePin>
		TIM4->CCR3 = R2;
 8000af8:	4a26      	ldr	r2, [pc, #152]	; (8000b94 <motor+0x25c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000afe:	e00f      	b.n	8000b20 <motor+0x1e8>
	}else{
		HAL_GPIO_WritePin(INA3_GPIO_Port, INA3_Pin, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b06:	4824      	ldr	r0, [pc, #144]	; (8000b98 <motor+0x260>)
 8000b08:	f001 f850 	bl	8001bac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB3_GPIO_Port, INB3_Pin, 1);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b12:	4821      	ldr	r0, [pc, #132]	; (8000b98 <motor+0x260>)
 8000b14:	f001 f84a 	bl	8001bac <HAL_GPIO_WritePin>
		TIM4->CCR3 = -R2;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	425a      	negs	r2, r3
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <motor+0x25c>)
 8000b1e:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	// ------------------ R1
	if(R1 == 0){
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10e      	bne.n	8000b44 <motor+0x20c>
		HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4819      	ldr	r0, [pc, #100]	; (8000b90 <motor+0x258>)
 8000b2c:	f001 f83e 	bl	8001bac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2120      	movs	r1, #32
 8000b34:	4816      	ldr	r0, [pc, #88]	; (8000b90 <motor+0x258>)
 8000b36:	f001 f839 	bl	8001bac <HAL_GPIO_WritePin>
		TIM4->CCR4 = 65535;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <motor+0x25c>)
 8000b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b40:	641a      	str	r2, [r3, #64]	; 0x40
	}else{
		HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, 0);
		HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, 1);
		TIM4->CCR4 = -R1;
	}
}
 8000b42:	e01e      	b.n	8000b82 <motor+0x24a>
	else if(R1 > 0){
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	dd0d      	ble.n	8000b66 <motor+0x22e>
		HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, 1);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2110      	movs	r1, #16
 8000b4e:	4810      	ldr	r0, [pc, #64]	; (8000b90 <motor+0x258>)
 8000b50:	f001 f82c 	bl	8001bac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2120      	movs	r1, #32
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <motor+0x258>)
 8000b5a:	f001 f827 	bl	8001bac <HAL_GPIO_WritePin>
		TIM4->CCR4 = R1;
 8000b5e:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <motor+0x25c>)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b64:	e00d      	b.n	8000b82 <motor+0x24a>
		HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2110      	movs	r1, #16
 8000b6a:	4809      	ldr	r0, [pc, #36]	; (8000b90 <motor+0x258>)
 8000b6c:	f001 f81e 	bl	8001bac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, 1);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2120      	movs	r1, #32
 8000b74:	4806      	ldr	r0, [pc, #24]	; (8000b90 <motor+0x258>)
 8000b76:	f001 f819 	bl	8001bac <HAL_GPIO_WritePin>
		TIM4->CCR4 = -R1;
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	425a      	negs	r2, r3
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <motor+0x25c>)
 8000b80:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	ffff0001 	.word	0xffff0001
 8000b90:	40010c00 	.word	0x40010c00
 8000b94:	40000800 	.word	0x40000800
 8000b98:	40010800 	.word	0x40010800

08000b9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba2:	f000 fc89 	bl	80014b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba6:	f000 f891 	bl	8000ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000baa:	f000 f9bb 	bl	8000f24 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000bae:	f000 f8c9 	bl	8000d44 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000bb2:	f000 f97b 	bl	8000eac <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000bb6:	f000 f93f 	bl	8000e38 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4837      	ldr	r0, [pc, #220]	; (8000c9c <main+0x100>)
 8000bbe:	f001 fc91 	bl	80024e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	4835      	ldr	r0, [pc, #212]	; (8000c9c <main+0x100>)
 8000bc6:	f001 fc8d 	bl	80024e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000bca:	2108      	movs	r1, #8
 8000bcc:	4833      	ldr	r0, [pc, #204]	; (8000c9c <main+0x100>)
 8000bce:	f001 fc89 	bl	80024e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000bd2:	210c      	movs	r1, #12
 8000bd4:	4831      	ldr	r0, [pc, #196]	; (8000c9c <main+0x100>)
 8000bd6:	f001 fc85 	bl	80024e4 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // Red LED
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be0:	482f      	ldr	r0, [pc, #188]	; (8000ca0 <main+0x104>)
 8000be2:	f000 ffe3 	bl	8001bac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0); // Red LED
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bec:	482c      	ldr	r0, [pc, #176]	; (8000ca0 <main+0x104>)
 8000bee:	f000 ffdd 	bl	8001bac <HAL_GPIO_WritePin>
  for(int i=0; i<5; i++){
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	e00f      	b.n	8000c18 <main+0x7c>
	  HAL_Delay(100);
 8000bf8:	2064      	movs	r0, #100	; 0x64
 8000bfa:	f000 fcbf 	bl	800157c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14); // Red LED
 8000bfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c02:	4827      	ldr	r0, [pc, #156]	; (8000ca0 <main+0x104>)
 8000c04:	f000 ffea 	bl	8001bdc <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Green LED
 8000c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0c:	4824      	ldr	r0, [pc, #144]	; (8000ca0 <main+0x104>)
 8000c0e:	f000 ffe5 	bl	8001bdc <HAL_GPIO_TogglePin>
  for(int i=0; i<5; i++){
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3301      	adds	r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	ddec      	ble.n	8000bf8 <main+0x5c>
  }
  RED_OFF;
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c24:	481e      	ldr	r0, [pc, #120]	; (8000ca0 <main+0x104>)
 8000c26:	f000 ffc1 	bl	8001bac <HAL_GPIO_WritePin>
  GREEN_OFF;
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c30:	481b      	ldr	r0, [pc, #108]	; (8000ca0 <main+0x104>)
 8000c32:	f000 ffbb 	bl	8001bac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1); // Motors Enable
 8000c36:	2201      	movs	r2, #1
 8000c38:	2108      	movs	r1, #8
 8000c3a:	481a      	ldr	r0, [pc, #104]	; (8000ca4 <main+0x108>)
 8000c3c:	f000 ffb6 	bl	8001bac <HAL_GPIO_WritePin>
  HAL_UART_Transmit_DMA(&huart2, GY_Init_Command, sizeof(GY_Init_Command));
 8000c40:	2204      	movs	r2, #4
 8000c42:	4919      	ldr	r1, [pc, #100]	; (8000ca8 <main+0x10c>)
 8000c44:	4819      	ldr	r0, [pc, #100]	; (8000cac <main+0x110>)
 8000c46:	f002 f867 	bl	8002d18 <HAL_UART_Transmit_DMA>
  HAL_UART_Receive_DMA(&huart2, buff, sizeof(buff));
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	4918      	ldr	r1, [pc, #96]	; (8000cb0 <main+0x114>)
 8000c4e:	4817      	ldr	r0, [pc, #92]	; (8000cac <main+0x110>)
 8000c50:	f002 f8ce 	bl	8002df0 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	readGY();
	HAL_UART_Transmit_DMA(&huart2, GY_Request_Command, sizeof(GY_Request_Command));
 8000c54:	2202      	movs	r2, #2
 8000c56:	4917      	ldr	r1, [pc, #92]	; (8000cb4 <main+0x118>)
 8000c58:	4814      	ldr	r0, [pc, #80]	; (8000cac <main+0x110>)
 8000c5a:	f002 f85d 	bl	8002d18 <HAL_UART_Transmit_DMA>
	motor(l1+Heading, l2+Heading, r2+Heading, r1+Heading);
 8000c5e:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <main+0x11c>)
 8000c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <main+0x120>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	18d0      	adds	r0, r2, r3
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <main+0x11c>)
 8000c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <main+0x124>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	18d1      	adds	r1, r2, r3
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <main+0x11c>)
 8000c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <main+0x128>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	441a      	add	r2, r3
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <main+0x11c>)
 8000c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c8e:	461c      	mov	r4, r3
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <main+0x12c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4423      	add	r3, r4
 8000c96:	f7ff fe4f 	bl	8000938 <motor>
	HAL_UART_Transmit_DMA(&huart2, GY_Request_Command, sizeof(GY_Request_Command));
 8000c9a:	e7db      	b.n	8000c54 <main+0xb8>
 8000c9c:	20000030 	.word	0x20000030
 8000ca0:	40011000 	.word	0x40011000
 8000ca4:	40010c00 	.word	0x40010c00
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	200000bc 	.word	0x200000bc
 8000cb0:	20000110 	.word	0x20000110
 8000cb4:	20000004 	.word	0x20000004
 8000cb8:	2000011c 	.word	0x2000011c
 8000cbc:	20000100 	.word	0x20000100
 8000cc0:	20000104 	.word	0x20000104
 8000cc4:	20000108 	.word	0x20000108
 8000cc8:	2000010c 	.word	0x2000010c

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b090      	sub	sp, #64	; 0x40
 8000cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd2:	f107 0318 	add.w	r3, r7, #24
 8000cd6:	2228      	movs	r2, #40	; 0x28
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f002 fb1e 	bl	800331c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf6:	2310      	movs	r3, #16
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfe:	f107 0318 	add.w	r3, r7, #24
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 ff84 	bl	8001c10 <HAL_RCC_OscConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d0e:	f000 fa71 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d12:	230f      	movs	r3, #15
 8000d14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f001 f9f2 	bl	8002114 <HAL_RCC_ClockConfig>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d36:	f000 fa5d 	bl	80011f4 <Error_Handler>
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	3740      	adds	r7, #64	; 0x40
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4a:	f107 0320 	add.w	r3, r7, #32
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]
 8000d62:	615a      	str	r2, [r3, #20]
 8000d64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d66:	4b32      	ldr	r3, [pc, #200]	; (8000e30 <MX_TIM4_Init+0xec>)
 8000d68:	4a32      	ldr	r2, [pc, #200]	; (8000e34 <MX_TIM4_Init+0xf0>)
 8000d6a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d6c:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <MX_TIM4_Init+0xec>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <MX_TIM4_Init+0xec>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <MX_TIM4_Init+0xec>)
 8000d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d80:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <MX_TIM4_Init+0xec>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d86:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <MX_TIM4_Init+0xec>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d8c:	4828      	ldr	r0, [pc, #160]	; (8000e30 <MX_TIM4_Init+0xec>)
 8000d8e:	f001 fb59 	bl	8002444 <HAL_TIM_PWM_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000d98:	f000 fa2c 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000da4:	f107 0320 	add.w	r3, r7, #32
 8000da8:	4619      	mov	r1, r3
 8000daa:	4821      	ldr	r0, [pc, #132]	; (8000e30 <MX_TIM4_Init+0xec>)
 8000dac:	f001 ff08 	bl	8002bc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000db6:	f000 fa1d 	bl	80011f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dba:	2360      	movs	r3, #96	; 0x60
 8000dbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4817      	ldr	r0, [pc, #92]	; (8000e30 <MX_TIM4_Init+0xec>)
 8000dd2:	f001 fc29 	bl	8002628 <HAL_TIM_PWM_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000ddc:	f000 fa0a 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2204      	movs	r2, #4
 8000de4:	4619      	mov	r1, r3
 8000de6:	4812      	ldr	r0, [pc, #72]	; (8000e30 <MX_TIM4_Init+0xec>)
 8000de8:	f001 fc1e 	bl	8002628 <HAL_TIM_PWM_ConfigChannel>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000df2:	f000 f9ff 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2208      	movs	r2, #8
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <MX_TIM4_Init+0xec>)
 8000dfe:	f001 fc13 	bl	8002628 <HAL_TIM_PWM_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8000e08:	f000 f9f4 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	220c      	movs	r2, #12
 8000e10:	4619      	mov	r1, r3
 8000e12:	4807      	ldr	r0, [pc, #28]	; (8000e30 <MX_TIM4_Init+0xec>)
 8000e14:	f001 fc08 	bl	8002628 <HAL_TIM_PWM_ConfigChannel>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8000e1e:	f000 f9e9 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e22:	4803      	ldr	r0, [pc, #12]	; (8000e30 <MX_TIM4_Init+0xec>)
 8000e24:	f000 fa3c 	bl	80012a0 <HAL_TIM_MspPostInit>

}
 8000e28:	bf00      	nop
 8000e2a:	3728      	adds	r7, #40	; 0x28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000030 	.word	0x20000030
 8000e34:	40000800 	.word	0x40000800

08000e38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_USART1_UART_Init+0x6c>)
 8000e3e:	4a1a      	ldr	r2, [pc, #104]	; (8000ea8 <MX_USART1_UART_Init+0x70>)
 8000e40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_USART1_UART_Init+0x6c>)
 8000e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <MX_USART1_UART_Init+0x6c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_USART1_UART_Init+0x6c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <MX_USART1_UART_Init+0x6c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_USART1_UART_Init+0x6c>)
 8000e5e:	220c      	movs	r2, #12
 8000e60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <MX_USART1_UART_Init+0x6c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_USART1_UART_Init+0x6c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e6e:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <MX_USART1_UART_Init+0x6c>)
 8000e70:	f001 ff04 	bl	8002c7c <HAL_UART_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e7a:	f000 f9bb 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  	__HAL_UART_ENABLE_IT(&huart1, UART_IT_TC);
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_USART1_UART_Init+0x6c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <MX_USART1_UART_Init+0x6c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e8c:	60da      	str	r2, [r3, #12]
  	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <MX_USART1_UART_Init+0x6c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <MX_USART1_UART_Init+0x6c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f042 0220 	orr.w	r2, r2, #32
 8000e9c:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000078 	.word	0x20000078
 8000ea8:	40013800 	.word	0x40013800

08000eac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_USART2_UART_Init+0x6c>)
 8000eb2:	4a1a      	ldr	r2, [pc, #104]	; (8000f1c <MX_USART2_UART_Init+0x70>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eb6:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <MX_USART2_UART_Init+0x6c>)
 8000eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ebc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_USART2_UART_Init+0x6c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_USART2_UART_Init+0x6c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_USART2_UART_Init+0x6c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_USART2_UART_Init+0x6c>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <MX_USART2_UART_Init+0x6c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_USART2_UART_Init+0x6c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <MX_USART2_UART_Init+0x6c>)
 8000ee4:	f001 feca 	bl	8002c7c <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eee:	f000 f981 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_TC);
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <MX_USART2_UART_Init+0x74>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <MX_USART2_UART_Init+0x74>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f00:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <MX_USART2_UART_Init+0x74>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <MX_USART2_UART_Init+0x74>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f042 0220 	orr.w	r2, r2, #32
 8000f10:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000bc 	.word	0x200000bc
 8000f1c:	40004400 	.word	0x40004400
 8000f20:	20000078 	.word	0x20000078

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f38:	4b39      	ldr	r3, [pc, #228]	; (8001020 <MX_GPIO_Init+0xfc>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a38      	ldr	r2, [pc, #224]	; (8001020 <MX_GPIO_Init+0xfc>)
 8000f3e:	f043 0310 	orr.w	r3, r3, #16
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b36      	ldr	r3, [pc, #216]	; (8001020 <MX_GPIO_Init+0xfc>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0310 	and.w	r3, r3, #16
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f50:	4b33      	ldr	r3, [pc, #204]	; (8001020 <MX_GPIO_Init+0xfc>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a32      	ldr	r2, [pc, #200]	; (8001020 <MX_GPIO_Init+0xfc>)
 8000f56:	f043 0320 	orr.w	r3, r3, #32
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b30      	ldr	r3, [pc, #192]	; (8001020 <MX_GPIO_Init+0xfc>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0320 	and.w	r3, r3, #32
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f68:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <MX_GPIO_Init+0xfc>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a2c      	ldr	r2, [pc, #176]	; (8001020 <MX_GPIO_Init+0xfc>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <MX_GPIO_Init+0xfc>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f80:	4b27      	ldr	r3, [pc, #156]	; (8001020 <MX_GPIO_Init+0xfc>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a26      	ldr	r2, [pc, #152]	; (8001020 <MX_GPIO_Init+0xfc>)
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b24      	ldr	r3, [pc, #144]	; (8001020 <MX_GPIO_Init+0xfc>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000f9e:	4821      	ldr	r0, [pc, #132]	; (8001024 <MX_GPIO_Init+0x100>)
 8000fa0:	f000 fe04 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INA2_Pin|INB2_Pin|INA1_Pin|INB1_Pin
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f24f 0138 	movw	r1, #61496	; 0xf038
 8000faa:	481f      	ldr	r0, [pc, #124]	; (8001028 <MX_GPIO_Init+0x104>)
 8000fac:	f000 fdfe 	bl	8001bac <HAL_GPIO_WritePin>
                          |MOTORS_EN_Pin|INA4_Pin|INB4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INA3_Pin|INB3_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000fb6:	481d      	ldr	r0, [pc, #116]	; (800102c <MX_GPIO_Init+0x108>)
 8000fb8:	f000 fdf8 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000fbc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000fc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4813      	ldr	r0, [pc, #76]	; (8001024 <MX_GPIO_Init+0x100>)
 8000fd6:	f000 fc65 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INA2_Pin INB2_Pin INA1_Pin INB1_Pin
                           MOTORS_EN_Pin INA4_Pin INB4_Pin */
  GPIO_InitStruct.Pin = INA2_Pin|INB2_Pin|INA1_Pin|INB1_Pin
 8000fda:	f24f 0338 	movw	r3, #61496	; 0xf038
 8000fde:	613b      	str	r3, [r7, #16]
                          |MOTORS_EN_Pin|INA4_Pin|INB4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480d      	ldr	r0, [pc, #52]	; (8001028 <MX_GPIO_Init+0x104>)
 8000ff4:	f000 fc56 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INA3_Pin INB3_Pin */
  GPIO_InitStruct.Pin = INA3_Pin|INB3_Pin;
 8000ff8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ffc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2302      	movs	r3, #2
 8001008:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4619      	mov	r1, r3
 8001010:	4806      	ldr	r0, [pc, #24]	; (800102c <MX_GPIO_Init+0x108>)
 8001012:	f000 fc47 	bl	80018a4 <HAL_GPIO_Init>

}
 8001016:	bf00      	nop
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000
 8001024:	40011000 	.word	0x40011000
 8001028:	40010c00 	.word	0x40010c00
 800102c:	40010800 	.word	0x40010800

08001030 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
//		  if(buffer[7]=='-') 	l1 =-(int)buffer[8];
//		  else  				l1 = (int)buffer[8];
//		}
//		RED_OFF;
//	}
	if(huart == &huart2){
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a62      	ldr	r2, [pc, #392]	; (80011c4 <HAL_UART_RxCpltCallback+0x194>)
 800103c:	4293      	cmp	r3, r2
 800103e:	f040 80bc 	bne.w	80011ba <HAL_UART_RxCpltCallback+0x18a>
		GREEN_ON;
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001048:	485f      	ldr	r0, [pc, #380]	; (80011c8 <HAL_UART_RxCpltCallback+0x198>)
 800104a:	f000 fdaf 	bl	8001bac <HAL_GPIO_WritePin>
		HAL_UART_Receive_DMA(&huart2, buff, sizeof(buff));
 800104e:	2208      	movs	r2, #8
 8001050:	495e      	ldr	r1, [pc, #376]	; (80011cc <HAL_UART_RxCpltCallback+0x19c>)
 8001052:	485c      	ldr	r0, [pc, #368]	; (80011c4 <HAL_UART_RxCpltCallback+0x194>)
 8001054:	f001 fecc 	bl	8002df0 <HAL_UART_Receive_DMA>
		if(buff[0] == 0x55){
 8001058:	4b5c      	ldr	r3, [pc, #368]	; (80011cc <HAL_UART_RxCpltCallback+0x19c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b55      	cmp	r3, #85	; 0x55
 800105e:	d151      	bne.n	8001104 <HAL_UART_RxCpltCallback+0xd4>
			Heading = (int16_t)(buff[2]<<8 | buff[3])/100.00;
 8001060:	4b5a      	ldr	r3, [pc, #360]	; (80011cc <HAL_UART_RxCpltCallback+0x19c>)
 8001062:	789b      	ldrb	r3, [r3, #2]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	4b58      	ldr	r3, [pc, #352]	; (80011cc <HAL_UART_RxCpltCallback+0x19c>)
 800106a:	78db      	ldrb	r3, [r3, #3]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff f9bc 	bl	80003f0 <__aeabi_i2d>
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	4b54      	ldr	r3, [pc, #336]	; (80011d0 <HAL_UART_RxCpltCallback+0x1a0>)
 800107e:	f7ff fb4b 	bl	8000718 <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fc2d 	bl	80008e8 <__aeabi_d2iz>
 800108e:	4603      	mov	r3, r0
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b50      	ldr	r3, [pc, #320]	; (80011d4 <HAL_UART_RxCpltCallback+0x1a4>)
 8001094:	801a      	strh	r2, [r3, #0]
			Pitch = (int16_t)(buff[4]<<8 | buff[5])/100.00;
 8001096:	4b4d      	ldr	r3, [pc, #308]	; (80011cc <HAL_UART_RxCpltCallback+0x19c>)
 8001098:	791b      	ldrb	r3, [r3, #4]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	b21a      	sxth	r2, r3
 800109e:	4b4b      	ldr	r3, [pc, #300]	; (80011cc <HAL_UART_RxCpltCallback+0x19c>)
 80010a0:	795b      	ldrb	r3, [r3, #5]
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff f9a1 	bl	80003f0 <__aeabi_i2d>
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	4b47      	ldr	r3, [pc, #284]	; (80011d0 <HAL_UART_RxCpltCallback+0x1a0>)
 80010b4:	f7ff fb30 	bl	8000718 <__aeabi_ddiv>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fc12 	bl	80008e8 <__aeabi_d2iz>
 80010c4:	4603      	mov	r3, r0
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	4b43      	ldr	r3, [pc, #268]	; (80011d8 <HAL_UART_RxCpltCallback+0x1a8>)
 80010ca:	801a      	strh	r2, [r3, #0]
			Roll = (int16_t)(buff[6]<<8 | buff[7])/100.00;
 80010cc:	4b3f      	ldr	r3, [pc, #252]	; (80011cc <HAL_UART_RxCpltCallback+0x19c>)
 80010ce:	799b      	ldrb	r3, [r3, #6]
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <HAL_UART_RxCpltCallback+0x19c>)
 80010d6:	79db      	ldrb	r3, [r3, #7]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	4313      	orrs	r3, r2
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f986 	bl	80003f0 <__aeabi_i2d>
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	4b39      	ldr	r3, [pc, #228]	; (80011d0 <HAL_UART_RxCpltCallback+0x1a0>)
 80010ea:	f7ff fb15 	bl	8000718 <__aeabi_ddiv>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff fbf7 	bl	80008e8 <__aeabi_d2iz>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	4b37      	ldr	r3, [pc, #220]	; (80011dc <HAL_UART_RxCpltCallback+0x1ac>)
 8001100:	801a      	strh	r2, [r3, #0]
 8001102:	e054      	b.n	80011ae <HAL_UART_RxCpltCallback+0x17e>
		}else if(buff[0] == 0xAA){
 8001104:	4b31      	ldr	r3, [pc, #196]	; (80011cc <HAL_UART_RxCpltCallback+0x19c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2baa      	cmp	r3, #170	; 0xaa
 800110a:	d150      	bne.n	80011ae <HAL_UART_RxCpltCallback+0x17e>
			Heading = (int16_t)(buff[1]<<8 | buff[2])/100.00;
 800110c:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_UART_RxCpltCallback+0x19c>)
 800110e:	785b      	ldrb	r3, [r3, #1]
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	b21a      	sxth	r2, r3
 8001114:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <HAL_UART_RxCpltCallback+0x19c>)
 8001116:	789b      	ldrb	r3, [r3, #2]
 8001118:	b21b      	sxth	r3, r3
 800111a:	4313      	orrs	r3, r2
 800111c:	b21b      	sxth	r3, r3
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f966 	bl	80003f0 <__aeabi_i2d>
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <HAL_UART_RxCpltCallback+0x1a0>)
 800112a:	f7ff faf5 	bl	8000718 <__aeabi_ddiv>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	f7ff fbd7 	bl	80008e8 <__aeabi_d2iz>
 800113a:	4603      	mov	r3, r0
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <HAL_UART_RxCpltCallback+0x1a4>)
 8001140:	801a      	strh	r2, [r3, #0]
			Pitch = (int16_t)(buff[3]<<8 | buff[4])/100.00;
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <HAL_UART_RxCpltCallback+0x19c>)
 8001144:	78db      	ldrb	r3, [r3, #3]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <HAL_UART_RxCpltCallback+0x19c>)
 800114c:	791b      	ldrb	r3, [r3, #4]
 800114e:	b21b      	sxth	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b21b      	sxth	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff f94b 	bl	80003f0 <__aeabi_i2d>
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_UART_RxCpltCallback+0x1a0>)
 8001160:	f7ff fada 	bl	8000718 <__aeabi_ddiv>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fbbc 	bl	80008e8 <__aeabi_d2iz>
 8001170:	4603      	mov	r3, r0
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_UART_RxCpltCallback+0x1a8>)
 8001176:	801a      	strh	r2, [r3, #0]
			Roll = (int16_t)(buff[5]<<8 | buff[6])/100.00;
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_UART_RxCpltCallback+0x19c>)
 800117a:	795b      	ldrb	r3, [r3, #5]
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	b21a      	sxth	r2, r3
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_UART_RxCpltCallback+0x19c>)
 8001182:	799b      	ldrb	r3, [r3, #6]
 8001184:	b21b      	sxth	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b21b      	sxth	r3, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f930 	bl	80003f0 <__aeabi_i2d>
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_UART_RxCpltCallback+0x1a0>)
 8001196:	f7ff fabf 	bl	8000718 <__aeabi_ddiv>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff fba1 	bl	80008e8 <__aeabi_d2iz>
 80011a6:	4603      	mov	r3, r0
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <HAL_UART_RxCpltCallback+0x1ac>)
 80011ac:	801a      	strh	r2, [r3, #0]
		}
		GREEN_OFF;
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <HAL_UART_RxCpltCallback+0x198>)
 80011b6:	f000 fcf9 	bl	8001bac <HAL_GPIO_WritePin>
	}
	__NOP();
 80011ba:	bf00      	nop
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200000bc 	.word	0x200000bc
 80011c8:	40011000 	.word	0x40011000
 80011cc:	20000110 	.word	0x20000110
 80011d0:	40590000 	.word	0x40590000
 80011d4:	2000011c 	.word	0x2000011c
 80011d8:	20000118 	.word	0x20000118
 80011dc:	2000011a 	.word	0x2000011a

080011e0 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	__NOP();
 80011e8:	bf00      	nop
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011fc:	e7fe      	b.n	80011fc <Error_Handler+0x8>
	...

08001200 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_MspInit+0x5c>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	4a14      	ldr	r2, [pc, #80]	; (800125c <HAL_MspInit+0x5c>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6193      	str	r3, [r2, #24]
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_MspInit+0x5c>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_MspInit+0x5c>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a0e      	ldr	r2, [pc, #56]	; (800125c <HAL_MspInit+0x5c>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	61d3      	str	r3, [r2, #28]
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <HAL_MspInit+0x5c>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_MspInit+0x60>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <HAL_MspInit+0x60>)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	40021000 	.word	0x40021000
 8001260:	40010000 	.word	0x40010000

08001264 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a09      	ldr	r2, [pc, #36]	; (8001298 <HAL_TIM_PWM_MspInit+0x34>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d10b      	bne.n	800128e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_TIM_PWM_MspInit+0x38>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	4a08      	ldr	r2, [pc, #32]	; (800129c <HAL_TIM_PWM_MspInit+0x38>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	61d3      	str	r3, [r2, #28]
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_TIM_PWM_MspInit+0x38>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	40000800 	.word	0x40000800
 800129c:	40021000 	.word	0x40021000

080012a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a10      	ldr	r2, [pc, #64]	; (80012fc <HAL_TIM_MspPostInit+0x5c>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d118      	bne.n	80012f2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <HAL_TIM_MspPostInit+0x60>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <HAL_TIM_MspPostInit+0x60>)
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <HAL_TIM_MspPostInit+0x60>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM4_Pin;
 80012d8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80012dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2302      	movs	r3, #2
 80012e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <HAL_TIM_MspPostInit+0x64>)
 80012ee:	f000 fad9 	bl	80018a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3720      	adds	r7, #32
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40000800 	.word	0x40000800
 8001300:	40021000 	.word	0x40021000
 8001304:	40010c00 	.word	0x40010c00

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a37      	ldr	r2, [pc, #220]	; (8001400 <HAL_UART_MspInit+0xf8>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d132      	bne.n	800138e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001328:	4b36      	ldr	r3, [pc, #216]	; (8001404 <HAL_UART_MspInit+0xfc>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a35      	ldr	r2, [pc, #212]	; (8001404 <HAL_UART_MspInit+0xfc>)
 800132e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b33      	ldr	r3, [pc, #204]	; (8001404 <HAL_UART_MspInit+0xfc>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <HAL_UART_MspInit+0xfc>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a2f      	ldr	r2, [pc, #188]	; (8001404 <HAL_UART_MspInit+0xfc>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <HAL_UART_MspInit+0xfc>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001358:	f44f 7300 	mov.w	r3, #512	; 0x200
 800135c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f107 0318 	add.w	r3, r7, #24
 800136a:	4619      	mov	r1, r3
 800136c:	4826      	ldr	r0, [pc, #152]	; (8001408 <HAL_UART_MspInit+0x100>)
 800136e:	f000 fa99 	bl	80018a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	4619      	mov	r1, r3
 8001386:	4820      	ldr	r0, [pc, #128]	; (8001408 <HAL_UART_MspInit+0x100>)
 8001388:	f000 fa8c 	bl	80018a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800138c:	e034      	b.n	80013f8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a1e      	ldr	r2, [pc, #120]	; (800140c <HAL_UART_MspInit+0x104>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d12f      	bne.n	80013f8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <HAL_UART_MspInit+0xfc>)
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	4a19      	ldr	r2, [pc, #100]	; (8001404 <HAL_UART_MspInit+0xfc>)
 800139e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a2:	61d3      	str	r3, [r2, #28]
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <HAL_UART_MspInit+0xfc>)
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <HAL_UART_MspInit+0xfc>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a13      	ldr	r2, [pc, #76]	; (8001404 <HAL_UART_MspInit+0xfc>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_UART_MspInit+0xfc>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013c8:	2304      	movs	r3, #4
 80013ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0318 	add.w	r3, r7, #24
 80013d8:	4619      	mov	r1, r3
 80013da:	480b      	ldr	r0, [pc, #44]	; (8001408 <HAL_UART_MspInit+0x100>)
 80013dc:	f000 fa62 	bl	80018a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013e0:	2308      	movs	r3, #8
 80013e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0318 	add.w	r3, r7, #24
 80013f0:	4619      	mov	r1, r3
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <HAL_UART_MspInit+0x100>)
 80013f4:	f000 fa56 	bl	80018a4 <HAL_GPIO_Init>
}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40013800 	.word	0x40013800
 8001404:	40021000 	.word	0x40021000
 8001408:	40010800 	.word	0x40010800
 800140c:	40004400 	.word	0x40004400

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <NMI_Handler+0x4>

08001416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <MemManage_Handler+0x4>

08001422 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <UsageFault_Handler+0x4>

0800142e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001456:	f000 f875 	bl	8001544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}

0800145e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
	...

0800146c <Reset_Handler>:
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <LoopFillZerobss+0x12>)
 800146e:	490d      	ldr	r1, [pc, #52]	; (80014a4 <LoopFillZerobss+0x16>)
 8001470:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <LoopFillZerobss+0x1a>)
 8001472:	2300      	movs	r3, #0
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:
 8001476:	58d4      	ldr	r4, [r2, r3]
 8001478:	50c4      	str	r4, [r0, r3]
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:
 800147c:	18c4      	adds	r4, r0, r3
 800147e:	428c      	cmp	r4, r1
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <LoopFillZerobss+0x1e>)
 8001484:	4c0a      	ldr	r4, [pc, #40]	; (80014b0 <LoopFillZerobss+0x22>)
 8001486:	2300      	movs	r3, #0
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:
 800148e:	42a2      	cmp	r2, r4
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>
 8001492:	f7ff ffe4 	bl	800145e <SystemInit>
 8001496:	f001 ff1d 	bl	80032d4 <__libc_init_array>
 800149a:	f7ff fb7f 	bl	8000b9c <main>
 800149e:	4770      	bx	lr
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000014 	.word	0x20000014
 80014a8:	08003374 	.word	0x08003374
 80014ac:	20000014 	.word	0x20000014
 80014b0:	20000124 	.word	0x20000124

080014b4 <ADC1_2_IRQHandler>:
 80014b4:	e7fe      	b.n	80014b4 <ADC1_2_IRQHandler>
	...

080014b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_Init+0x28>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <HAL_Init+0x28>)
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 f92b 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ce:	200f      	movs	r0, #15
 80014d0:	f000 f808 	bl	80014e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d4:	f7ff fe94 	bl	8001200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40022000 	.word	0x40022000

080014e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_InitTick+0x54>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_InitTick+0x58>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f000 f935 	bl	8001772 <HAL_SYSTICK_Config>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e00e      	b.n	8001530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d80a      	bhi.n	800152e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001518:	2200      	movs	r2, #0
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f000 f90b 	bl	800173a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001524:	4a06      	ldr	r2, [pc, #24]	; (8001540 <HAL_InitTick+0x5c>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	e000      	b.n	8001530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000008 	.word	0x20000008
 800153c:	20000010 	.word	0x20000010
 8001540:	2000000c 	.word	0x2000000c

08001544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_IncTick+0x1c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_IncTick+0x20>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	4a03      	ldr	r2, [pc, #12]	; (8001564 <HAL_IncTick+0x20>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	20000010 	.word	0x20000010
 8001564:	20000120 	.word	0x20000120

08001568 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;
 800156c:	4b02      	ldr	r3, [pc, #8]	; (8001578 <HAL_GetTick+0x10>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	20000120 	.word	0x20000120

0800157c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff fff0 	bl	8001568 <HAL_GetTick>
 8001588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001594:	d005      	beq.n	80015a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_Delay+0x44>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a2:	bf00      	nop
 80015a4:	f7ff ffe0 	bl	8001568 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d8f7      	bhi.n	80015a4 <HAL_Delay+0x28>
  {
  }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000010 	.word	0x20000010

080015c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e0:	4013      	ands	r3, r2
 80015e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	60d3      	str	r3, [r2, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <__NVIC_GetPriorityGrouping+0x18>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	f003 0307 	and.w	r3, r3, #7
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	; (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	; (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f7ff ff90 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff49 	bl	80015c4 <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff5e 	bl	800160c <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff90 	bl	800167c <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5f 	bl	8001628 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ffb0 	bl	80016e0 <SysTick_Config>
 8001780:	4603      	mov	r3, r0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <HAL_DMA_Start_IT+0x20>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e04a      	b.n	8001840 <HAL_DMA_Start_IT+0xb6>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d13a      	bne.n	8001832 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2202      	movs	r2, #2
 80017c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0201 	bic.w	r2, r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	68b9      	ldr	r1, [r7, #8]
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f000 f831 	bl	8001848 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d008      	beq.n	8001800 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f042 020e 	orr.w	r2, r2, #14
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	e00f      	b.n	8001820 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0204 	bic.w	r2, r2, #4
 800180e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 020a 	orr.w	r2, r2, #10
 800181e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0201 	orr.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	e005      	b.n	800183e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800183a:	2302      	movs	r3, #2
 800183c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800183e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185e:	2101      	movs	r1, #1
 8001860:	fa01 f202 	lsl.w	r2, r1, r2
 8001864:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b10      	cmp	r3, #16
 8001874:	d108      	bne.n	8001888 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001886:	e007      	b.n	8001898 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	60da      	str	r2, [r3, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
	...

080018a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b08b      	sub	sp, #44	; 0x2c
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b6:	e169      	b.n	8001b8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018b8:	2201      	movs	r2, #1
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	f040 8158 	bne.w	8001b86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4a9a      	ldr	r2, [pc, #616]	; (8001b44 <HAL_GPIO_Init+0x2a0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d05e      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 80018e0:	4a98      	ldr	r2, [pc, #608]	; (8001b44 <HAL_GPIO_Init+0x2a0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d875      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 80018e6:	4a98      	ldr	r2, [pc, #608]	; (8001b48 <HAL_GPIO_Init+0x2a4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d058      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 80018ec:	4a96      	ldr	r2, [pc, #600]	; (8001b48 <HAL_GPIO_Init+0x2a4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d86f      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 80018f2:	4a96      	ldr	r2, [pc, #600]	; (8001b4c <HAL_GPIO_Init+0x2a8>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d052      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 80018f8:	4a94      	ldr	r2, [pc, #592]	; (8001b4c <HAL_GPIO_Init+0x2a8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d869      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 80018fe:	4a94      	ldr	r2, [pc, #592]	; (8001b50 <HAL_GPIO_Init+0x2ac>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d04c      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 8001904:	4a92      	ldr	r2, [pc, #584]	; (8001b50 <HAL_GPIO_Init+0x2ac>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d863      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 800190a:	4a92      	ldr	r2, [pc, #584]	; (8001b54 <HAL_GPIO_Init+0x2b0>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d046      	beq.n	800199e <HAL_GPIO_Init+0xfa>
 8001910:	4a90      	ldr	r2, [pc, #576]	; (8001b54 <HAL_GPIO_Init+0x2b0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d85d      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 8001916:	2b12      	cmp	r3, #18
 8001918:	d82a      	bhi.n	8001970 <HAL_GPIO_Init+0xcc>
 800191a:	2b12      	cmp	r3, #18
 800191c:	d859      	bhi.n	80019d2 <HAL_GPIO_Init+0x12e>
 800191e:	a201      	add	r2, pc, #4	; (adr r2, 8001924 <HAL_GPIO_Init+0x80>)
 8001920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001924:	0800199f 	.word	0x0800199f
 8001928:	08001979 	.word	0x08001979
 800192c:	0800198b 	.word	0x0800198b
 8001930:	080019cd 	.word	0x080019cd
 8001934:	080019d3 	.word	0x080019d3
 8001938:	080019d3 	.word	0x080019d3
 800193c:	080019d3 	.word	0x080019d3
 8001940:	080019d3 	.word	0x080019d3
 8001944:	080019d3 	.word	0x080019d3
 8001948:	080019d3 	.word	0x080019d3
 800194c:	080019d3 	.word	0x080019d3
 8001950:	080019d3 	.word	0x080019d3
 8001954:	080019d3 	.word	0x080019d3
 8001958:	080019d3 	.word	0x080019d3
 800195c:	080019d3 	.word	0x080019d3
 8001960:	080019d3 	.word	0x080019d3
 8001964:	080019d3 	.word	0x080019d3
 8001968:	08001981 	.word	0x08001981
 800196c:	08001995 	.word	0x08001995
 8001970:	4a79      	ldr	r2, [pc, #484]	; (8001b58 <HAL_GPIO_Init+0x2b4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d013      	beq.n	800199e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001976:	e02c      	b.n	80019d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	623b      	str	r3, [r7, #32]
          break;
 800197e:	e029      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	3304      	adds	r3, #4
 8001986:	623b      	str	r3, [r7, #32]
          break;
 8001988:	e024      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	3308      	adds	r3, #8
 8001990:	623b      	str	r3, [r7, #32]
          break;
 8001992:	e01f      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	330c      	adds	r3, #12
 800199a:	623b      	str	r3, [r7, #32]
          break;
 800199c:	e01a      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d102      	bne.n	80019ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019a6:	2304      	movs	r3, #4
 80019a8:	623b      	str	r3, [r7, #32]
          break;
 80019aa:	e013      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d105      	bne.n	80019c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b4:	2308      	movs	r3, #8
 80019b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	611a      	str	r2, [r3, #16]
          break;
 80019be:	e009      	b.n	80019d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019c0:	2308      	movs	r3, #8
 80019c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	615a      	str	r2, [r3, #20]
          break;
 80019ca:	e003      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019cc:	2300      	movs	r3, #0
 80019ce:	623b      	str	r3, [r7, #32]
          break;
 80019d0:	e000      	b.n	80019d4 <HAL_GPIO_Init+0x130>
          break;
 80019d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	2bff      	cmp	r3, #255	; 0xff
 80019d8:	d801      	bhi.n	80019de <HAL_GPIO_Init+0x13a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	e001      	b.n	80019e2 <HAL_GPIO_Init+0x13e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3304      	adds	r3, #4
 80019e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	2bff      	cmp	r3, #255	; 0xff
 80019e8:	d802      	bhi.n	80019f0 <HAL_GPIO_Init+0x14c>
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	e002      	b.n	80019f6 <HAL_GPIO_Init+0x152>
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	3b08      	subs	r3, #8
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	210f      	movs	r1, #15
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	401a      	ands	r2, r3
 8001a08:	6a39      	ldr	r1, [r7, #32]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a10:	431a      	orrs	r2, r3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 80b1 	beq.w	8001b86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a24:	4b4d      	ldr	r3, [pc, #308]	; (8001b5c <HAL_GPIO_Init+0x2b8>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a4c      	ldr	r2, [pc, #304]	; (8001b5c <HAL_GPIO_Init+0x2b8>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b4a      	ldr	r3, [pc, #296]	; (8001b5c <HAL_GPIO_Init+0x2b8>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a3c:	4a48      	ldr	r2, [pc, #288]	; (8001b60 <HAL_GPIO_Init+0x2bc>)
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a40      	ldr	r2, [pc, #256]	; (8001b64 <HAL_GPIO_Init+0x2c0>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d013      	beq.n	8001a90 <HAL_GPIO_Init+0x1ec>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a3f      	ldr	r2, [pc, #252]	; (8001b68 <HAL_GPIO_Init+0x2c4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d00d      	beq.n	8001a8c <HAL_GPIO_Init+0x1e8>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a3e      	ldr	r2, [pc, #248]	; (8001b6c <HAL_GPIO_Init+0x2c8>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d007      	beq.n	8001a88 <HAL_GPIO_Init+0x1e4>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a3d      	ldr	r2, [pc, #244]	; (8001b70 <HAL_GPIO_Init+0x2cc>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d101      	bne.n	8001a84 <HAL_GPIO_Init+0x1e0>
 8001a80:	2303      	movs	r3, #3
 8001a82:	e006      	b.n	8001a92 <HAL_GPIO_Init+0x1ee>
 8001a84:	2304      	movs	r3, #4
 8001a86:	e004      	b.n	8001a92 <HAL_GPIO_Init+0x1ee>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e002      	b.n	8001a92 <HAL_GPIO_Init+0x1ee>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_GPIO_Init+0x1ee>
 8001a90:	2300      	movs	r3, #0
 8001a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a94:	f002 0203 	and.w	r2, r2, #3
 8001a98:	0092      	lsls	r2, r2, #2
 8001a9a:	4093      	lsls	r3, r2
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aa2:	492f      	ldr	r1, [pc, #188]	; (8001b60 <HAL_GPIO_Init+0x2bc>)
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d006      	beq.n	8001aca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001abc:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	492c      	ldr	r1, [pc, #176]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	600b      	str	r3, [r1, #0]
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	4928      	ldr	r1, [pc, #160]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ae4:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4922      	ldr	r1, [pc, #136]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
 8001af0:	e006      	b.n	8001b00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	491e      	ldr	r1, [pc, #120]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d006      	beq.n	8001b1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	4918      	ldr	r1, [pc, #96]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	608b      	str	r3, [r1, #8]
 8001b18:	e006      	b.n	8001b28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	4914      	ldr	r1, [pc, #80]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d021      	beq.n	8001b78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	490e      	ldr	r1, [pc, #56]	; (8001b74 <HAL_GPIO_Init+0x2d0>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60cb      	str	r3, [r1, #12]
 8001b40:	e021      	b.n	8001b86 <HAL_GPIO_Init+0x2e2>
 8001b42:	bf00      	nop
 8001b44:	10320000 	.word	0x10320000
 8001b48:	10310000 	.word	0x10310000
 8001b4c:	10220000 	.word	0x10220000
 8001b50:	10210000 	.word	0x10210000
 8001b54:	10120000 	.word	0x10120000
 8001b58:	10110000 	.word	0x10110000
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40010000 	.word	0x40010000
 8001b64:	40010800 	.word	0x40010800
 8001b68:	40010c00 	.word	0x40010c00
 8001b6c:	40011000 	.word	0x40011000
 8001b70:	40011400 	.word	0x40011400
 8001b74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_GPIO_Init+0x304>)
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	4909      	ldr	r1, [pc, #36]	; (8001ba8 <HAL_GPIO_Init+0x304>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	3301      	adds	r3, #1
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	fa22 f303 	lsr.w	r3, r2, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f47f ae8e 	bne.w	80018b8 <HAL_GPIO_Init+0x14>
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	372c      	adds	r7, #44	; 0x2c
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	40010400 	.word	0x40010400

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bc8:	e003      	b.n	8001bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	611a      	str	r2, [r3, #16]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	041a      	lsls	r2, r3, #16
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	43d9      	mvns	r1, r3
 8001bfa:	887b      	ldrh	r3, [r7, #2]
 8001bfc:	400b      	ands	r3, r1
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	611a      	str	r2, [r3, #16]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
	...

08001c10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e272      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8087 	beq.w	8001d3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c30:	4b92      	ldr	r3, [pc, #584]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 030c 	and.w	r3, r3, #12
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d00c      	beq.n	8001c56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c3c:	4b8f      	ldr	r3, [pc, #572]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d112      	bne.n	8001c6e <HAL_RCC_OscConfig+0x5e>
 8001c48:	4b8c      	ldr	r3, [pc, #560]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c54:	d10b      	bne.n	8001c6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c56:	4b89      	ldr	r3, [pc, #548]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d06c      	beq.n	8001d3c <HAL_RCC_OscConfig+0x12c>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d168      	bne.n	8001d3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e24c      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x76>
 8001c78:	4b80      	ldr	r3, [pc, #512]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a7f      	ldr	r2, [pc, #508]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	e02e      	b.n	8001ce4 <HAL_RCC_OscConfig+0xd4>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x98>
 8001c8e:	4b7b      	ldr	r3, [pc, #492]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a7a      	ldr	r2, [pc, #488]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b78      	ldr	r3, [pc, #480]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a77      	ldr	r2, [pc, #476]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e01d      	b.n	8001ce4 <HAL_RCC_OscConfig+0xd4>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0xbc>
 8001cb2:	4b72      	ldr	r3, [pc, #456]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a71      	ldr	r2, [pc, #452]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b6f      	ldr	r3, [pc, #444]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a6e      	ldr	r2, [pc, #440]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e00b      	b.n	8001ce4 <HAL_RCC_OscConfig+0xd4>
 8001ccc:	4b6b      	ldr	r3, [pc, #428]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a6a      	ldr	r2, [pc, #424]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b68      	ldr	r3, [pc, #416]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a67      	ldr	r2, [pc, #412]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d013      	beq.n	8001d14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff fc3c 	bl	8001568 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7ff fc38 	bl	8001568 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	; 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e200      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	4b5d      	ldr	r3, [pc, #372]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0xe4>
 8001d12:	e014      	b.n	8001d3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7ff fc28 	bl	8001568 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff fc24 	bl	8001568 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	; 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e1ec      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	4b53      	ldr	r3, [pc, #332]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x10c>
 8001d3a:	e000      	b.n	8001d3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d063      	beq.n	8001e12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d4a:	4b4c      	ldr	r3, [pc, #304]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00b      	beq.n	8001d6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d56:	4b49      	ldr	r3, [pc, #292]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d11c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x18c>
 8001d62:	4b46      	ldr	r3, [pc, #280]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d116      	bne.n	8001d9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	4b43      	ldr	r3, [pc, #268]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d005      	beq.n	8001d86 <HAL_RCC_OscConfig+0x176>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e1c0      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d86:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4939      	ldr	r1, [pc, #228]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9a:	e03a      	b.n	8001e12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d020      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da4:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7ff fbdd 	bl	8001568 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db2:	f7ff fbd9 	bl	8001568 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e1a1      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc4:	4b2d      	ldr	r3, [pc, #180]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd0:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4927      	ldr	r1, [pc, #156]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]
 8001de4:	e015      	b.n	8001e12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <HAL_RCC_OscConfig+0x270>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7ff fbbc 	bl	8001568 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df4:	f7ff fbb8 	bl	8001568 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e180      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e06:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d03a      	beq.n	8001e94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d019      	beq.n	8001e5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2c:	f7ff fb9c 	bl	8001568 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e34:	f7ff fb98 	bl	8001568 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e160      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e46:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <HAL_RCC_OscConfig+0x26c>)
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e52:	2001      	movs	r0, #1
 8001e54:	f000 fad8 	bl	8002408 <RCC_Delay>
 8001e58:	e01c      	b.n	8001e94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e60:	f7ff fb82 	bl	8001568 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e66:	e00f      	b.n	8001e88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e68:	f7ff fb7e 	bl	8001568 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d908      	bls.n	8001e88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e146      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	42420000 	.word	0x42420000
 8001e84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e88:	4b92      	ldr	r3, [pc, #584]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1e9      	bne.n	8001e68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80a6 	beq.w	8001fee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea6:	4b8b      	ldr	r3, [pc, #556]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10d      	bne.n	8001ece <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	4b88      	ldr	r3, [pc, #544]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4a87      	ldr	r2, [pc, #540]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	61d3      	str	r3, [r2, #28]
 8001ebe:	4b85      	ldr	r3, [pc, #532]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ece:	4b82      	ldr	r3, [pc, #520]	; (80020d8 <HAL_RCC_OscConfig+0x4c8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d118      	bne.n	8001f0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eda:	4b7f      	ldr	r3, [pc, #508]	; (80020d8 <HAL_RCC_OscConfig+0x4c8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a7e      	ldr	r2, [pc, #504]	; (80020d8 <HAL_RCC_OscConfig+0x4c8>)
 8001ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ee6:	f7ff fb3f 	bl	8001568 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eee:	f7ff fb3b 	bl	8001568 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b64      	cmp	r3, #100	; 0x64
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e103      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f00:	4b75      	ldr	r3, [pc, #468]	; (80020d8 <HAL_RCC_OscConfig+0x4c8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d106      	bne.n	8001f22 <HAL_RCC_OscConfig+0x312>
 8001f14:	4b6f      	ldr	r3, [pc, #444]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4a6e      	ldr	r2, [pc, #440]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6213      	str	r3, [r2, #32]
 8001f20:	e02d      	b.n	8001f7e <HAL_RCC_OscConfig+0x36e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x334>
 8001f2a:	4b6a      	ldr	r3, [pc, #424]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a69      	ldr	r2, [pc, #420]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	6213      	str	r3, [r2, #32]
 8001f36:	4b67      	ldr	r3, [pc, #412]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a66      	ldr	r2, [pc, #408]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f023 0304 	bic.w	r3, r3, #4
 8001f40:	6213      	str	r3, [r2, #32]
 8001f42:	e01c      	b.n	8001f7e <HAL_RCC_OscConfig+0x36e>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d10c      	bne.n	8001f66 <HAL_RCC_OscConfig+0x356>
 8001f4c:	4b61      	ldr	r3, [pc, #388]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4a60      	ldr	r2, [pc, #384]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6213      	str	r3, [r2, #32]
 8001f58:	4b5e      	ldr	r3, [pc, #376]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	4a5d      	ldr	r2, [pc, #372]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6213      	str	r3, [r2, #32]
 8001f64:	e00b      	b.n	8001f7e <HAL_RCC_OscConfig+0x36e>
 8001f66:	4b5b      	ldr	r3, [pc, #364]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	4a5a      	ldr	r2, [pc, #360]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	6213      	str	r3, [r2, #32]
 8001f72:	4b58      	ldr	r3, [pc, #352]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	4a57      	ldr	r2, [pc, #348]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	f023 0304 	bic.w	r3, r3, #4
 8001f7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d015      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f86:	f7ff faef 	bl	8001568 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7ff faeb 	bl	8001568 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e0b1      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa4:	4b4b      	ldr	r3, [pc, #300]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0ee      	beq.n	8001f8e <HAL_RCC_OscConfig+0x37e>
 8001fb0:	e014      	b.n	8001fdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb2:	f7ff fad9 	bl	8001568 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f7ff fad5 	bl	8001568 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e09b      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd0:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1ee      	bne.n	8001fba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fdc:	7dfb      	ldrb	r3, [r7, #23]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d105      	bne.n	8001fee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe2:	4b3c      	ldr	r3, [pc, #240]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a3b      	ldr	r2, [pc, #236]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 8087 	beq.w	8002106 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff8:	4b36      	ldr	r3, [pc, #216]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b08      	cmp	r3, #8
 8002002:	d061      	beq.n	80020c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d146      	bne.n	800209a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200c:	4b33      	ldr	r3, [pc, #204]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7ff faa9 	bl	8001568 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201a:	f7ff faa5 	bl	8001568 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e06d      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202c:	4b29      	ldr	r3, [pc, #164]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f0      	bne.n	800201a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002040:	d108      	bne.n	8002054 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002042:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	4921      	ldr	r1, [pc, #132]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002054:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a19      	ldr	r1, [r3, #32]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	430b      	orrs	r3, r1
 8002066:	491b      	ldr	r1, [pc, #108]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800206c:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 800206e:	2201      	movs	r2, #1
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002072:	f7ff fa79 	bl	8001568 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207a:	f7ff fa75 	bl	8001568 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e03d      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800208c:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x46a>
 8002098:	e035      	b.n	8002106 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_RCC_OscConfig+0x4cc>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7ff fa62 	bl	8001568 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a8:	f7ff fa5e 	bl	8001568 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e026      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_RCC_OscConfig+0x4c4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x498>
 80020c6:	e01e      	b.n	8002106 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d107      	bne.n	80020e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e019      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40007000 	.word	0x40007000
 80020dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_RCC_OscConfig+0x500>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	429a      	cmp	r2, r3
 8002100:	d001      	beq.n	8002106 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000

08002114 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0d0      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002128:	4b6a      	ldr	r3, [pc, #424]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d910      	bls.n	8002158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b67      	ldr	r3, [pc, #412]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 0207 	bic.w	r2, r3, #7
 800213e:	4965      	ldr	r1, [pc, #404]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b63      	ldr	r3, [pc, #396]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0b8      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d020      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002170:	4b59      	ldr	r3, [pc, #356]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a58      	ldr	r2, [pc, #352]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800217a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002188:	4b53      	ldr	r3, [pc, #332]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a52      	ldr	r2, [pc, #328]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002192:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002194:	4b50      	ldr	r3, [pc, #320]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	494d      	ldr	r1, [pc, #308]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d040      	beq.n	8002234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d107      	bne.n	80021ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	4b47      	ldr	r3, [pc, #284]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d115      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e07f      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d2:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d109      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e073      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e2:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e06b      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f2:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f023 0203 	bic.w	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4936      	ldr	r1, [pc, #216]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002204:	f7ff f9b0 	bl	8001568 <HAL_GetTick>
 8002208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	e00a      	b.n	8002222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220c:	f7ff f9ac 	bl	8001568 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	; 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e053      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 020c 	and.w	r2, r3, #12
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	429a      	cmp	r2, r3
 8002232:	d1eb      	bne.n	800220c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d210      	bcs.n	8002264 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002242:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 0207 	bic.w	r2, r3, #7
 800224a:	4922      	ldr	r1, [pc, #136]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e032      	b.n	80022ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4916      	ldr	r1, [pc, #88]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d009      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	490e      	ldr	r1, [pc, #56]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022a2:	f000 f821 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 80022a6:	4602      	mov	r2, r0
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	490a      	ldr	r1, [pc, #40]	; (80022dc <HAL_RCC_ClockConfig+0x1c8>)
 80022b4:	5ccb      	ldrb	r3, [r1, r3]
 80022b6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ba:	4a09      	ldr	r2, [pc, #36]	; (80022e0 <HAL_RCC_ClockConfig+0x1cc>)
 80022bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <HAL_RCC_ClockConfig+0x1d0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff f90e 	bl	80014e4 <HAL_InitTick>

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40022000 	.word	0x40022000
 80022d8:	40021000 	.word	0x40021000
 80022dc:	08003354 	.word	0x08003354
 80022e0:	20000008 	.word	0x20000008
 80022e4:	2000000c 	.word	0x2000000c

080022e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e8:	b490      	push	{r4, r7}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022ee:	4b29      	ldr	r3, [pc, #164]	; (8002394 <HAL_RCC_GetSysClockFreq+0xac>)
 80022f0:	1d3c      	adds	r4, r7, #4
 80022f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022f8:	f240 2301 	movw	r3, #513	; 0x201
 80022fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	2300      	movs	r3, #0
 8002304:	61bb      	str	r3, [r7, #24]
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002312:	4b21      	ldr	r3, [pc, #132]	; (8002398 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b04      	cmp	r3, #4
 8002320:	d002      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x40>
 8002322:	2b08      	cmp	r3, #8
 8002324:	d003      	beq.n	800232e <HAL_RCC_GetSysClockFreq+0x46>
 8002326:	e02b      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002328:	4b1c      	ldr	r3, [pc, #112]	; (800239c <HAL_RCC_GetSysClockFreq+0xb4>)
 800232a:	623b      	str	r3, [r7, #32]
      break;
 800232c:	e02b      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	0c9b      	lsrs	r3, r3, #18
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	3328      	adds	r3, #40	; 0x28
 8002338:	443b      	add	r3, r7
 800233a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800233e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d012      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <HAL_RCC_GetSysClockFreq+0xb0>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	0c5b      	lsrs	r3, r3, #17
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	3328      	adds	r3, #40	; 0x28
 8002356:	443b      	add	r3, r7
 8002358:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800235c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	4a0e      	ldr	r2, [pc, #56]	; (800239c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002362:	fb03 f202 	mul.w	r2, r3, r2
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	fbb2 f3f3 	udiv	r3, r2, r3
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
 800236e:	e004      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	4a0b      	ldr	r2, [pc, #44]	; (80023a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002374:	fb02 f303 	mul.w	r3, r2, r3
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	623b      	str	r3, [r7, #32]
      break;
 800237e:	e002      	b.n	8002386 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002382:	623b      	str	r3, [r7, #32]
      break;
 8002384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002386:	6a3b      	ldr	r3, [r7, #32]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3728      	adds	r7, #40	; 0x28
 800238c:	46bd      	mov	sp, r7
 800238e:	bc90      	pop	{r4, r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	08003344 	.word	0x08003344
 8002398:	40021000 	.word	0x40021000
 800239c:	007a1200 	.word	0x007a1200
 80023a0:	003d0900 	.word	0x003d0900

080023a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a8:	4b02      	ldr	r3, [pc, #8]	; (80023b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	20000008 	.word	0x20000008

080023b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023bc:	f7ff fff2 	bl	80023a4 <HAL_RCC_GetHCLKFreq>
 80023c0:	4602      	mov	r2, r0
 80023c2:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	4903      	ldr	r1, [pc, #12]	; (80023dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ce:	5ccb      	ldrb	r3, [r1, r3]
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	08003364 	.word	0x08003364

080023e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023e4:	f7ff ffde 	bl	80023a4 <HAL_RCC_GetHCLKFreq>
 80023e8:	4602      	mov	r2, r0
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	0adb      	lsrs	r3, r3, #11
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	4903      	ldr	r1, [pc, #12]	; (8002404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f6:	5ccb      	ldrb	r3, [r1, r3]
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40021000 	.word	0x40021000
 8002404:	08003364 	.word	0x08003364

08002408 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002410:	4b0a      	ldr	r3, [pc, #40]	; (800243c <RCC_Delay+0x34>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <RCC_Delay+0x38>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	0a5b      	lsrs	r3, r3, #9
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	fb02 f303 	mul.w	r3, r2, r3
 8002422:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002424:	bf00      	nop
  }
  while (Delay --);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1e5a      	subs	r2, r3, #1
 800242a:	60fa      	str	r2, [r7, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f9      	bne.n	8002424 <RCC_Delay+0x1c>
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	20000008 	.word	0x20000008
 8002440:	10624dd3 	.word	0x10624dd3

08002444 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e041      	b.n	80024da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7fe fefa 	bl	8001264 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3304      	adds	r3, #4
 8002480:	4619      	mov	r1, r3
 8002482:	4610      	mov	r0, r2
 8002484:	f000 f98e 	bl	80027a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d109      	bne.n	8002508 <HAL_TIM_PWM_Start+0x24>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	bf14      	ite	ne
 8002500:	2301      	movne	r3, #1
 8002502:	2300      	moveq	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	e022      	b.n	800254e <HAL_TIM_PWM_Start+0x6a>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b04      	cmp	r3, #4
 800250c:	d109      	bne.n	8002522 <HAL_TIM_PWM_Start+0x3e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b01      	cmp	r3, #1
 8002518:	bf14      	ite	ne
 800251a:	2301      	movne	r3, #1
 800251c:	2300      	moveq	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	e015      	b.n	800254e <HAL_TIM_PWM_Start+0x6a>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d109      	bne.n	800253c <HAL_TIM_PWM_Start+0x58>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	bf14      	ite	ne
 8002534:	2301      	movne	r3, #1
 8002536:	2300      	moveq	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	e008      	b.n	800254e <HAL_TIM_PWM_Start+0x6a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b01      	cmp	r3, #1
 8002546:	bf14      	ite	ne
 8002548:	2301      	movne	r3, #1
 800254a:	2300      	moveq	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e05e      	b.n	8002614 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d104      	bne.n	8002566 <HAL_TIM_PWM_Start+0x82>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002564:	e013      	b.n	800258e <HAL_TIM_PWM_Start+0xaa>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b04      	cmp	r3, #4
 800256a:	d104      	bne.n	8002576 <HAL_TIM_PWM_Start+0x92>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002574:	e00b      	b.n	800258e <HAL_TIM_PWM_Start+0xaa>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b08      	cmp	r3, #8
 800257a:	d104      	bne.n	8002586 <HAL_TIM_PWM_Start+0xa2>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002584:	e003      	b.n	800258e <HAL_TIM_PWM_Start+0xaa>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2201      	movs	r2, #1
 8002594:	6839      	ldr	r1, [r7, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f000 faee 	bl	8002b78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a1e      	ldr	r2, [pc, #120]	; (800261c <HAL_TIM_PWM_Start+0x138>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d107      	bne.n	80025b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a18      	ldr	r2, [pc, #96]	; (800261c <HAL_TIM_PWM_Start+0x138>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00e      	beq.n	80025de <HAL_TIM_PWM_Start+0xfa>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c8:	d009      	beq.n	80025de <HAL_TIM_PWM_Start+0xfa>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a14      	ldr	r2, [pc, #80]	; (8002620 <HAL_TIM_PWM_Start+0x13c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d004      	beq.n	80025de <HAL_TIM_PWM_Start+0xfa>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a12      	ldr	r2, [pc, #72]	; (8002624 <HAL_TIM_PWM_Start+0x140>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d111      	bne.n	8002602 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b06      	cmp	r3, #6
 80025ee:	d010      	beq.n	8002612 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002600:	e007      	b.n	8002612 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0201 	orr.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40012c00 	.word	0x40012c00
 8002620:	40000400 	.word	0x40000400
 8002624:	40000800 	.word	0x40000800

08002628 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800263e:	2302      	movs	r3, #2
 8002640:	e0ac      	b.n	800279c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b0c      	cmp	r3, #12
 800264e:	f200 809f 	bhi.w	8002790 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002652:	a201      	add	r2, pc, #4	; (adr r2, 8002658 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002658:	0800268d 	.word	0x0800268d
 800265c:	08002791 	.word	0x08002791
 8002660:	08002791 	.word	0x08002791
 8002664:	08002791 	.word	0x08002791
 8002668:	080026cd 	.word	0x080026cd
 800266c:	08002791 	.word	0x08002791
 8002670:	08002791 	.word	0x08002791
 8002674:	08002791 	.word	0x08002791
 8002678:	0800270f 	.word	0x0800270f
 800267c:	08002791 	.word	0x08002791
 8002680:	08002791 	.word	0x08002791
 8002684:	08002791 	.word	0x08002791
 8002688:	0800274f 	.word	0x0800274f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f8e8 	bl	8002868 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0208 	orr.w	r2, r2, #8
 80026a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0204 	bic.w	r2, r2, #4
 80026b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6999      	ldr	r1, [r3, #24]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	619a      	str	r2, [r3, #24]
      break;
 80026ca:	e062      	b.n	8002792 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f92e 	bl	8002934 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6999      	ldr	r1, [r3, #24]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	021a      	lsls	r2, r3, #8
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	619a      	str	r2, [r3, #24]
      break;
 800270c:	e041      	b.n	8002792 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	4618      	mov	r0, r3
 8002716:	f000 f977 	bl	8002a08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69da      	ldr	r2, [r3, #28]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0208 	orr.w	r2, r2, #8
 8002728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0204 	bic.w	r2, r2, #4
 8002738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69d9      	ldr	r1, [r3, #28]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	61da      	str	r2, [r3, #28]
      break;
 800274c:	e021      	b.n	8002792 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	4618      	mov	r0, r3
 8002756:	f000 f9c1 	bl	8002adc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69d9      	ldr	r1, [r3, #28]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	021a      	lsls	r2, r3, #8
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	61da      	str	r2, [r3, #28]
      break;
 800278e:	e000      	b.n	8002792 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002790:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a29      	ldr	r2, [pc, #164]	; (800285c <TIM_Base_SetConfig+0xb8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d00b      	beq.n	80027d4 <TIM_Base_SetConfig+0x30>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c2:	d007      	beq.n	80027d4 <TIM_Base_SetConfig+0x30>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a26      	ldr	r2, [pc, #152]	; (8002860 <TIM_Base_SetConfig+0xbc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d003      	beq.n	80027d4 <TIM_Base_SetConfig+0x30>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a25      	ldr	r2, [pc, #148]	; (8002864 <TIM_Base_SetConfig+0xc0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d108      	bne.n	80027e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a1c      	ldr	r2, [pc, #112]	; (800285c <TIM_Base_SetConfig+0xb8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00b      	beq.n	8002806 <TIM_Base_SetConfig+0x62>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f4:	d007      	beq.n	8002806 <TIM_Base_SetConfig+0x62>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a19      	ldr	r2, [pc, #100]	; (8002860 <TIM_Base_SetConfig+0xbc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d003      	beq.n	8002806 <TIM_Base_SetConfig+0x62>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a18      	ldr	r2, [pc, #96]	; (8002864 <TIM_Base_SetConfig+0xc0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d108      	bne.n	8002818 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800280c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4313      	orrs	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a07      	ldr	r2, [pc, #28]	; (800285c <TIM_Base_SetConfig+0xb8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d103      	bne.n	800284c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	615a      	str	r2, [r3, #20]
}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	40012c00 	.word	0x40012c00
 8002860:	40000400 	.word	0x40000400
 8002864:	40000800 	.word	0x40000800

08002868 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	f023 0201 	bic.w	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 0303 	bic.w	r3, r3, #3
 800289e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f023 0302 	bic.w	r3, r3, #2
 80028b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a1c      	ldr	r2, [pc, #112]	; (8002930 <TIM_OC1_SetConfig+0xc8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d10c      	bne.n	80028de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f023 0308 	bic.w	r3, r3, #8
 80028ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f023 0304 	bic.w	r3, r3, #4
 80028dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a13      	ldr	r2, [pc, #76]	; (8002930 <TIM_OC1_SetConfig+0xc8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d111      	bne.n	800290a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	621a      	str	r2, [r3, #32]
}
 8002924:	bf00      	nop
 8002926:	371c      	adds	r7, #28
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40012c00 	.word	0x40012c00

08002934 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f023 0210 	bic.w	r2, r3, #16
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800296a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f023 0320 	bic.w	r3, r3, #32
 800297e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <TIM_OC2_SetConfig+0xd0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d10d      	bne.n	80029b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800299a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <TIM_OC2_SetConfig+0xd0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d113      	bne.n	80029e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	621a      	str	r2, [r3, #32]
}
 80029fa:	bf00      	nop
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	40012c00 	.word	0x40012c00

08002a08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0303 	bic.w	r3, r3, #3
 8002a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a1d      	ldr	r2, [pc, #116]	; (8002ad8 <TIM_OC3_SetConfig+0xd0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d10d      	bne.n	8002a82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <TIM_OC3_SetConfig+0xd0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d113      	bne.n	8002ab2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	621a      	str	r2, [r3, #32]
}
 8002acc:	bf00      	nop
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40012c00 	.word	0x40012c00

08002adc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	021b      	lsls	r3, r3, #8
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	031b      	lsls	r3, r3, #12
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a0f      	ldr	r2, [pc, #60]	; (8002b74 <TIM_OC4_SetConfig+0x98>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d109      	bne.n	8002b50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	019b      	lsls	r3, r3, #6
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	621a      	str	r2, [r3, #32]
}
 8002b6a:	bf00      	nop
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr
 8002b74:	40012c00 	.word	0x40012c00

08002b78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a1a      	ldr	r2, [r3, #32]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a1a      	ldr	r2, [r3, #32]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	621a      	str	r2, [r3, #32]
}
 8002bb6:	bf00      	nop
 8002bb8:	371c      	adds	r7, #28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e046      	b.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a16      	ldr	r2, [pc, #88]	; (8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00e      	beq.n	8002c3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c24:	d009      	beq.n	8002c3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a12      	ldr	r2, [pc, #72]	; (8002c74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d004      	beq.n	8002c3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a10      	ldr	r2, [pc, #64]	; (8002c78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10c      	bne.n	8002c54 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr
 8002c70:	40012c00 	.word	0x40012c00
 8002c74:	40000400 	.word	0x40000400
 8002c78:	40000800 	.word	0x40000800

08002c7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e03f      	b.n	8002d0e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fe fb30 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2224      	movs	r2, #36	; 0x24
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 fa79 	bl	80031b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695a      	ldr	r2, [r3, #20]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ce4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	4613      	mov	r3, r2
 8002d24:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b20      	cmp	r3, #32
 8002d30:	d153      	bne.n	8002dda <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <HAL_UART_Transmit_DMA+0x26>
 8002d38:	88fb      	ldrh	r3, [r7, #6]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e04c      	b.n	8002ddc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_UART_Transmit_DMA+0x38>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e045      	b.n	8002ddc <HAL_UART_Transmit_DMA+0xc4>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	88fa      	ldrh	r2, [r7, #6]
 8002d62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	88fa      	ldrh	r2, [r7, #6]
 8002d68:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2221      	movs	r2, #33	; 0x21
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7c:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <HAL_UART_Transmit_DMA+0xcc>)
 8002d7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d84:	4a18      	ldr	r2, [pc, #96]	; (8002de8 <HAL_UART_Transmit_DMA+0xd0>)
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8c:	4a17      	ldr	r2, [pc, #92]	; (8002dec <HAL_UART_Transmit_DMA+0xd4>)
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d94:	2200      	movs	r2, #0
 8002d96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8002d98:	f107 0308 	add.w	r3, r7, #8
 8002d9c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	6819      	ldr	r1, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3304      	adds	r3, #4
 8002dac:	461a      	mov	r2, r3
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	f7fe fceb 	bl	800178a <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dbc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dd4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e000      	b.n	8002ddc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002dda:	2302      	movs	r3, #2
  }
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	08002e9d 	.word	0x08002e9d
 8002de8:	08002eef 	.word	0x08002eef
 8002dec:	08002fd7 	.word	0x08002fd7

08002df0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d11d      	bne.n	8002e46 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <HAL_UART_Receive_DMA+0x26>
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e016      	b.n	8002e48 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_UART_Receive_DMA+0x38>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e00f      	b.n	8002e48 <HAL_UART_Receive_DMA+0x58>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f915 	bl	800306c <UART_Start_Receive_DMA>
 8002e42:	4603      	mov	r3, r0
 8002e44:	e000      	b.n	8002e48 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002e46:	2302      	movs	r3, #2
  }
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr

08002e62 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr

08002e86 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d113      	bne.n	8002ee0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695a      	ldr	r2, [r3, #20]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ecc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002edc:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ede:	e002      	b.n	8002ee6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7fe f97d 	bl	80011e0 <HAL_UART_TxCpltCallback>
}
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f7ff ffa7 	bl	8002e50 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d12a      	bne.n	8002f7c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f3a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695a      	ldr	r2, [r3, #20]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f5a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d107      	bne.n	8002f7c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0210 	bic.w	r2, r2, #16
 8002f7a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d106      	bne.n	8002f92 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f88:	4619      	mov	r1, r3
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f7ff ff7b 	bl	8002e86 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f90:	e002      	b.n	8002f98 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f7fe f84c 	bl	8001030 <HAL_UART_RxCpltCallback>
}
 8002f98:	bf00      	nop
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d108      	bne.n	8002fc8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fba:	085b      	lsrs	r3, r3, #1
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f7ff ff60 	bl	8002e86 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fc6:	e002      	b.n	8002fce <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f7ff ff4a 	bl	8002e62 <HAL_UART_RxHalfCpltCallback>
}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bf14      	ite	ne
 8002ff6:	2301      	movne	r3, #1
 8002ff8:	2300      	moveq	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b21      	cmp	r3, #33	; 0x21
 8003008:	d108      	bne.n	800301c <UART_DMAError+0x46>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2200      	movs	r2, #0
 8003014:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003016:	68b8      	ldr	r0, [r7, #8]
 8003018:	f000 f88c 	bl	8003134 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	bf14      	ite	ne
 800302a:	2301      	movne	r3, #1
 800302c:	2300      	moveq	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b22      	cmp	r3, #34	; 0x22
 800303c:	d108      	bne.n	8003050 <UART_DMAError+0x7a>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2200      	movs	r2, #0
 8003048:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800304a:	68b8      	ldr	r0, [r7, #8]
 800304c:	f000 f887 	bl	800315e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	f043 0210 	orr.w	r2, r3, #16
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800305c:	68b8      	ldr	r0, [r7, #8]
 800305e:	f7ff ff09 	bl	8002e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	4613      	mov	r3, r2
 8003078:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	88fa      	ldrh	r2, [r7, #6]
 8003084:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2222      	movs	r2, #34	; 0x22
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003098:	4a23      	ldr	r2, [pc, #140]	; (8003128 <UART_Start_Receive_DMA+0xbc>)
 800309a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	4a22      	ldr	r2, [pc, #136]	; (800312c <UART_Start_Receive_DMA+0xc0>)
 80030a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	4a21      	ldr	r2, [pc, #132]	; (8003130 <UART_Start_Receive_DMA+0xc4>)
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	2200      	movs	r2, #0
 80030b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80030b4:	f107 0308 	add.w	r3, r7, #8
 80030b8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3304      	adds	r3, #4
 80030c4:	4619      	mov	r1, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	f7fe fb5d 	bl	800178a <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80030d0:	2300      	movs	r3, #0
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030fc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0201 	orr.w	r2, r2, #1
 800310c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800311c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	08002f0b 	.word	0x08002f0b
 800312c:	08002fa1 	.word	0x08002fa1
 8003130:	08002fd7 	.word	0x08002fd7

08003134 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800314a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003174:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0201 	bic.w	r2, r2, #1
 8003184:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	2b01      	cmp	r3, #1
 800318c:	d107      	bne.n	800319e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0210 	bic.w	r2, r2, #16
 800319c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr
	...

080031b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031f2:	f023 030c 	bic.w	r3, r3, #12
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	430b      	orrs	r3, r1
 80031fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2c      	ldr	r2, [pc, #176]	; (80032cc <UART_SetConfig+0x114>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d103      	bne.n	8003228 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003220:	f7ff f8de 	bl	80023e0 <HAL_RCC_GetPCLK2Freq>
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	e002      	b.n	800322e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003228:	f7ff f8c6 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 800322c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	009a      	lsls	r2, r3, #2
 8003238:	441a      	add	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	4a22      	ldr	r2, [pc, #136]	; (80032d0 <UART_SetConfig+0x118>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	0119      	lsls	r1, r3, #4
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	009a      	lsls	r2, r3, #2
 8003258:	441a      	add	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	fbb2 f2f3 	udiv	r2, r2, r3
 8003264:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <UART_SetConfig+0x118>)
 8003266:	fba3 0302 	umull	r0, r3, r3, r2
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	2064      	movs	r0, #100	; 0x64
 800326e:	fb00 f303 	mul.w	r3, r0, r3
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	3332      	adds	r3, #50	; 0x32
 8003278:	4a15      	ldr	r2, [pc, #84]	; (80032d0 <UART_SetConfig+0x118>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003284:	4419      	add	r1, r3
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	009a      	lsls	r2, r3, #2
 8003290:	441a      	add	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	fbb2 f2f3 	udiv	r2, r2, r3
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <UART_SetConfig+0x118>)
 800329e:	fba3 0302 	umull	r0, r3, r3, r2
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2064      	movs	r0, #100	; 0x64
 80032a6:	fb00 f303 	mul.w	r3, r0, r3
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	3332      	adds	r3, #50	; 0x32
 80032b0:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <UART_SetConfig+0x118>)
 80032b2:	fba2 2303 	umull	r2, r3, r2, r3
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	f003 020f 	and.w	r2, r3, #15
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	440a      	add	r2, r1
 80032c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032c4:	bf00      	nop
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40013800 	.word	0x40013800
 80032d0:	51eb851f 	.word	0x51eb851f

080032d4 <__libc_init_array>:
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	2600      	movs	r6, #0
 80032d8:	4d0c      	ldr	r5, [pc, #48]	; (800330c <__libc_init_array+0x38>)
 80032da:	4c0d      	ldr	r4, [pc, #52]	; (8003310 <__libc_init_array+0x3c>)
 80032dc:	1b64      	subs	r4, r4, r5
 80032de:	10a4      	asrs	r4, r4, #2
 80032e0:	42a6      	cmp	r6, r4
 80032e2:	d109      	bne.n	80032f8 <__libc_init_array+0x24>
 80032e4:	f000 f822 	bl	800332c <_init>
 80032e8:	2600      	movs	r6, #0
 80032ea:	4d0a      	ldr	r5, [pc, #40]	; (8003314 <__libc_init_array+0x40>)
 80032ec:	4c0a      	ldr	r4, [pc, #40]	; (8003318 <__libc_init_array+0x44>)
 80032ee:	1b64      	subs	r4, r4, r5
 80032f0:	10a4      	asrs	r4, r4, #2
 80032f2:	42a6      	cmp	r6, r4
 80032f4:	d105      	bne.n	8003302 <__libc_init_array+0x2e>
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032fc:	4798      	blx	r3
 80032fe:	3601      	adds	r6, #1
 8003300:	e7ee      	b.n	80032e0 <__libc_init_array+0xc>
 8003302:	f855 3b04 	ldr.w	r3, [r5], #4
 8003306:	4798      	blx	r3
 8003308:	3601      	adds	r6, #1
 800330a:	e7f2      	b.n	80032f2 <__libc_init_array+0x1e>
 800330c:	0800336c 	.word	0x0800336c
 8003310:	0800336c 	.word	0x0800336c
 8003314:	0800336c 	.word	0x0800336c
 8003318:	08003370 	.word	0x08003370

0800331c <memset>:
 800331c:	4603      	mov	r3, r0
 800331e:	4402      	add	r2, r0
 8003320:	4293      	cmp	r3, r2
 8003322:	d100      	bne.n	8003326 <memset+0xa>
 8003324:	4770      	bx	lr
 8003326:	f803 1b01 	strb.w	r1, [r3], #1
 800332a:	e7f9      	b.n	8003320 <memset+0x4>

0800332c <_init>:
 800332c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332e:	bf00      	nop
 8003330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003332:	bc08      	pop	{r3}
 8003334:	469e      	mov	lr, r3
 8003336:	4770      	bx	lr

08003338 <_fini>:
 8003338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333a:	bf00      	nop
 800333c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800333e:	bc08      	pop	{r3}
 8003340:	469e      	mov	lr, r3
 8003342:	4770      	bx	lr
