
STM32_ATWork2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002324  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002430  08002430  00012430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002458  08002458  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002458  08002458  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002458  08002458  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002458  08002458  00012458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800245c  0800245c  0001245c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  0800246c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  0800246c  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000956d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001707  00000000  00000000  000295a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0002acb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  0002b808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a8f  00000000  00000000  0002c2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af5b  00000000  00000000  00042d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086431  00000000  00000000  0004dcc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d40f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f98  00000000  00000000  000d4144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002418 	.word	0x08002418

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002418 	.word	0x08002418

0800014c <motor>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int v = 50;
uint8_t buffer[20], s;
int l1, l2, r2, r1;
void motor(int L1, int L2, int R2, int R1){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	603b      	str	r3, [r7, #0]
	L1 = L1*255;
 800015a:	68fa      	ldr	r2, [r7, #12]
 800015c:	4613      	mov	r3, r2
 800015e:	021b      	lsls	r3, r3, #8
 8000160:	1a9b      	subs	r3, r3, r2
 8000162:	60fb      	str	r3, [r7, #12]
	L2 = L2*255;
 8000164:	68ba      	ldr	r2, [r7, #8]
 8000166:	4613      	mov	r3, r2
 8000168:	021b      	lsls	r3, r3, #8
 800016a:	1a9b      	subs	r3, r3, r2
 800016c:	60bb      	str	r3, [r7, #8]
	R2 = R2*255;
 800016e:	687a      	ldr	r2, [r7, #4]
 8000170:	4613      	mov	r3, r2
 8000172:	021b      	lsls	r3, r3, #8
 8000174:	1a9b      	subs	r3, r3, r2
 8000176:	607b      	str	r3, [r7, #4]
	R1 = R1*255;
 8000178:	683a      	ldr	r2, [r7, #0]
 800017a:	4613      	mov	r3, r2
 800017c:	021b      	lsls	r3, r3, #8
 800017e:	1a9b      	subs	r3, r3, r2
 8000180:	603b      	str	r3, [r7, #0]

	// ------------------ L1
	if(L1 >= 0){
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	2b00      	cmp	r3, #0
 8000186:	db0f      	blt.n	80001a8 <motor+0x5c>
		HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, 1);
 8000188:	2201      	movs	r2, #1
 800018a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800018e:	4843      	ldr	r0, [pc, #268]	; (800029c <motor+0x150>)
 8000190:	f000 fee6 	bl	8000f60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, 0);
 8000194:	2200      	movs	r2, #0
 8000196:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800019a:	4840      	ldr	r0, [pc, #256]	; (800029c <motor+0x150>)
 800019c:	f000 fee0 	bl	8000f60 <HAL_GPIO_WritePin>
		TIM4->CCR1 = L1;
 80001a0:	4a3f      	ldr	r2, [pc, #252]	; (80002a0 <motor+0x154>)
 80001a2:	68fb      	ldr	r3, [r7, #12]
 80001a4:	6353      	str	r3, [r2, #52]	; 0x34
 80001a6:	e00f      	b.n	80001c8 <motor+0x7c>
	}else{
		HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, 0);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001ae:	483b      	ldr	r0, [pc, #236]	; (800029c <motor+0x150>)
 80001b0:	f000 fed6 	bl	8000f60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, 1);
 80001b4:	2201      	movs	r2, #1
 80001b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ba:	4838      	ldr	r0, [pc, #224]	; (800029c <motor+0x150>)
 80001bc:	f000 fed0 	bl	8000f60 <HAL_GPIO_WritePin>
		TIM4->CCR1 = -L1;
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	425a      	negs	r2, r3
 80001c4:	4b36      	ldr	r3, [pc, #216]	; (80002a0 <motor+0x154>)
 80001c6:	635a      	str	r2, [r3, #52]	; 0x34
	}
	// ------------------ L2
	if(L2 >= 0){
 80001c8:	68bb      	ldr	r3, [r7, #8]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	db0f      	blt.n	80001ee <motor+0xa2>
		HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, 1);
 80001ce:	2201      	movs	r2, #1
 80001d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001d4:	4831      	ldr	r0, [pc, #196]	; (800029c <motor+0x150>)
 80001d6:	f000 fec3 	bl	8000f60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, 0);
 80001da:	2200      	movs	r2, #0
 80001dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e0:	482e      	ldr	r0, [pc, #184]	; (800029c <motor+0x150>)
 80001e2:	f000 febd 	bl	8000f60 <HAL_GPIO_WritePin>
		TIM4->CCR2 = L2;
 80001e6:	4a2e      	ldr	r2, [pc, #184]	; (80002a0 <motor+0x154>)
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	6393      	str	r3, [r2, #56]	; 0x38
 80001ec:	e00f      	b.n	800020e <motor+0xc2>
	}else{
		HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, 0);
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001f4:	4829      	ldr	r0, [pc, #164]	; (800029c <motor+0x150>)
 80001f6:	f000 feb3 	bl	8000f60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, 1);
 80001fa:	2201      	movs	r2, #1
 80001fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000200:	4826      	ldr	r0, [pc, #152]	; (800029c <motor+0x150>)
 8000202:	f000 fead 	bl	8000f60 <HAL_GPIO_WritePin>
		TIM4->CCR2 = -L2;
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	425a      	negs	r2, r3
 800020a:	4b25      	ldr	r3, [pc, #148]	; (80002a0 <motor+0x154>)
 800020c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	// ------------------ R2
	if(R2 >= 0){
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2b00      	cmp	r3, #0
 8000212:	db0f      	blt.n	8000234 <motor+0xe8>
		HAL_GPIO_WritePin(INA3_GPIO_Port, INA3_Pin, 1);
 8000214:	2201      	movs	r2, #1
 8000216:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800021a:	4822      	ldr	r0, [pc, #136]	; (80002a4 <motor+0x158>)
 800021c:	f000 fea0 	bl	8000f60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB3_GPIO_Port, INB3_Pin, 0);
 8000220:	2200      	movs	r2, #0
 8000222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000226:	481f      	ldr	r0, [pc, #124]	; (80002a4 <motor+0x158>)
 8000228:	f000 fe9a 	bl	8000f60 <HAL_GPIO_WritePin>
		TIM4->CCR3 = R2;
 800022c:	4a1c      	ldr	r2, [pc, #112]	; (80002a0 <motor+0x154>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000232:	e00f      	b.n	8000254 <motor+0x108>
	}else{
		HAL_GPIO_WritePin(INA3_GPIO_Port, INA3_Pin, 0);
 8000234:	2200      	movs	r2, #0
 8000236:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800023a:	481a      	ldr	r0, [pc, #104]	; (80002a4 <motor+0x158>)
 800023c:	f000 fe90 	bl	8000f60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB3_GPIO_Port, INB3_Pin, 1);
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000246:	4817      	ldr	r0, [pc, #92]	; (80002a4 <motor+0x158>)
 8000248:	f000 fe8a 	bl	8000f60 <HAL_GPIO_WritePin>
		TIM4->CCR3 = -R2;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	425a      	negs	r2, r3
 8000250:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <motor+0x154>)
 8000252:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	// ------------------ R1
	if(R1 >= 0){
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	db0d      	blt.n	8000276 <motor+0x12a>
		HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, 1);
 800025a:	2201      	movs	r2, #1
 800025c:	2110      	movs	r1, #16
 800025e:	480f      	ldr	r0, [pc, #60]	; (800029c <motor+0x150>)
 8000260:	f000 fe7e 	bl	8000f60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, 0);
 8000264:	2200      	movs	r2, #0
 8000266:	2120      	movs	r1, #32
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <motor+0x150>)
 800026a:	f000 fe79 	bl	8000f60 <HAL_GPIO_WritePin>
		TIM4->CCR4 = R1;
 800026e:	4a0c      	ldr	r2, [pc, #48]	; (80002a0 <motor+0x154>)
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	6413      	str	r3, [r2, #64]	; 0x40
	}else{
		HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, 0);
		HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, 1);
		TIM4->CCR4 = -R1;
	}
}
 8000274:	e00d      	b.n	8000292 <motor+0x146>
		HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, 0);
 8000276:	2200      	movs	r2, #0
 8000278:	2110      	movs	r1, #16
 800027a:	4808      	ldr	r0, [pc, #32]	; (800029c <motor+0x150>)
 800027c:	f000 fe70 	bl	8000f60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, 1);
 8000280:	2201      	movs	r2, #1
 8000282:	2120      	movs	r1, #32
 8000284:	4805      	ldr	r0, [pc, #20]	; (800029c <motor+0x150>)
 8000286:	f000 fe6b 	bl	8000f60 <HAL_GPIO_WritePin>
		TIM4->CCR4 = -R1;
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	425a      	negs	r2, r3
 800028e:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <motor+0x154>)
 8000290:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40010c00 	.word	0x40010c00
 80002a0:	40000800 	.word	0x40000800
 80002a4:	40010800 	.word	0x40010800

080002a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ae:	f000 fb69 	bl	8000984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b2:	f000 f8d7 	bl	8000464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b6:	f000 f9b5 	bl	8000624 <MX_GPIO_Init>
  MX_TIM4_Init();
 80002ba:	f000 f90f 	bl	80004dc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80002be:	f000 f987 	bl	80005d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80002c2:	2100      	movs	r1, #0
 80002c4:	485d      	ldr	r0, [pc, #372]	; (800043c <main+0x194>)
 80002c6:	f001 fae7 	bl	8001898 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80002ca:	2104      	movs	r1, #4
 80002cc:	485b      	ldr	r0, [pc, #364]	; (800043c <main+0x194>)
 80002ce:	f001 fae3 	bl	8001898 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80002d2:	2108      	movs	r1, #8
 80002d4:	4859      	ldr	r0, [pc, #356]	; (800043c <main+0x194>)
 80002d6:	f001 fadf 	bl	8001898 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80002da:	210c      	movs	r1, #12
 80002dc:	4857      	ldr	r0, [pc, #348]	; (800043c <main+0x194>)
 80002de:	f001 fadb 	bl	8001898 <HAL_TIM_PWM_Start>
  for(int i=0; i<10; i++){
 80002e2:	2300      	movs	r3, #0
 80002e4:	607b      	str	r3, [r7, #4]
 80002e6:	e00a      	b.n	80002fe <main+0x56>
	  HAL_Delay(100);
 80002e8:	2064      	movs	r0, #100	; 0x64
 80002ea:	f000 fbad 	bl	8000a48 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14); // Red LED
 80002ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002f2:	4853      	ldr	r0, [pc, #332]	; (8000440 <main+0x198>)
 80002f4:	f000 fe4c 	bl	8000f90 <HAL_GPIO_TogglePin>
  for(int i=0; i<10; i++){
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3301      	adds	r3, #1
 80002fc:	607b      	str	r3, [r7, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2b09      	cmp	r3, #9
 8000302:	ddf1      	ble.n	80002e8 <main+0x40>
  }
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // Green LED
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800030a:	484d      	ldr	r0, [pc, #308]	; (8000440 <main+0x198>)
 800030c:	f000 fe28 	bl	8000f60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0); // Red LED
 8000310:	2200      	movs	r2, #0
 8000312:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000316:	484a      	ldr	r0, [pc, #296]	; (8000440 <main+0x198>)
 8000318:	f000 fe22 	bl	8000f60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1); // Motors Enable
 800031c:	2201      	movs	r2, #1
 800031e:	2108      	movs	r1, #8
 8000320:	4848      	ldr	r0, [pc, #288]	; (8000444 <main+0x19c>)
 8000322:	f000 fe1d 	bl	8000f60 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive(&huart1, &buffer[0], 1, PHY_FULLDUPLEX_100M);
 8000326:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800032a:	2201      	movs	r2, #1
 800032c:	4946      	ldr	r1, [pc, #280]	; (8000448 <main+0x1a0>)
 800032e:	4847      	ldr	r0, [pc, #284]	; (800044c <main+0x1a4>)
 8000330:	f001 fecb 	bl	80020ca <HAL_UART_Receive>
	  if(buffer[0] == 'M') {
 8000334:	4b44      	ldr	r3, [pc, #272]	; (8000448 <main+0x1a0>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b4d      	cmp	r3, #77	; 0x4d
 800033a:	d1f4      	bne.n	8000326 <main+0x7e>
		  HAL_UART_Receive(&huart1,&s,1,PHY_FULLDUPLEX_100M);
 800033c:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000340:	2201      	movs	r2, #1
 8000342:	4943      	ldr	r1, [pc, #268]	; (8000450 <main+0x1a8>)
 8000344:	4841      	ldr	r0, [pc, #260]	; (800044c <main+0x1a4>)
 8000346:	f001 fec0 	bl	80020ca <HAL_UART_Receive>
		  HAL_UART_Receive(&huart1,&buffer[0],1,PHY_FULLDUPLEX_100M);
 800034a:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800034e:	2201      	movs	r2, #1
 8000350:	493d      	ldr	r1, [pc, #244]	; (8000448 <main+0x1a0>)
 8000352:	483e      	ldr	r0, [pc, #248]	; (800044c <main+0x1a4>)
 8000354:	f001 feb9 	bl	80020ca <HAL_UART_Receive>
		  if(s=='-') 			r1=-(int)buffer[0];
 8000358:	4b3d      	ldr	r3, [pc, #244]	; (8000450 <main+0x1a8>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b2d      	cmp	r3, #45	; 0x2d
 800035e:	d105      	bne.n	800036c <main+0xc4>
 8000360:	4b39      	ldr	r3, [pc, #228]	; (8000448 <main+0x1a0>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	425b      	negs	r3, r3
 8000366:	4a3b      	ldr	r2, [pc, #236]	; (8000454 <main+0x1ac>)
 8000368:	6013      	str	r3, [r2, #0]
 800036a:	e004      	b.n	8000376 <main+0xce>
		  else  				r1=(int)buffer[0];
 800036c:	4b36      	ldr	r3, [pc, #216]	; (8000448 <main+0x1a0>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	461a      	mov	r2, r3
 8000372:	4b38      	ldr	r3, [pc, #224]	; (8000454 <main+0x1ac>)
 8000374:	601a      	str	r2, [r3, #0]
		  ////////////////
		  HAL_UART_Receive(&huart1,&s,1,PHY_FULLDUPLEX_100M);
 8000376:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800037a:	2201      	movs	r2, #1
 800037c:	4934      	ldr	r1, [pc, #208]	; (8000450 <main+0x1a8>)
 800037e:	4833      	ldr	r0, [pc, #204]	; (800044c <main+0x1a4>)
 8000380:	f001 fea3 	bl	80020ca <HAL_UART_Receive>
		  HAL_UART_Receive(&huart1,&buffer[0],1,PHY_FULLDUPLEX_100M);
 8000384:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000388:	2201      	movs	r2, #1
 800038a:	492f      	ldr	r1, [pc, #188]	; (8000448 <main+0x1a0>)
 800038c:	482f      	ldr	r0, [pc, #188]	; (800044c <main+0x1a4>)
 800038e:	f001 fe9c 	bl	80020ca <HAL_UART_Receive>
		  if(s=='-') 			r2=-(int)buffer[0];
 8000392:	4b2f      	ldr	r3, [pc, #188]	; (8000450 <main+0x1a8>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b2d      	cmp	r3, #45	; 0x2d
 8000398:	d105      	bne.n	80003a6 <main+0xfe>
 800039a:	4b2b      	ldr	r3, [pc, #172]	; (8000448 <main+0x1a0>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	425b      	negs	r3, r3
 80003a0:	4a2d      	ldr	r2, [pc, #180]	; (8000458 <main+0x1b0>)
 80003a2:	6013      	str	r3, [r2, #0]
 80003a4:	e004      	b.n	80003b0 <main+0x108>
		  else  				r2=(int)buffer[0];
 80003a6:	4b28      	ldr	r3, [pc, #160]	; (8000448 <main+0x1a0>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	461a      	mov	r2, r3
 80003ac:	4b2a      	ldr	r3, [pc, #168]	; (8000458 <main+0x1b0>)
 80003ae:	601a      	str	r2, [r3, #0]
		  ////////////////
		  HAL_UART_Receive(&huart1,&s,1,PHY_FULLDUPLEX_100M);
 80003b0:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 80003b4:	2201      	movs	r2, #1
 80003b6:	4926      	ldr	r1, [pc, #152]	; (8000450 <main+0x1a8>)
 80003b8:	4824      	ldr	r0, [pc, #144]	; (800044c <main+0x1a4>)
 80003ba:	f001 fe86 	bl	80020ca <HAL_UART_Receive>
		  HAL_UART_Receive(&huart1,&buffer[0],1,PHY_FULLDUPLEX_100M);
 80003be:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 80003c2:	2201      	movs	r2, #1
 80003c4:	4920      	ldr	r1, [pc, #128]	; (8000448 <main+0x1a0>)
 80003c6:	4821      	ldr	r0, [pc, #132]	; (800044c <main+0x1a4>)
 80003c8:	f001 fe7f 	bl	80020ca <HAL_UART_Receive>
		  if(s=='-') 			l2=-(int)buffer[0];
 80003cc:	4b20      	ldr	r3, [pc, #128]	; (8000450 <main+0x1a8>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b2d      	cmp	r3, #45	; 0x2d
 80003d2:	d105      	bne.n	80003e0 <main+0x138>
 80003d4:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <main+0x1a0>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	425b      	negs	r3, r3
 80003da:	4a20      	ldr	r2, [pc, #128]	; (800045c <main+0x1b4>)
 80003dc:	6013      	str	r3, [r2, #0]
 80003de:	e004      	b.n	80003ea <main+0x142>
		  else  				l2=(int)buffer[0];
 80003e0:	4b19      	ldr	r3, [pc, #100]	; (8000448 <main+0x1a0>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	461a      	mov	r2, r3
 80003e6:	4b1d      	ldr	r3, [pc, #116]	; (800045c <main+0x1b4>)
 80003e8:	601a      	str	r2, [r3, #0]
		  ////////////////
		  HAL_UART_Receive(&huart1,&s,1,PHY_FULLDUPLEX_100M);
 80003ea:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 80003ee:	2201      	movs	r2, #1
 80003f0:	4917      	ldr	r1, [pc, #92]	; (8000450 <main+0x1a8>)
 80003f2:	4816      	ldr	r0, [pc, #88]	; (800044c <main+0x1a4>)
 80003f4:	f001 fe69 	bl	80020ca <HAL_UART_Receive>
		  HAL_UART_Receive(&huart1,&buffer[0],1,PHY_FULLDUPLEX_100M);
 80003f8:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 80003fc:	2201      	movs	r2, #1
 80003fe:	4912      	ldr	r1, [pc, #72]	; (8000448 <main+0x1a0>)
 8000400:	4812      	ldr	r0, [pc, #72]	; (800044c <main+0x1a4>)
 8000402:	f001 fe62 	bl	80020ca <HAL_UART_Receive>
		  if(s=='-') 			l1=-(int)buffer[0];
 8000406:	4b12      	ldr	r3, [pc, #72]	; (8000450 <main+0x1a8>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2b2d      	cmp	r3, #45	; 0x2d
 800040c:	d105      	bne.n	800041a <main+0x172>
 800040e:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <main+0x1a0>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	425b      	negs	r3, r3
 8000414:	4a12      	ldr	r2, [pc, #72]	; (8000460 <main+0x1b8>)
 8000416:	6013      	str	r3, [r2, #0]
 8000418:	e004      	b.n	8000424 <main+0x17c>
		  else  				l1=(int)buffer[0];
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <main+0x1a0>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	461a      	mov	r2, r3
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <main+0x1b8>)
 8000422:	601a      	str	r2, [r3, #0]
		  motor(l1,l2,r2,r1);
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <main+0x1b8>)
 8000426:	6818      	ldr	r0, [r3, #0]
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <main+0x1b4>)
 800042a:	6819      	ldr	r1, [r3, #0]
 800042c:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <main+0x1b0>)
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <main+0x1ac>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f7ff fe8a 	bl	800014c <motor>
	  HAL_UART_Receive(&huart1, &buffer[0], 1, PHY_FULLDUPLEX_100M);
 8000438:	e775      	b.n	8000326 <main+0x7e>
 800043a:	bf00      	nop
 800043c:	20000028 	.word	0x20000028
 8000440:	40011000 	.word	0x40011000
 8000444:	40010c00 	.word	0x40010c00
 8000448:	200000b4 	.word	0x200000b4
 800044c:	20000070 	.word	0x20000070
 8000450:	200000c8 	.word	0x200000c8
 8000454:	200000d8 	.word	0x200000d8
 8000458:	200000d4 	.word	0x200000d4
 800045c:	200000d0 	.word	0x200000d0
 8000460:	200000cc 	.word	0x200000cc

08000464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b090      	sub	sp, #64	; 0x40
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	f107 0318 	add.w	r3, r7, #24
 800046e:	2228      	movs	r2, #40	; 0x28
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f001 ffc8 	bl	8002408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000486:	2302      	movs	r3, #2
 8000488:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048a:	2301      	movs	r3, #1
 800048c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048e:	2310      	movs	r3, #16
 8000490:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000492:	2300      	movs	r3, #0
 8000494:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000496:	f107 0318 	add.w	r3, r7, #24
 800049a:	4618      	mov	r0, r3
 800049c:	f000 fd92 	bl	8000fc4 <HAL_RCC_OscConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80004a6:	f000 f943 	bl	8000730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004aa:	230f      	movs	r3, #15
 80004ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f001 f800 	bl	80014c8 <HAL_RCC_ClockConfig>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004ce:	f000 f92f 	bl	8000730 <Error_Handler>
  }
}
 80004d2:	bf00      	nop
 80004d4:	3740      	adds	r7, #64	; 0x40
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	; 0x28
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e2:	f107 0320 	add.w	r3, r7, #32
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]
 80004fa:	615a      	str	r2, [r3, #20]
 80004fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80004fe:	4b32      	ldr	r3, [pc, #200]	; (80005c8 <MX_TIM4_Init+0xec>)
 8000500:	4a32      	ldr	r2, [pc, #200]	; (80005cc <MX_TIM4_Init+0xf0>)
 8000502:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000504:	4b30      	ldr	r3, [pc, #192]	; (80005c8 <MX_TIM4_Init+0xec>)
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050a:	4b2f      	ldr	r3, [pc, #188]	; (80005c8 <MX_TIM4_Init+0xec>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000510:	4b2d      	ldr	r3, [pc, #180]	; (80005c8 <MX_TIM4_Init+0xec>)
 8000512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000516:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000518:	4b2b      	ldr	r3, [pc, #172]	; (80005c8 <MX_TIM4_Init+0xec>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051e:	4b2a      	ldr	r3, [pc, #168]	; (80005c8 <MX_TIM4_Init+0xec>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000524:	4828      	ldr	r0, [pc, #160]	; (80005c8 <MX_TIM4_Init+0xec>)
 8000526:	f001 f967 	bl	80017f8 <HAL_TIM_PWM_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000530:	f000 f8fe 	bl	8000730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000534:	2300      	movs	r3, #0
 8000536:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000538:	2300      	movs	r3, #0
 800053a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800053c:	f107 0320 	add.w	r3, r7, #32
 8000540:	4619      	mov	r1, r3
 8000542:	4821      	ldr	r0, [pc, #132]	; (80005c8 <MX_TIM4_Init+0xec>)
 8000544:	f001 fd16 	bl	8001f74 <HAL_TIMEx_MasterConfigSynchronization>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800054e:	f000 f8ef 	bl	8000730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000552:	2360      	movs	r3, #96	; 0x60
 8000554:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2200      	movs	r2, #0
 8000566:	4619      	mov	r1, r3
 8000568:	4817      	ldr	r0, [pc, #92]	; (80005c8 <MX_TIM4_Init+0xec>)
 800056a:	f001 fa37 	bl	80019dc <HAL_TIM_PWM_ConfigChannel>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000574:	f000 f8dc 	bl	8000730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2204      	movs	r2, #4
 800057c:	4619      	mov	r1, r3
 800057e:	4812      	ldr	r0, [pc, #72]	; (80005c8 <MX_TIM4_Init+0xec>)
 8000580:	f001 fa2c 	bl	80019dc <HAL_TIM_PWM_ConfigChannel>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800058a:	f000 f8d1 	bl	8000730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2208      	movs	r2, #8
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	; (80005c8 <MX_TIM4_Init+0xec>)
 8000596:	f001 fa21 	bl	80019dc <HAL_TIM_PWM_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80005a0:	f000 f8c6 	bl	8000730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	220c      	movs	r2, #12
 80005a8:	4619      	mov	r1, r3
 80005aa:	4807      	ldr	r0, [pc, #28]	; (80005c8 <MX_TIM4_Init+0xec>)
 80005ac:	f001 fa16 	bl	80019dc <HAL_TIM_PWM_ConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80005b6:	f000 f8bb 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <MX_TIM4_Init+0xec>)
 80005bc:	f000 f90e 	bl	80007dc <HAL_TIM_MspPostInit>

}
 80005c0:	bf00      	nop
 80005c2:	3728      	adds	r7, #40	; 0x28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000028 	.word	0x20000028
 80005cc:	40000800 	.word	0x40000800

080005d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_USART1_UART_Init+0x4c>)
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <MX_USART1_UART_Init+0x50>)
 80005d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <MX_USART1_UART_Init+0x4c>)
 80005dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_USART1_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_USART1_UART_Init+0x4c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MX_USART1_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_USART1_UART_Init+0x4c>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <MX_USART1_UART_Init+0x4c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <MX_USART1_UART_Init+0x4c>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_USART1_UART_Init+0x4c>)
 8000608:	f001 fd12 	bl	8002030 <HAL_UART_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000612:	f000 f88d 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000070 	.word	0x20000070
 8000620:	40013800 	.word	0x40013800

08000624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 0310 	add.w	r3, r7, #16
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000638:	4b39      	ldr	r3, [pc, #228]	; (8000720 <MX_GPIO_Init+0xfc>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a38      	ldr	r2, [pc, #224]	; (8000720 <MX_GPIO_Init+0xfc>)
 800063e:	f043 0310 	orr.w	r3, r3, #16
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b36      	ldr	r3, [pc, #216]	; (8000720 <MX_GPIO_Init+0xfc>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0310 	and.w	r3, r3, #16
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000650:	4b33      	ldr	r3, [pc, #204]	; (8000720 <MX_GPIO_Init+0xfc>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a32      	ldr	r2, [pc, #200]	; (8000720 <MX_GPIO_Init+0xfc>)
 8000656:	f043 0320 	orr.w	r3, r3, #32
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b30      	ldr	r3, [pc, #192]	; (8000720 <MX_GPIO_Init+0xfc>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0320 	and.w	r3, r3, #32
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000668:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <MX_GPIO_Init+0xfc>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a2c      	ldr	r2, [pc, #176]	; (8000720 <MX_GPIO_Init+0xfc>)
 800066e:	f043 0308 	orr.w	r3, r3, #8
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <MX_GPIO_Init+0xfc>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0308 	and.w	r3, r3, #8
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b27      	ldr	r3, [pc, #156]	; (8000720 <MX_GPIO_Init+0xfc>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a26      	ldr	r2, [pc, #152]	; (8000720 <MX_GPIO_Init+0xfc>)
 8000686:	f043 0304 	orr.w	r3, r3, #4
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b24      	ldr	r3, [pc, #144]	; (8000720 <MX_GPIO_Init+0xfc>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0304 	and.w	r3, r3, #4
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800069e:	4821      	ldr	r0, [pc, #132]	; (8000724 <MX_GPIO_Init+0x100>)
 80006a0:	f000 fc5e 	bl	8000f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INA2_Pin|INB2_Pin|INA1_Pin|INB1_Pin
 80006a4:	2200      	movs	r2, #0
 80006a6:	f24f 0138 	movw	r1, #61496	; 0xf038
 80006aa:	481f      	ldr	r0, [pc, #124]	; (8000728 <MX_GPIO_Init+0x104>)
 80006ac:	f000 fc58 	bl	8000f60 <HAL_GPIO_WritePin>
                          |MOTORS_EN_Pin|INA4_Pin|INB4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INA3_Pin|INB3_Pin, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80006b6:	481d      	ldr	r0, [pc, #116]	; (800072c <MX_GPIO_Init+0x108>)
 80006b8:	f000 fc52 	bl	8000f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80006bc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80006c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	4619      	mov	r1, r3
 80006d4:	4813      	ldr	r0, [pc, #76]	; (8000724 <MX_GPIO_Init+0x100>)
 80006d6:	f000 fabf 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : INA2_Pin INB2_Pin INA1_Pin INB1_Pin
                           MOTORS_EN_Pin INA4_Pin INB4_Pin */
  GPIO_InitStruct.Pin = INA2_Pin|INB2_Pin|INA1_Pin|INB1_Pin
 80006da:	f24f 0338 	movw	r3, #61496	; 0xf038
 80006de:	613b      	str	r3, [r7, #16]
                          |MOTORS_EN_Pin|INA4_Pin|INB4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2302      	movs	r3, #2
 80006ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	4619      	mov	r1, r3
 80006f2:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_GPIO_Init+0x104>)
 80006f4:	f000 fab0 	bl	8000c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : INA3_Pin INB3_Pin */
  GPIO_InitStruct.Pin = INA3_Pin|INB3_Pin;
 80006f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2302      	movs	r3, #2
 8000708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	4619      	mov	r1, r3
 8000710:	4806      	ldr	r0, [pc, #24]	; (800072c <MX_GPIO_Init+0x108>)
 8000712:	f000 faa1 	bl	8000c58 <HAL_GPIO_Init>

}
 8000716:	bf00      	nop
 8000718:	3720      	adds	r7, #32
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000
 8000724:	40011000 	.word	0x40011000
 8000728:	40010c00 	.word	0x40010c00
 800072c:	40010800 	.word	0x40010800

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000734:	b672      	cpsid	i
}
 8000736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000738:	e7fe      	b.n	8000738 <Error_Handler+0x8>
	...

0800073c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_MspInit+0x5c>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <HAL_MspInit+0x5c>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6193      	str	r3, [r2, #24]
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_MspInit+0x5c>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_MspInit+0x5c>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <HAL_MspInit+0x5c>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_MspInit+0x5c>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <HAL_MspInit+0x60>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <HAL_MspInit+0x60>)
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	40021000 	.word	0x40021000
 800079c:	40010000 	.word	0x40010000

080007a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a09      	ldr	r2, [pc, #36]	; (80007d4 <HAL_TIM_PWM_MspInit+0x34>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d10b      	bne.n	80007ca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <HAL_TIM_PWM_MspInit+0x38>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <HAL_TIM_PWM_MspInit+0x38>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	61d3      	str	r3, [r2, #28]
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_TIM_PWM_MspInit+0x38>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	40000800 	.word	0x40000800
 80007d8:	40021000 	.word	0x40021000

080007dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <HAL_TIM_MspPostInit+0x5c>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d118      	bne.n	800082e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_TIM_MspPostInit+0x60>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a0e      	ldr	r2, [pc, #56]	; (800083c <HAL_TIM_MspPostInit+0x60>)
 8000802:	f043 0308 	orr.w	r3, r3, #8
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <HAL_TIM_MspPostInit+0x60>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f003 0308 	and.w	r3, r3, #8
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM4_Pin;
 8000814:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000818:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2302      	movs	r3, #2
 8000820:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <HAL_TIM_MspPostInit+0x64>)
 800082a:	f000 fa15 	bl	8000c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800082e:	bf00      	nop
 8000830:	3720      	adds	r7, #32
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40000800 	.word	0x40000800
 800083c:	40021000 	.word	0x40021000
 8000840:	40010c00 	.word	0x40010c00

08000844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <HAL_UART_MspInit+0x8c>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d131      	bne.n	80008c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <HAL_UART_MspInit+0x90>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a1a      	ldr	r2, [pc, #104]	; (80008d4 <HAL_UART_MspInit+0x90>)
 800086a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <HAL_UART_MspInit+0x90>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <HAL_UART_MspInit+0x90>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <HAL_UART_MspInit+0x90>)
 8000882:	f043 0304 	orr.w	r3, r3, #4
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <HAL_UART_MspInit+0x90>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f003 0304 	and.w	r3, r3, #4
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000898:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	4619      	mov	r1, r3
 80008a8:	480b      	ldr	r0, [pc, #44]	; (80008d8 <HAL_UART_MspInit+0x94>)
 80008aa:	f000 f9d5 	bl	8000c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	4619      	mov	r1, r3
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <HAL_UART_MspInit+0x94>)
 80008c4:	f000 f9c8 	bl	8000c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008c8:	bf00      	nop
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40013800 	.word	0x40013800
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40010800 	.word	0x40010800

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <NMI_Handler+0x4>

080008e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <MemManage_Handler+0x4>

080008ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr

0800091e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000922:	f000 f875 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}

0800092a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
	...

08000938 <Reset_Handler>:
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <LoopFillZerobss+0x12>)
 800093a:	490d      	ldr	r1, [pc, #52]	; (8000970 <LoopFillZerobss+0x16>)
 800093c:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <LoopFillZerobss+0x1a>)
 800093e:	2300      	movs	r3, #0
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:
 8000942:	58d4      	ldr	r4, [r2, r3]
 8000944:	50c4      	str	r4, [r0, r3]
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:
 8000948:	18c4      	adds	r4, r0, r3
 800094a:	428c      	cmp	r4, r1
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <LoopFillZerobss+0x1e>)
 8000950:	4c0a      	ldr	r4, [pc, #40]	; (800097c <LoopFillZerobss+0x22>)
 8000952:	2300      	movs	r3, #0
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:
 800095a:	42a2      	cmp	r2, r4
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>
 800095e:	f7ff ffe4 	bl	800092a <SystemInit>
 8000962:	f001 fd2d 	bl	80023c0 <__libc_init_array>
 8000966:	f7ff fc9f 	bl	80002a8 <main>
 800096a:	4770      	bx	lr
 800096c:	20000000 	.word	0x20000000
 8000970:	2000000c 	.word	0x2000000c
 8000974:	08002460 	.word	0x08002460
 8000978:	2000000c 	.word	0x2000000c
 800097c:	200000e0 	.word	0x200000e0

08000980 <ADC1_2_IRQHandler>:
 8000980:	e7fe      	b.n	8000980 <ADC1_2_IRQHandler>
	...

08000984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_Init+0x28>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a07      	ldr	r2, [pc, #28]	; (80009ac <HAL_Init+0x28>)
 800098e:	f043 0310 	orr.w	r3, r3, #16
 8000992:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000994:	2003      	movs	r0, #3
 8000996:	f000 f92b 	bl	8000bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099a:	200f      	movs	r0, #15
 800099c:	f000 f808 	bl	80009b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a0:	f7ff fecc 	bl	800073c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40022000 	.word	0x40022000

080009b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_InitTick+0x54>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x58>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f935 	bl	8000c3e <HAL_SYSTICK_Config>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e00e      	b.n	80009fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d80a      	bhi.n	80009fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	f000 f90b 	bl	8000c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <HAL_InitTick+0x5c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_IncTick+0x1c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_IncTick+0x20>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a03      	ldr	r2, [pc, #12]	; (8000a30 <HAL_IncTick+0x20>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	200000dc 	.word	0x200000dc

08000a34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b02      	ldr	r3, [pc, #8]	; (8000a44 <HAL_GetTick+0x10>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	200000dc 	.word	0x200000dc

08000a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a50:	f7ff fff0 	bl	8000a34 <HAL_GetTick>
 8000a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a60:	d005      	beq.n	8000a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <HAL_Delay+0x44>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	461a      	mov	r2, r3
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a6e:	bf00      	nop
 8000a70:	f7ff ffe0 	bl	8000a34 <HAL_GetTick>
 8000a74:	4602      	mov	r2, r0
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d8f7      	bhi.n	8000a70 <HAL_Delay+0x28>
  {
  }
}
 8000a80:	bf00      	nop
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000008 	.word	0x20000008

08000a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	60d3      	str	r3, [r2, #12]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	f003 0307 	and.w	r3, r3, #7
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	db0a      	blt.n	8000b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	490c      	ldr	r1, [pc, #48]	; (8000b40 <__NVIC_SetPriority+0x4c>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	0112      	lsls	r2, r2, #4
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b1c:	e00a      	b.n	8000b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4908      	ldr	r1, [pc, #32]	; (8000b44 <__NVIC_SetPriority+0x50>)
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	3b04      	subs	r3, #4
 8000b2c:	0112      	lsls	r2, r2, #4
 8000b2e:	b2d2      	uxtb	r2, r2
 8000b30:	440b      	add	r3, r1
 8000b32:	761a      	strb	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	f1c3 0307 	rsb	r3, r3, #7
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	bf28      	it	cs
 8000b66:	2304      	movcs	r3, #4
 8000b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	d902      	bls.n	8000b78 <NVIC_EncodePriority+0x30>
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3b03      	subs	r3, #3
 8000b76:	e000      	b.n	8000b7a <NVIC_EncodePriority+0x32>
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43da      	mvns	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b90:	f04f 31ff 	mov.w	r1, #4294967295
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43d9      	mvns	r1, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	4313      	orrs	r3, r2
         );
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3724      	adds	r7, #36	; 0x24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bbc:	d301      	bcc.n	8000bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00f      	b.n	8000be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <SysTick_Config+0x40>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bca:	210f      	movs	r1, #15
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f7ff ff90 	bl	8000af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <SysTick_Config+0x40>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <SysTick_Config+0x40>)
 8000bdc:	2207      	movs	r2, #7
 8000bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	e000e010 	.word	0xe000e010

08000bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ff49 	bl	8000a90 <__NVIC_SetPriorityGrouping>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c18:	f7ff ff5e 	bl	8000ad8 <__NVIC_GetPriorityGrouping>
 8000c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	6978      	ldr	r0, [r7, #20]
 8000c24:	f7ff ff90 	bl	8000b48 <NVIC_EncodePriority>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff5f 	bl	8000af4 <__NVIC_SetPriority>
}
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ffb0 	bl	8000bac <SysTick_Config>
 8000c4c:	4603      	mov	r3, r0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b08b      	sub	sp, #44	; 0x2c
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c66:	2300      	movs	r3, #0
 8000c68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6a:	e169      	b.n	8000f40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	69fa      	ldr	r2, [r7, #28]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	f040 8158 	bne.w	8000f3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	4a9a      	ldr	r2, [pc, #616]	; (8000ef8 <HAL_GPIO_Init+0x2a0>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d05e      	beq.n	8000d52 <HAL_GPIO_Init+0xfa>
 8000c94:	4a98      	ldr	r2, [pc, #608]	; (8000ef8 <HAL_GPIO_Init+0x2a0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d875      	bhi.n	8000d86 <HAL_GPIO_Init+0x12e>
 8000c9a:	4a98      	ldr	r2, [pc, #608]	; (8000efc <HAL_GPIO_Init+0x2a4>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d058      	beq.n	8000d52 <HAL_GPIO_Init+0xfa>
 8000ca0:	4a96      	ldr	r2, [pc, #600]	; (8000efc <HAL_GPIO_Init+0x2a4>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d86f      	bhi.n	8000d86 <HAL_GPIO_Init+0x12e>
 8000ca6:	4a96      	ldr	r2, [pc, #600]	; (8000f00 <HAL_GPIO_Init+0x2a8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d052      	beq.n	8000d52 <HAL_GPIO_Init+0xfa>
 8000cac:	4a94      	ldr	r2, [pc, #592]	; (8000f00 <HAL_GPIO_Init+0x2a8>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d869      	bhi.n	8000d86 <HAL_GPIO_Init+0x12e>
 8000cb2:	4a94      	ldr	r2, [pc, #592]	; (8000f04 <HAL_GPIO_Init+0x2ac>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d04c      	beq.n	8000d52 <HAL_GPIO_Init+0xfa>
 8000cb8:	4a92      	ldr	r2, [pc, #584]	; (8000f04 <HAL_GPIO_Init+0x2ac>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d863      	bhi.n	8000d86 <HAL_GPIO_Init+0x12e>
 8000cbe:	4a92      	ldr	r2, [pc, #584]	; (8000f08 <HAL_GPIO_Init+0x2b0>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d046      	beq.n	8000d52 <HAL_GPIO_Init+0xfa>
 8000cc4:	4a90      	ldr	r2, [pc, #576]	; (8000f08 <HAL_GPIO_Init+0x2b0>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d85d      	bhi.n	8000d86 <HAL_GPIO_Init+0x12e>
 8000cca:	2b12      	cmp	r3, #18
 8000ccc:	d82a      	bhi.n	8000d24 <HAL_GPIO_Init+0xcc>
 8000cce:	2b12      	cmp	r3, #18
 8000cd0:	d859      	bhi.n	8000d86 <HAL_GPIO_Init+0x12e>
 8000cd2:	a201      	add	r2, pc, #4	; (adr r2, 8000cd8 <HAL_GPIO_Init+0x80>)
 8000cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd8:	08000d53 	.word	0x08000d53
 8000cdc:	08000d2d 	.word	0x08000d2d
 8000ce0:	08000d3f 	.word	0x08000d3f
 8000ce4:	08000d81 	.word	0x08000d81
 8000ce8:	08000d87 	.word	0x08000d87
 8000cec:	08000d87 	.word	0x08000d87
 8000cf0:	08000d87 	.word	0x08000d87
 8000cf4:	08000d87 	.word	0x08000d87
 8000cf8:	08000d87 	.word	0x08000d87
 8000cfc:	08000d87 	.word	0x08000d87
 8000d00:	08000d87 	.word	0x08000d87
 8000d04:	08000d87 	.word	0x08000d87
 8000d08:	08000d87 	.word	0x08000d87
 8000d0c:	08000d87 	.word	0x08000d87
 8000d10:	08000d87 	.word	0x08000d87
 8000d14:	08000d87 	.word	0x08000d87
 8000d18:	08000d87 	.word	0x08000d87
 8000d1c:	08000d35 	.word	0x08000d35
 8000d20:	08000d49 	.word	0x08000d49
 8000d24:	4a79      	ldr	r2, [pc, #484]	; (8000f0c <HAL_GPIO_Init+0x2b4>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d013      	beq.n	8000d52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d2a:	e02c      	b.n	8000d86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	623b      	str	r3, [r7, #32]
          break;
 8000d32:	e029      	b.n	8000d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	623b      	str	r3, [r7, #32]
          break;
 8000d3c:	e024      	b.n	8000d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	3308      	adds	r3, #8
 8000d44:	623b      	str	r3, [r7, #32]
          break;
 8000d46:	e01f      	b.n	8000d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	330c      	adds	r3, #12
 8000d4e:	623b      	str	r3, [r7, #32]
          break;
 8000d50:	e01a      	b.n	8000d88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d102      	bne.n	8000d60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	623b      	str	r3, [r7, #32]
          break;
 8000d5e:	e013      	b.n	8000d88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d105      	bne.n	8000d74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d68:	2308      	movs	r3, #8
 8000d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	69fa      	ldr	r2, [r7, #28]
 8000d70:	611a      	str	r2, [r3, #16]
          break;
 8000d72:	e009      	b.n	8000d88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d74:	2308      	movs	r3, #8
 8000d76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69fa      	ldr	r2, [r7, #28]
 8000d7c:	615a      	str	r2, [r3, #20]
          break;
 8000d7e:	e003      	b.n	8000d88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
          break;
 8000d84:	e000      	b.n	8000d88 <HAL_GPIO_Init+0x130>
          break;
 8000d86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	2bff      	cmp	r3, #255	; 0xff
 8000d8c:	d801      	bhi.n	8000d92 <HAL_GPIO_Init+0x13a>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	e001      	b.n	8000d96 <HAL_GPIO_Init+0x13e>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3304      	adds	r3, #4
 8000d96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	2bff      	cmp	r3, #255	; 0xff
 8000d9c:	d802      	bhi.n	8000da4 <HAL_GPIO_Init+0x14c>
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	e002      	b.n	8000daa <HAL_GPIO_Init+0x152>
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	3b08      	subs	r3, #8
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	210f      	movs	r1, #15
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	fa01 f303 	lsl.w	r3, r1, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	401a      	ands	r2, r3
 8000dbc:	6a39      	ldr	r1, [r7, #32]
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd8:	4b4d      	ldr	r3, [pc, #308]	; (8000f10 <HAL_GPIO_Init+0x2b8>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a4c      	ldr	r2, [pc, #304]	; (8000f10 <HAL_GPIO_Init+0x2b8>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b4a      	ldr	r3, [pc, #296]	; (8000f10 <HAL_GPIO_Init+0x2b8>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000df0:	4a48      	ldr	r2, [pc, #288]	; (8000f14 <HAL_GPIO_Init+0x2bc>)
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	089b      	lsrs	r3, r3, #2
 8000df6:	3302      	adds	r3, #2
 8000df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	220f      	movs	r2, #15
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	4013      	ands	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a40      	ldr	r2, [pc, #256]	; (8000f18 <HAL_GPIO_Init+0x2c0>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d013      	beq.n	8000e44 <HAL_GPIO_Init+0x1ec>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a3f      	ldr	r2, [pc, #252]	; (8000f1c <HAL_GPIO_Init+0x2c4>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d00d      	beq.n	8000e40 <HAL_GPIO_Init+0x1e8>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a3e      	ldr	r2, [pc, #248]	; (8000f20 <HAL_GPIO_Init+0x2c8>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d007      	beq.n	8000e3c <HAL_GPIO_Init+0x1e4>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a3d      	ldr	r2, [pc, #244]	; (8000f24 <HAL_GPIO_Init+0x2cc>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d101      	bne.n	8000e38 <HAL_GPIO_Init+0x1e0>
 8000e34:	2303      	movs	r3, #3
 8000e36:	e006      	b.n	8000e46 <HAL_GPIO_Init+0x1ee>
 8000e38:	2304      	movs	r3, #4
 8000e3a:	e004      	b.n	8000e46 <HAL_GPIO_Init+0x1ee>
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	e002      	b.n	8000e46 <HAL_GPIO_Init+0x1ee>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <HAL_GPIO_Init+0x1ee>
 8000e44:	2300      	movs	r3, #0
 8000e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e48:	f002 0203 	and.w	r2, r2, #3
 8000e4c:	0092      	lsls	r2, r2, #2
 8000e4e:	4093      	lsls	r3, r2
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e56:	492f      	ldr	r1, [pc, #188]	; (8000f14 <HAL_GPIO_Init+0x2bc>)
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d006      	beq.n	8000e7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e70:	4b2d      	ldr	r3, [pc, #180]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	492c      	ldr	r1, [pc, #176]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	600b      	str	r3, [r1, #0]
 8000e7c:	e006      	b.n	8000e8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	4928      	ldr	r1, [pc, #160]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000e88:	4013      	ands	r3, r2
 8000e8a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d006      	beq.n	8000ea6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e98:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	4922      	ldr	r1, [pc, #136]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	604b      	str	r3, [r1, #4]
 8000ea4:	e006      	b.n	8000eb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ea6:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	491e      	ldr	r1, [pc, #120]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d006      	beq.n	8000ece <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	4918      	ldr	r1, [pc, #96]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	608b      	str	r3, [r1, #8]
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	4914      	ldr	r1, [pc, #80]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000ed8:	4013      	ands	r3, r2
 8000eda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d021      	beq.n	8000f2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	490e      	ldr	r1, [pc, #56]	; (8000f28 <HAL_GPIO_Init+0x2d0>)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	60cb      	str	r3, [r1, #12]
 8000ef4:	e021      	b.n	8000f3a <HAL_GPIO_Init+0x2e2>
 8000ef6:	bf00      	nop
 8000ef8:	10320000 	.word	0x10320000
 8000efc:	10310000 	.word	0x10310000
 8000f00:	10220000 	.word	0x10220000
 8000f04:	10210000 	.word	0x10210000
 8000f08:	10120000 	.word	0x10120000
 8000f0c:	10110000 	.word	0x10110000
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40010000 	.word	0x40010000
 8000f18:	40010800 	.word	0x40010800
 8000f1c:	40010c00 	.word	0x40010c00
 8000f20:	40011000 	.word	0x40011000
 8000f24:	40011400 	.word	0x40011400
 8000f28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_GPIO_Init+0x304>)
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	4909      	ldr	r1, [pc, #36]	; (8000f5c <HAL_GPIO_Init+0x304>)
 8000f36:	4013      	ands	r3, r2
 8000f38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	fa22 f303 	lsr.w	r3, r2, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f47f ae8e 	bne.w	8000c6c <HAL_GPIO_Init+0x14>
  }
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	372c      	adds	r7, #44	; 0x2c
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	40010400 	.word	0x40010400

08000f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f70:	787b      	ldrb	r3, [r7, #1]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f76:	887a      	ldrh	r2, [r7, #2]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f7c:	e003      	b.n	8000f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f7e:	887b      	ldrh	r3, [r7, #2]
 8000f80:	041a      	lsls	r2, r3, #16
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	611a      	str	r2, [r3, #16]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fa2:	887a      	ldrh	r2, [r7, #2]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	041a      	lsls	r2, r3, #16
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43d9      	mvns	r1, r3
 8000fae:	887b      	ldrh	r3, [r7, #2]
 8000fb0:	400b      	ands	r3, r1
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	611a      	str	r2, [r3, #16]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
	...

08000fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e272      	b.n	80014bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 8087 	beq.w	80010f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fe4:	4b92      	ldr	r3, [pc, #584]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 030c 	and.w	r3, r3, #12
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	d00c      	beq.n	800100a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ff0:	4b8f      	ldr	r3, [pc, #572]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 030c 	and.w	r3, r3, #12
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d112      	bne.n	8001022 <HAL_RCC_OscConfig+0x5e>
 8000ffc:	4b8c      	ldr	r3, [pc, #560]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001008:	d10b      	bne.n	8001022 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100a:	4b89      	ldr	r3, [pc, #548]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d06c      	beq.n	80010f0 <HAL_RCC_OscConfig+0x12c>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d168      	bne.n	80010f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e24c      	b.n	80014bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800102a:	d106      	bne.n	800103a <HAL_RCC_OscConfig+0x76>
 800102c:	4b80      	ldr	r3, [pc, #512]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a7f      	ldr	r2, [pc, #508]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 8001032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	e02e      	b.n	8001098 <HAL_RCC_OscConfig+0xd4>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10c      	bne.n	800105c <HAL_RCC_OscConfig+0x98>
 8001042:	4b7b      	ldr	r3, [pc, #492]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a7a      	ldr	r2, [pc, #488]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 8001048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	4b78      	ldr	r3, [pc, #480]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a77      	ldr	r2, [pc, #476]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 8001054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	e01d      	b.n	8001098 <HAL_RCC_OscConfig+0xd4>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001064:	d10c      	bne.n	8001080 <HAL_RCC_OscConfig+0xbc>
 8001066:	4b72      	ldr	r3, [pc, #456]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a71      	ldr	r2, [pc, #452]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 800106c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	4b6f      	ldr	r3, [pc, #444]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a6e      	ldr	r2, [pc, #440]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 8001078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e00b      	b.n	8001098 <HAL_RCC_OscConfig+0xd4>
 8001080:	4b6b      	ldr	r3, [pc, #428]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a6a      	ldr	r2, [pc, #424]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 8001086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b68      	ldr	r3, [pc, #416]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a67      	ldr	r2, [pc, #412]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 8001092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001096:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d013      	beq.n	80010c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fcc8 	bl	8000a34 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a8:	f7ff fcc4 	bl	8000a34 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b64      	cmp	r3, #100	; 0x64
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e200      	b.n	80014bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ba:	4b5d      	ldr	r3, [pc, #372]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0f0      	beq.n	80010a8 <HAL_RCC_OscConfig+0xe4>
 80010c6:	e014      	b.n	80010f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff fcb4 	bl	8000a34 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d0:	f7ff fcb0 	bl	8000a34 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b64      	cmp	r3, #100	; 0x64
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e1ec      	b.n	80014bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e2:	4b53      	ldr	r3, [pc, #332]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f0      	bne.n	80010d0 <HAL_RCC_OscConfig+0x10c>
 80010ee:	e000      	b.n	80010f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d063      	beq.n	80011c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010fe:	4b4c      	ldr	r3, [pc, #304]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 030c 	and.w	r3, r3, #12
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00b      	beq.n	8001122 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800110a:	4b49      	ldr	r3, [pc, #292]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 030c 	and.w	r3, r3, #12
 8001112:	2b08      	cmp	r3, #8
 8001114:	d11c      	bne.n	8001150 <HAL_RCC_OscConfig+0x18c>
 8001116:	4b46      	ldr	r3, [pc, #280]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d116      	bne.n	8001150 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001122:	4b43      	ldr	r3, [pc, #268]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d005      	beq.n	800113a <HAL_RCC_OscConfig+0x176>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d001      	beq.n	800113a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e1c0      	b.n	80014bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113a:	4b3d      	ldr	r3, [pc, #244]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	4939      	ldr	r1, [pc, #228]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 800114a:	4313      	orrs	r3, r2
 800114c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114e:	e03a      	b.n	80011c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d020      	beq.n	800119a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001158:	4b36      	ldr	r3, [pc, #216]	; (8001234 <HAL_RCC_OscConfig+0x270>)
 800115a:	2201      	movs	r2, #1
 800115c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115e:	f7ff fc69 	bl	8000a34 <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001166:	f7ff fc65 	bl	8000a34 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e1a1      	b.n	80014bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0f0      	beq.n	8001166 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001184:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	4927      	ldr	r1, [pc, #156]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 8001194:	4313      	orrs	r3, r2
 8001196:	600b      	str	r3, [r1, #0]
 8001198:	e015      	b.n	80011c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <HAL_RCC_OscConfig+0x270>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fc48 	bl	8000a34 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a8:	f7ff fc44 	bl	8000a34 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e180      	b.n	80014bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f0      	bne.n	80011a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d03a      	beq.n	8001248 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d019      	beq.n	800120e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <HAL_RCC_OscConfig+0x274>)
 80011dc:	2201      	movs	r2, #1
 80011de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e0:	f7ff fc28 	bl	8000a34 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e8:	f7ff fc24 	bl	8000a34 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e160      	b.n	80014bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f0      	beq.n	80011e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001206:	2001      	movs	r0, #1
 8001208:	f000 fad8 	bl	80017bc <RCC_Delay>
 800120c:	e01c      	b.n	8001248 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <HAL_RCC_OscConfig+0x274>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001214:	f7ff fc0e 	bl	8000a34 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800121a:	e00f      	b.n	800123c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800121c:	f7ff fc0a 	bl	8000a34 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d908      	bls.n	800123c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e146      	b.n	80014bc <HAL_RCC_OscConfig+0x4f8>
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
 8001234:	42420000 	.word	0x42420000
 8001238:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800123c:	4b92      	ldr	r3, [pc, #584]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1e9      	bne.n	800121c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 80a6 	beq.w	80013a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800125a:	4b8b      	ldr	r3, [pc, #556]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10d      	bne.n	8001282 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	4b88      	ldr	r3, [pc, #544]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	4a87      	ldr	r2, [pc, #540]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001270:	61d3      	str	r3, [r2, #28]
 8001272:	4b85      	ldr	r3, [pc, #532]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800127e:	2301      	movs	r3, #1
 8001280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001282:	4b82      	ldr	r3, [pc, #520]	; (800148c <HAL_RCC_OscConfig+0x4c8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128a:	2b00      	cmp	r3, #0
 800128c:	d118      	bne.n	80012c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800128e:	4b7f      	ldr	r3, [pc, #508]	; (800148c <HAL_RCC_OscConfig+0x4c8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a7e      	ldr	r2, [pc, #504]	; (800148c <HAL_RCC_OscConfig+0x4c8>)
 8001294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800129a:	f7ff fbcb 	bl	8000a34 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a2:	f7ff fbc7 	bl	8000a34 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b64      	cmp	r3, #100	; 0x64
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e103      	b.n	80014bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b4:	4b75      	ldr	r3, [pc, #468]	; (800148c <HAL_RCC_OscConfig+0x4c8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d106      	bne.n	80012d6 <HAL_RCC_OscConfig+0x312>
 80012c8:	4b6f      	ldr	r3, [pc, #444]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	4a6e      	ldr	r2, [pc, #440]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6213      	str	r3, [r2, #32]
 80012d4:	e02d      	b.n	8001332 <HAL_RCC_OscConfig+0x36e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x334>
 80012de:	4b6a      	ldr	r3, [pc, #424]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	4a69      	ldr	r2, [pc, #420]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	f023 0301 	bic.w	r3, r3, #1
 80012e8:	6213      	str	r3, [r2, #32]
 80012ea:	4b67      	ldr	r3, [pc, #412]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	4a66      	ldr	r2, [pc, #408]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	f023 0304 	bic.w	r3, r3, #4
 80012f4:	6213      	str	r3, [r2, #32]
 80012f6:	e01c      	b.n	8001332 <HAL_RCC_OscConfig+0x36e>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2b05      	cmp	r3, #5
 80012fe:	d10c      	bne.n	800131a <HAL_RCC_OscConfig+0x356>
 8001300:	4b61      	ldr	r3, [pc, #388]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	4a60      	ldr	r2, [pc, #384]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	6213      	str	r3, [r2, #32]
 800130c:	4b5e      	ldr	r3, [pc, #376]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	4a5d      	ldr	r2, [pc, #372]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6213      	str	r3, [r2, #32]
 8001318:	e00b      	b.n	8001332 <HAL_RCC_OscConfig+0x36e>
 800131a:	4b5b      	ldr	r3, [pc, #364]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	4a5a      	ldr	r2, [pc, #360]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 8001320:	f023 0301 	bic.w	r3, r3, #1
 8001324:	6213      	str	r3, [r2, #32]
 8001326:	4b58      	ldr	r3, [pc, #352]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	4a57      	ldr	r2, [pc, #348]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 800132c:	f023 0304 	bic.w	r3, r3, #4
 8001330:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d015      	beq.n	8001366 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133a:	f7ff fb7b 	bl	8000a34 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001340:	e00a      	b.n	8001358 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001342:	f7ff fb77 	bl	8000a34 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001350:	4293      	cmp	r3, r2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e0b1      	b.n	80014bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001358:	4b4b      	ldr	r3, [pc, #300]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0ee      	beq.n	8001342 <HAL_RCC_OscConfig+0x37e>
 8001364:	e014      	b.n	8001390 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001366:	f7ff fb65 	bl	8000a34 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800136c:	e00a      	b.n	8001384 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800136e:	f7ff fb61 	bl	8000a34 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	f241 3288 	movw	r2, #5000	; 0x1388
 800137c:	4293      	cmp	r3, r2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e09b      	b.n	80014bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001384:	4b40      	ldr	r3, [pc, #256]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1ee      	bne.n	800136e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001390:	7dfb      	ldrb	r3, [r7, #23]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d105      	bne.n	80013a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001396:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	4a3b      	ldr	r2, [pc, #236]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 800139c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 8087 	beq.w	80014ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ac:	4b36      	ldr	r3, [pc, #216]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 030c 	and.w	r3, r3, #12
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	d061      	beq.n	800147c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d146      	bne.n	800144e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c0:	4b33      	ldr	r3, [pc, #204]	; (8001490 <HAL_RCC_OscConfig+0x4cc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c6:	f7ff fb35 	bl	8000a34 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ce:	f7ff fb31 	bl	8000a34 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e06d      	b.n	80014bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e0:	4b29      	ldr	r3, [pc, #164]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f0      	bne.n	80013ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f4:	d108      	bne.n	8001408 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013f6:	4b24      	ldr	r3, [pc, #144]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	4921      	ldr	r1, [pc, #132]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	4313      	orrs	r3, r2
 8001406:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a19      	ldr	r1, [r3, #32]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	430b      	orrs	r3, r1
 800141a:	491b      	ldr	r1, [pc, #108]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_RCC_OscConfig+0x4cc>)
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001426:	f7ff fb05 	bl	8000a34 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800142e:	f7ff fb01 	bl	8000a34 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e03d      	b.n	80014bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f0      	beq.n	800142e <HAL_RCC_OscConfig+0x46a>
 800144c:	e035      	b.n	80014ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <HAL_RCC_OscConfig+0x4cc>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff faee 	bl	8000a34 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145c:	f7ff faea 	bl	8000a34 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e026      	b.n	80014bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_RCC_OscConfig+0x4c4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x498>
 800147a:	e01e      	b.n	80014ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d107      	bne.n	8001494 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e019      	b.n	80014bc <HAL_RCC_OscConfig+0x4f8>
 8001488:	40021000 	.word	0x40021000
 800148c:	40007000 	.word	0x40007000
 8001490:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_RCC_OscConfig+0x500>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d106      	bne.n	80014b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d001      	beq.n	80014ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000

080014c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0d0      	b.n	800167e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014dc:	4b6a      	ldr	r3, [pc, #424]	; (8001688 <HAL_RCC_ClockConfig+0x1c0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d910      	bls.n	800150c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ea:	4b67      	ldr	r3, [pc, #412]	; (8001688 <HAL_RCC_ClockConfig+0x1c0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f023 0207 	bic.w	r2, r3, #7
 80014f2:	4965      	ldr	r1, [pc, #404]	; (8001688 <HAL_RCC_ClockConfig+0x1c0>)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fa:	4b63      	ldr	r3, [pc, #396]	; (8001688 <HAL_RCC_ClockConfig+0x1c0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d001      	beq.n	800150c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0b8      	b.n	800167e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d020      	beq.n	800155a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001524:	4b59      	ldr	r3, [pc, #356]	; (800168c <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	4a58      	ldr	r2, [pc, #352]	; (800168c <HAL_RCC_ClockConfig+0x1c4>)
 800152a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800152e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800153c:	4b53      	ldr	r3, [pc, #332]	; (800168c <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4a52      	ldr	r2, [pc, #328]	; (800168c <HAL_RCC_ClockConfig+0x1c4>)
 8001542:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001546:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001548:	4b50      	ldr	r3, [pc, #320]	; (800168c <HAL_RCC_ClockConfig+0x1c4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	494d      	ldr	r1, [pc, #308]	; (800168c <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	4313      	orrs	r3, r2
 8001558:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d040      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d107      	bne.n	800157e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156e:	4b47      	ldr	r3, [pc, #284]	; (800168c <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d115      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e07f      	b.n	800167e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d107      	bne.n	8001596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001586:	4b41      	ldr	r3, [pc, #260]	; (800168c <HAL_RCC_ClockConfig+0x1c4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d109      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e073      	b.n	800167e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001596:	4b3d      	ldr	r3, [pc, #244]	; (800168c <HAL_RCC_ClockConfig+0x1c4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e06b      	b.n	800167e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015a6:	4b39      	ldr	r3, [pc, #228]	; (800168c <HAL_RCC_ClockConfig+0x1c4>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f023 0203 	bic.w	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4936      	ldr	r1, [pc, #216]	; (800168c <HAL_RCC_ClockConfig+0x1c4>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015b8:	f7ff fa3c 	bl	8000a34 <HAL_GetTick>
 80015bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c0:	f7ff fa38 	bl	8000a34 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e053      	b.n	800167e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d6:	4b2d      	ldr	r3, [pc, #180]	; (800168c <HAL_RCC_ClockConfig+0x1c4>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 020c 	and.w	r2, r3, #12
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d1eb      	bne.n	80015c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015e8:	4b27      	ldr	r3, [pc, #156]	; (8001688 <HAL_RCC_ClockConfig+0x1c0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d210      	bcs.n	8001618 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f6:	4b24      	ldr	r3, [pc, #144]	; (8001688 <HAL_RCC_ClockConfig+0x1c0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f023 0207 	bic.w	r2, r3, #7
 80015fe:	4922      	ldr	r1, [pc, #136]	; (8001688 <HAL_RCC_ClockConfig+0x1c0>)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_RCC_ClockConfig+0x1c0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d001      	beq.n	8001618 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e032      	b.n	800167e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4916      	ldr	r1, [pc, #88]	; (800168c <HAL_RCC_ClockConfig+0x1c4>)
 8001632:	4313      	orrs	r3, r2
 8001634:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d009      	beq.n	8001656 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_RCC_ClockConfig+0x1c4>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	490e      	ldr	r1, [pc, #56]	; (800168c <HAL_RCC_ClockConfig+0x1c4>)
 8001652:	4313      	orrs	r3, r2
 8001654:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001656:	f000 f821 	bl	800169c <HAL_RCC_GetSysClockFreq>
 800165a:	4602      	mov	r2, r0
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_RCC_ClockConfig+0x1c4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	490a      	ldr	r1, [pc, #40]	; (8001690 <HAL_RCC_ClockConfig+0x1c8>)
 8001668:	5ccb      	ldrb	r3, [r1, r3]
 800166a:	fa22 f303 	lsr.w	r3, r2, r3
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <HAL_RCC_ClockConfig+0x1cc>)
 8001670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_RCC_ClockConfig+0x1d0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff f99a 	bl	80009b0 <HAL_InitTick>

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40022000 	.word	0x40022000
 800168c:	40021000 	.word	0x40021000
 8001690:	08002440 	.word	0x08002440
 8001694:	20000000 	.word	0x20000000
 8001698:	20000004 	.word	0x20000004

0800169c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800169c:	b490      	push	{r4, r7}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016a2:	4b29      	ldr	r3, [pc, #164]	; (8001748 <HAL_RCC_GetSysClockFreq+0xac>)
 80016a4:	1d3c      	adds	r4, r7, #4
 80016a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016ac:	f240 2301 	movw	r3, #513	; 0x201
 80016b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016c6:	4b21      	ldr	r3, [pc, #132]	; (800174c <HAL_RCC_GetSysClockFreq+0xb0>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d002      	beq.n	80016dc <HAL_RCC_GetSysClockFreq+0x40>
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d003      	beq.n	80016e2 <HAL_RCC_GetSysClockFreq+0x46>
 80016da:	e02b      	b.n	8001734 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016de:	623b      	str	r3, [r7, #32]
      break;
 80016e0:	e02b      	b.n	800173a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	0c9b      	lsrs	r3, r3, #18
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	3328      	adds	r3, #40	; 0x28
 80016ec:	443b      	add	r3, r7
 80016ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016f2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d012      	beq.n	8001724 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	0c5b      	lsrs	r3, r3, #17
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	3328      	adds	r3, #40	; 0x28
 800170a:	443b      	add	r3, r7
 800170c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001710:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	4a0e      	ldr	r2, [pc, #56]	; (8001750 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001716:	fb03 f202 	mul.w	r2, r3, r2
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
 8001722:	e004      	b.n	800172e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001728:	fb02 f303 	mul.w	r3, r2, r3
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	623b      	str	r3, [r7, #32]
      break;
 8001732:	e002      	b.n	800173a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001736:	623b      	str	r3, [r7, #32]
      break;
 8001738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800173a:	6a3b      	ldr	r3, [r7, #32]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3728      	adds	r7, #40	; 0x28
 8001740:	46bd      	mov	sp, r7
 8001742:	bc90      	pop	{r4, r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	08002430 	.word	0x08002430
 800174c:	40021000 	.word	0x40021000
 8001750:	007a1200 	.word	0x007a1200
 8001754:	003d0900 	.word	0x003d0900

08001758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800175c:	4b02      	ldr	r3, [pc, #8]	; (8001768 <HAL_RCC_GetHCLKFreq+0x10>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	20000000 	.word	0x20000000

0800176c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001770:	f7ff fff2 	bl	8001758 <HAL_RCC_GetHCLKFreq>
 8001774:	4602      	mov	r2, r0
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	0a1b      	lsrs	r3, r3, #8
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	4903      	ldr	r1, [pc, #12]	; (8001790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001782:	5ccb      	ldrb	r3, [r1, r3]
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001788:	4618      	mov	r0, r3
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40021000 	.word	0x40021000
 8001790:	08002450 	.word	0x08002450

08001794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001798:	f7ff ffde 	bl	8001758 <HAL_RCC_GetHCLKFreq>
 800179c:	4602      	mov	r2, r0
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	0adb      	lsrs	r3, r3, #11
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	4903      	ldr	r1, [pc, #12]	; (80017b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017aa:	5ccb      	ldrb	r3, [r1, r3]
 80017ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40021000 	.word	0x40021000
 80017b8:	08002450 	.word	0x08002450

080017bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <RCC_Delay+0x34>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <RCC_Delay+0x38>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	0a5b      	lsrs	r3, r3, #9
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017d8:	bf00      	nop
  }
  while (Delay --);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	1e5a      	subs	r2, r3, #1
 80017de:	60fa      	str	r2, [r7, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f9      	bne.n	80017d8 <RCC_Delay+0x1c>
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	20000000 	.word	0x20000000
 80017f4:	10624dd3 	.word	0x10624dd3

080017f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e041      	b.n	800188e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d106      	bne.n	8001824 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7fe ffbe 	bl	80007a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2202      	movs	r2, #2
 8001828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3304      	adds	r3, #4
 8001834:	4619      	mov	r1, r3
 8001836:	4610      	mov	r0, r2
 8001838:	f000 f98e 	bl	8001b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d109      	bne.n	80018bc <HAL_TIM_PWM_Start+0x24>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	bf14      	ite	ne
 80018b4:	2301      	movne	r3, #1
 80018b6:	2300      	moveq	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	e022      	b.n	8001902 <HAL_TIM_PWM_Start+0x6a>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d109      	bne.n	80018d6 <HAL_TIM_PWM_Start+0x3e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	bf14      	ite	ne
 80018ce:	2301      	movne	r3, #1
 80018d0:	2300      	moveq	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	e015      	b.n	8001902 <HAL_TIM_PWM_Start+0x6a>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d109      	bne.n	80018f0 <HAL_TIM_PWM_Start+0x58>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	bf14      	ite	ne
 80018e8:	2301      	movne	r3, #1
 80018ea:	2300      	moveq	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	e008      	b.n	8001902 <HAL_TIM_PWM_Start+0x6a>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	bf14      	ite	ne
 80018fc:	2301      	movne	r3, #1
 80018fe:	2300      	moveq	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e05e      	b.n	80019c8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d104      	bne.n	800191a <HAL_TIM_PWM_Start+0x82>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001918:	e013      	b.n	8001942 <HAL_TIM_PWM_Start+0xaa>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2b04      	cmp	r3, #4
 800191e:	d104      	bne.n	800192a <HAL_TIM_PWM_Start+0x92>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001928:	e00b      	b.n	8001942 <HAL_TIM_PWM_Start+0xaa>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2b08      	cmp	r3, #8
 800192e:	d104      	bne.n	800193a <HAL_TIM_PWM_Start+0xa2>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001938:	e003      	b.n	8001942 <HAL_TIM_PWM_Start+0xaa>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2202      	movs	r2, #2
 800193e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2201      	movs	r2, #1
 8001948:	6839      	ldr	r1, [r7, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f000 faee 	bl	8001f2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a1e      	ldr	r2, [pc, #120]	; (80019d0 <HAL_TIM_PWM_Start+0x138>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d107      	bne.n	800196a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a18      	ldr	r2, [pc, #96]	; (80019d0 <HAL_TIM_PWM_Start+0x138>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00e      	beq.n	8001992 <HAL_TIM_PWM_Start+0xfa>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800197c:	d009      	beq.n	8001992 <HAL_TIM_PWM_Start+0xfa>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <HAL_TIM_PWM_Start+0x13c>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d004      	beq.n	8001992 <HAL_TIM_PWM_Start+0xfa>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <HAL_TIM_PWM_Start+0x140>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d111      	bne.n	80019b6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b06      	cmp	r3, #6
 80019a2:	d010      	beq.n	80019c6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019b4:	e007      	b.n	80019c6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 0201 	orr.w	r2, r2, #1
 80019c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40012c00 	.word	0x40012c00
 80019d4:	40000400 	.word	0x40000400
 80019d8:	40000800 	.word	0x40000800

080019dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d101      	bne.n	80019f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80019f2:	2302      	movs	r3, #2
 80019f4:	e0ac      	b.n	8001b50 <HAL_TIM_PWM_ConfigChannel+0x174>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b0c      	cmp	r3, #12
 8001a02:	f200 809f 	bhi.w	8001b44 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001a06:	a201      	add	r2, pc, #4	; (adr r2, 8001a0c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0c:	08001a41 	.word	0x08001a41
 8001a10:	08001b45 	.word	0x08001b45
 8001a14:	08001b45 	.word	0x08001b45
 8001a18:	08001b45 	.word	0x08001b45
 8001a1c:	08001a81 	.word	0x08001a81
 8001a20:	08001b45 	.word	0x08001b45
 8001a24:	08001b45 	.word	0x08001b45
 8001a28:	08001b45 	.word	0x08001b45
 8001a2c:	08001ac3 	.word	0x08001ac3
 8001a30:	08001b45 	.word	0x08001b45
 8001a34:	08001b45 	.word	0x08001b45
 8001a38:	08001b45 	.word	0x08001b45
 8001a3c:	08001b03 	.word	0x08001b03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f8e8 	bl	8001c1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	699a      	ldr	r2, [r3, #24]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0208 	orr.w	r2, r2, #8
 8001a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699a      	ldr	r2, [r3, #24]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0204 	bic.w	r2, r2, #4
 8001a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6999      	ldr	r1, [r3, #24]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	691a      	ldr	r2, [r3, #16]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	619a      	str	r2, [r3, #24]
      break;
 8001a7e:	e062      	b.n	8001b46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f92e 	bl	8001ce8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699a      	ldr	r2, [r3, #24]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699a      	ldr	r2, [r3, #24]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6999      	ldr	r1, [r3, #24]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	021a      	lsls	r2, r3, #8
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	619a      	str	r2, [r3, #24]
      break;
 8001ac0:	e041      	b.n	8001b46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68b9      	ldr	r1, [r7, #8]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 f977 	bl	8001dbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	69da      	ldr	r2, [r3, #28]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0208 	orr.w	r2, r2, #8
 8001adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	69da      	ldr	r2, [r3, #28]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0204 	bic.w	r2, r2, #4
 8001aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	69d9      	ldr	r1, [r3, #28]
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	61da      	str	r2, [r3, #28]
      break;
 8001b00:	e021      	b.n	8001b46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68b9      	ldr	r1, [r7, #8]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f9c1 	bl	8001e90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	69da      	ldr	r2, [r3, #28]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	69da      	ldr	r2, [r3, #28]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	69d9      	ldr	r1, [r3, #28]
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	021a      	lsls	r2, r3, #8
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	61da      	str	r2, [r3, #28]
      break;
 8001b42:	e000      	b.n	8001b46 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001b44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a29      	ldr	r2, [pc, #164]	; (8001c10 <TIM_Base_SetConfig+0xb8>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d00b      	beq.n	8001b88 <TIM_Base_SetConfig+0x30>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b76:	d007      	beq.n	8001b88 <TIM_Base_SetConfig+0x30>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a26      	ldr	r2, [pc, #152]	; (8001c14 <TIM_Base_SetConfig+0xbc>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d003      	beq.n	8001b88 <TIM_Base_SetConfig+0x30>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a25      	ldr	r2, [pc, #148]	; (8001c18 <TIM_Base_SetConfig+0xc0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d108      	bne.n	8001b9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <TIM_Base_SetConfig+0xb8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d00b      	beq.n	8001bba <TIM_Base_SetConfig+0x62>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba8:	d007      	beq.n	8001bba <TIM_Base_SetConfig+0x62>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a19      	ldr	r2, [pc, #100]	; (8001c14 <TIM_Base_SetConfig+0xbc>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d003      	beq.n	8001bba <TIM_Base_SetConfig+0x62>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a18      	ldr	r2, [pc, #96]	; (8001c18 <TIM_Base_SetConfig+0xc0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d108      	bne.n	8001bcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <TIM_Base_SetConfig+0xb8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d103      	bne.n	8001c00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	615a      	str	r2, [r3, #20]
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	40012c00 	.word	0x40012c00
 8001c14:	40000400 	.word	0x40000400
 8001c18:	40000800 	.word	0x40000800

08001c1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	f023 0201 	bic.w	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f023 0303 	bic.w	r3, r3, #3
 8001c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f023 0302 	bic.w	r3, r3, #2
 8001c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <TIM_OC1_SetConfig+0xc8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d10c      	bne.n	8001c92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f023 0308 	bic.w	r3, r3, #8
 8001c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f023 0304 	bic.w	r3, r3, #4
 8001c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a13      	ldr	r2, [pc, #76]	; (8001ce4 <TIM_OC1_SetConfig+0xc8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d111      	bne.n	8001cbe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	621a      	str	r2, [r3, #32]
}
 8001cd8:	bf00      	nop
 8001cda:	371c      	adds	r7, #28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40012c00 	.word	0x40012c00

08001ce8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	f023 0210 	bic.w	r2, r3, #16
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f023 0320 	bic.w	r3, r3, #32
 8001d32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a1d      	ldr	r2, [pc, #116]	; (8001db8 <TIM_OC2_SetConfig+0xd0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d10d      	bne.n	8001d64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <TIM_OC2_SetConfig+0xd0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d113      	bne.n	8001d94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	621a      	str	r2, [r3, #32]
}
 8001dae:	bf00      	nop
 8001db0:	371c      	adds	r7, #28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	40012c00 	.word	0x40012c00

08001dbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f023 0303 	bic.w	r3, r3, #3
 8001df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <TIM_OC3_SetConfig+0xd0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10d      	bne.n	8001e36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	021b      	lsls	r3, r3, #8
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a14      	ldr	r2, [pc, #80]	; (8001e8c <TIM_OC3_SetConfig+0xd0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d113      	bne.n	8001e66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	621a      	str	r2, [r3, #32]
}
 8001e80:	bf00      	nop
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40012c00 	.word	0x40012c00

08001e90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001eda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	031b      	lsls	r3, r3, #12
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <TIM_OC4_SetConfig+0x98>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d109      	bne.n	8001f04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ef6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	019b      	lsls	r3, r3, #6
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	621a      	str	r2, [r3, #32]
}
 8001f1e:	bf00      	nop
 8001f20:	371c      	adds	r7, #28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	40012c00 	.word	0x40012c00

08001f2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	2201      	movs	r2, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6a1a      	ldr	r2, [r3, #32]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	401a      	ands	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a1a      	ldr	r2, [r3, #32]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	431a      	orrs	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	621a      	str	r2, [r3, #32]
}
 8001f6a:	bf00      	nop
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e046      	b.n	800201a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2202      	movs	r2, #2
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a16      	ldr	r2, [pc, #88]	; (8002024 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00e      	beq.n	8001fee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd8:	d009      	beq.n	8001fee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a12      	ldr	r2, [pc, #72]	; (8002028 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d004      	beq.n	8001fee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a10      	ldr	r2, [pc, #64]	; (800202c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d10c      	bne.n	8002008 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	40012c00 	.word	0x40012c00
 8002028:	40000400 	.word	0x40000400
 800202c:	40000800 	.word	0x40000800

08002030 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e03f      	b.n	80020c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe fbf4 	bl	8000844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2224      	movs	r2, #36	; 0x24
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002072:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f915 	bl	80022a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002088:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695a      	ldr	r2, [r3, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002098:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b08a      	sub	sp, #40	; 0x28
 80020ce:	af02      	add	r7, sp, #8
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	4613      	mov	r3, r2
 80020d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b20      	cmp	r3, #32
 80020e8:	f040 808c 	bne.w	8002204 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <HAL_UART_Receive+0x2e>
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e084      	b.n	8002206 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_UART_Receive+0x40>
 8002106:	2302      	movs	r3, #2
 8002108:	e07d      	b.n	8002206 <HAL_UART_Receive+0x13c>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2222      	movs	r2, #34	; 0x22
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002126:	f7fe fc85 	bl	8000a34 <HAL_GetTick>
 800212a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	88fa      	ldrh	r2, [r7, #6]
 8002130:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	88fa      	ldrh	r2, [r7, #6]
 8002136:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002140:	d108      	bne.n	8002154 <HAL_UART_Receive+0x8a>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d104      	bne.n	8002154 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	e003      	b.n	800215c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002164:	e043      	b.n	80021ee <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2200      	movs	r2, #0
 800216e:	2120      	movs	r1, #32
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f84c 	bl	800220e <UART_WaitOnFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e042      	b.n	8002206 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10c      	bne.n	80021a0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	b29b      	uxth	r3, r3
 800218e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002192:	b29a      	uxth	r2, r3
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	3302      	adds	r3, #2
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	e01f      	b.n	80021e0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021a8:	d007      	beq.n	80021ba <HAL_UART_Receive+0xf0>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10a      	bne.n	80021c8 <HAL_UART_Receive+0xfe>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	e008      	b.n	80021da <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3301      	adds	r3, #1
 80021de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1b6      	bne.n	8002166 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	e000      	b.n	8002206 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002204:	2302      	movs	r3, #2
  }
}
 8002206:	4618      	mov	r0, r3
 8002208:	3720      	adds	r7, #32
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	603b      	str	r3, [r7, #0]
 800221a:	4613      	mov	r3, r2
 800221c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800221e:	e02c      	b.n	800227a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002226:	d028      	beq.n	800227a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d007      	beq.n	800223e <UART_WaitOnFlagUntilTimeout+0x30>
 800222e:	f7fe fc01 	bl	8000a34 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	429a      	cmp	r2, r3
 800223c:	d21d      	bcs.n	800227a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800224c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695a      	ldr	r2, [r3, #20]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0201 	bic.w	r2, r2, #1
 800225c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2220      	movs	r2, #32
 8002262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e00f      	b.n	800229a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	4013      	ands	r3, r2
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	429a      	cmp	r2, r3
 8002288:	bf0c      	ite	eq
 800228a:	2301      	moveq	r3, #1
 800228c:	2300      	movne	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	429a      	cmp	r2, r3
 8002296:	d0c3      	beq.n	8002220 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022de:	f023 030c 	bic.w	r3, r3, #12
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	68b9      	ldr	r1, [r7, #8]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699a      	ldr	r2, [r3, #24]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a2c      	ldr	r2, [pc, #176]	; (80023b8 <UART_SetConfig+0x114>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d103      	bne.n	8002314 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800230c:	f7ff fa42 	bl	8001794 <HAL_RCC_GetPCLK2Freq>
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	e002      	b.n	800231a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002314:	f7ff fa2a 	bl	800176c <HAL_RCC_GetPCLK1Freq>
 8002318:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	009a      	lsls	r2, r3, #2
 8002324:	441a      	add	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002330:	4a22      	ldr	r2, [pc, #136]	; (80023bc <UART_SetConfig+0x118>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	0119      	lsls	r1, r3, #4
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	009a      	lsls	r2, r3, #2
 8002344:	441a      	add	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002350:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <UART_SetConfig+0x118>)
 8002352:	fba3 0302 	umull	r0, r3, r3, r2
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	2064      	movs	r0, #100	; 0x64
 800235a:	fb00 f303 	mul.w	r3, r0, r3
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	3332      	adds	r3, #50	; 0x32
 8002364:	4a15      	ldr	r2, [pc, #84]	; (80023bc <UART_SetConfig+0x118>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002370:	4419      	add	r1, r3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	009a      	lsls	r2, r3, #2
 800237c:	441a      	add	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	fbb2 f2f3 	udiv	r2, r2, r3
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <UART_SetConfig+0x118>)
 800238a:	fba3 0302 	umull	r0, r3, r3, r2
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	2064      	movs	r0, #100	; 0x64
 8002392:	fb00 f303 	mul.w	r3, r0, r3
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	3332      	adds	r3, #50	; 0x32
 800239c:	4a07      	ldr	r2, [pc, #28]	; (80023bc <UART_SetConfig+0x118>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	f003 020f 	and.w	r2, r3, #15
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	440a      	add	r2, r1
 80023ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80023b0:	bf00      	nop
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40013800 	.word	0x40013800
 80023bc:	51eb851f 	.word	0x51eb851f

080023c0 <__libc_init_array>:
 80023c0:	b570      	push	{r4, r5, r6, lr}
 80023c2:	2600      	movs	r6, #0
 80023c4:	4d0c      	ldr	r5, [pc, #48]	; (80023f8 <__libc_init_array+0x38>)
 80023c6:	4c0d      	ldr	r4, [pc, #52]	; (80023fc <__libc_init_array+0x3c>)
 80023c8:	1b64      	subs	r4, r4, r5
 80023ca:	10a4      	asrs	r4, r4, #2
 80023cc:	42a6      	cmp	r6, r4
 80023ce:	d109      	bne.n	80023e4 <__libc_init_array+0x24>
 80023d0:	f000 f822 	bl	8002418 <_init>
 80023d4:	2600      	movs	r6, #0
 80023d6:	4d0a      	ldr	r5, [pc, #40]	; (8002400 <__libc_init_array+0x40>)
 80023d8:	4c0a      	ldr	r4, [pc, #40]	; (8002404 <__libc_init_array+0x44>)
 80023da:	1b64      	subs	r4, r4, r5
 80023dc:	10a4      	asrs	r4, r4, #2
 80023de:	42a6      	cmp	r6, r4
 80023e0:	d105      	bne.n	80023ee <__libc_init_array+0x2e>
 80023e2:	bd70      	pop	{r4, r5, r6, pc}
 80023e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80023e8:	4798      	blx	r3
 80023ea:	3601      	adds	r6, #1
 80023ec:	e7ee      	b.n	80023cc <__libc_init_array+0xc>
 80023ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80023f2:	4798      	blx	r3
 80023f4:	3601      	adds	r6, #1
 80023f6:	e7f2      	b.n	80023de <__libc_init_array+0x1e>
 80023f8:	08002458 	.word	0x08002458
 80023fc:	08002458 	.word	0x08002458
 8002400:	08002458 	.word	0x08002458
 8002404:	0800245c 	.word	0x0800245c

08002408 <memset>:
 8002408:	4603      	mov	r3, r0
 800240a:	4402      	add	r2, r0
 800240c:	4293      	cmp	r3, r2
 800240e:	d100      	bne.n	8002412 <memset+0xa>
 8002410:	4770      	bx	lr
 8002412:	f803 1b01 	strb.w	r1, [r3], #1
 8002416:	e7f9      	b.n	800240c <memset+0x4>

08002418 <_init>:
 8002418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241a:	bf00      	nop
 800241c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800241e:	bc08      	pop	{r3}
 8002420:	469e      	mov	lr, r3
 8002422:	4770      	bx	lr

08002424 <_fini>:
 8002424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002426:	bf00      	nop
 8002428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800242a:	bc08      	pop	{r3}
 800242c:	469e      	mov	lr, r3
 800242e:	4770      	bx	lr
