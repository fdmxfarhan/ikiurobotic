
test-02 Motors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e50  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004f60  08004f60  00014f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f88  08004f88  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08004f88  08004f88  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f88  08004f88  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f88  08004f88  00014f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f8c  08004f8c  00014f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08004f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000028  08004fb8  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08004fb8  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afa4  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b3e  00000000  00000000  0002aff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  0002cb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  0002d7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c2c  00000000  00000000  0002e390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c285  00000000  00000000  00044fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008687c  00000000  00000000  00051241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7abd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035b4  00000000  00000000  000d7b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000028 	.word	0x20000028
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f48 	.word	0x08004f48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000002c 	.word	0x2000002c
 800014c:	08004f48 	.word	0x08004f48

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_frsub>:
 800093c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000940:	e002      	b.n	8000948 <__addsf3>
 8000942:	bf00      	nop

08000944 <__aeabi_fsub>:
 8000944:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000948 <__addsf3>:
 8000948:	0042      	lsls	r2, r0, #1
 800094a:	bf1f      	itttt	ne
 800094c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000950:	ea92 0f03 	teqne	r2, r3
 8000954:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000958:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800095c:	d06a      	beq.n	8000a34 <__addsf3+0xec>
 800095e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000962:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000966:	bfc1      	itttt	gt
 8000968:	18d2      	addgt	r2, r2, r3
 800096a:	4041      	eorgt	r1, r0
 800096c:	4048      	eorgt	r0, r1
 800096e:	4041      	eorgt	r1, r0
 8000970:	bfb8      	it	lt
 8000972:	425b      	neglt	r3, r3
 8000974:	2b19      	cmp	r3, #25
 8000976:	bf88      	it	hi
 8000978:	4770      	bxhi	lr
 800097a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800097e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000982:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000992:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4249      	negne	r1, r1
 800099a:	ea92 0f03 	teq	r2, r3
 800099e:	d03f      	beq.n	8000a20 <__addsf3+0xd8>
 80009a0:	f1a2 0201 	sub.w	r2, r2, #1
 80009a4:	fa41 fc03 	asr.w	ip, r1, r3
 80009a8:	eb10 000c 	adds.w	r0, r0, ip
 80009ac:	f1c3 0320 	rsb	r3, r3, #32
 80009b0:	fa01 f103 	lsl.w	r1, r1, r3
 80009b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009b8:	d502      	bpl.n	80009c0 <__addsf3+0x78>
 80009ba:	4249      	negs	r1, r1
 80009bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009c4:	d313      	bcc.n	80009ee <__addsf3+0xa6>
 80009c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ca:	d306      	bcc.n	80009da <__addsf3+0x92>
 80009cc:	0840      	lsrs	r0, r0, #1
 80009ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80009d2:	f102 0201 	add.w	r2, r2, #1
 80009d6:	2afe      	cmp	r2, #254	; 0xfe
 80009d8:	d251      	bcs.n	8000a7e <__addsf3+0x136>
 80009da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e2:	bf08      	it	eq
 80009e4:	f020 0001 	biceq.w	r0, r0, #1
 80009e8:	ea40 0003 	orr.w	r0, r0, r3
 80009ec:	4770      	bx	lr
 80009ee:	0049      	lsls	r1, r1, #1
 80009f0:	eb40 0000 	adc.w	r0, r0, r0
 80009f4:	3a01      	subs	r2, #1
 80009f6:	bf28      	it	cs
 80009f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009fc:	d2ed      	bcs.n	80009da <__addsf3+0x92>
 80009fe:	fab0 fc80 	clz	ip, r0
 8000a02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a06:	ebb2 020c 	subs.w	r2, r2, ip
 8000a0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a0e:	bfaa      	itet	ge
 8000a10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a14:	4252      	neglt	r2, r2
 8000a16:	4318      	orrge	r0, r3
 8000a18:	bfbc      	itt	lt
 8000a1a:	40d0      	lsrlt	r0, r2
 8000a1c:	4318      	orrlt	r0, r3
 8000a1e:	4770      	bx	lr
 8000a20:	f092 0f00 	teq	r2, #0
 8000a24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a28:	bf06      	itte	eq
 8000a2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a2e:	3201      	addeq	r2, #1
 8000a30:	3b01      	subne	r3, #1
 8000a32:	e7b5      	b.n	80009a0 <__addsf3+0x58>
 8000a34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a3c:	bf18      	it	ne
 8000a3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a42:	d021      	beq.n	8000a88 <__addsf3+0x140>
 8000a44:	ea92 0f03 	teq	r2, r3
 8000a48:	d004      	beq.n	8000a54 <__addsf3+0x10c>
 8000a4a:	f092 0f00 	teq	r2, #0
 8000a4e:	bf08      	it	eq
 8000a50:	4608      	moveq	r0, r1
 8000a52:	4770      	bx	lr
 8000a54:	ea90 0f01 	teq	r0, r1
 8000a58:	bf1c      	itt	ne
 8000a5a:	2000      	movne	r0, #0
 8000a5c:	4770      	bxne	lr
 8000a5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a62:	d104      	bne.n	8000a6e <__addsf3+0x126>
 8000a64:	0040      	lsls	r0, r0, #1
 8000a66:	bf28      	it	cs
 8000a68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a6c:	4770      	bx	lr
 8000a6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a72:	bf3c      	itt	cc
 8000a74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a78:	4770      	bxcc	lr
 8000a7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a86:	4770      	bx	lr
 8000a88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a8c:	bf16      	itet	ne
 8000a8e:	4608      	movne	r0, r1
 8000a90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a94:	4601      	movne	r1, r0
 8000a96:	0242      	lsls	r2, r0, #9
 8000a98:	bf06      	itte	eq
 8000a9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a9e:	ea90 0f01 	teqeq	r0, r1
 8000aa2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_ui2f>:
 8000aa8:	f04f 0300 	mov.w	r3, #0
 8000aac:	e004      	b.n	8000ab8 <__aeabi_i2f+0x8>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_i2f>:
 8000ab0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ab4:	bf48      	it	mi
 8000ab6:	4240      	negmi	r0, r0
 8000ab8:	ea5f 0c00 	movs.w	ip, r0
 8000abc:	bf08      	it	eq
 8000abe:	4770      	bxeq	lr
 8000ac0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ac4:	4601      	mov	r1, r0
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	e01c      	b.n	8000b06 <__aeabi_l2f+0x2a>

08000acc <__aeabi_ul2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	e00a      	b.n	8000af0 <__aeabi_l2f+0x14>
 8000ada:	bf00      	nop

08000adc <__aeabi_l2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ae8:	d502      	bpl.n	8000af0 <__aeabi_l2f+0x14>
 8000aea:	4240      	negs	r0, r0
 8000aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af0:	ea5f 0c01 	movs.w	ip, r1
 8000af4:	bf02      	ittt	eq
 8000af6:	4684      	moveq	ip, r0
 8000af8:	4601      	moveq	r1, r0
 8000afa:	2000      	moveq	r0, #0
 8000afc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b00:	bf08      	it	eq
 8000b02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b0a:	fabc f28c 	clz	r2, ip
 8000b0e:	3a08      	subs	r2, #8
 8000b10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b14:	db10      	blt.n	8000b38 <__aeabi_l2f+0x5c>
 8000b16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b20:	f1c2 0220 	rsb	r2, r2, #32
 8000b24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b28:	fa20 f202 	lsr.w	r2, r0, r2
 8000b2c:	eb43 0002 	adc.w	r0, r3, r2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f102 0220 	add.w	r2, r2, #32
 8000b3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b40:	f1c2 0220 	rsb	r2, r2, #32
 8000b44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b48:	fa21 f202 	lsr.w	r2, r1, r2
 8000b4c:	eb43 0002 	adc.w	r0, r3, r2
 8000b50:	bf08      	it	eq
 8000b52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b56:	4770      	bx	lr

08000b58 <motor>:
void delay_us (uint16_t us)
{
//	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
//	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
}
void motor(int L1, int L2, int R2, int R1){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
 8000b64:	603b      	str	r3, [r7, #0]
//	if(L1 > 15 && L1 <-15) L1 = 0;
//	if(L2 > 15 && L2 <-15) L2 = 0;
//	if(R2 > 15 && R2 <-15) R2 = 0;
//	if(R1 > 15 && R1 <-15) R1 = 0;

	L1 = L1*255;
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	021b      	lsls	r3, r3, #8
 8000b6c:	1a9b      	subs	r3, r3, r2
 8000b6e:	60fb      	str	r3, [r7, #12]
	L2 = L2*255;
 8000b70:	68ba      	ldr	r2, [r7, #8]
 8000b72:	4613      	mov	r3, r2
 8000b74:	021b      	lsls	r3, r3, #8
 8000b76:	1a9b      	subs	r3, r3, r2
 8000b78:	60bb      	str	r3, [r7, #8]
	R2 = R2*255;
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	1a9b      	subs	r3, r3, r2
 8000b82:	607b      	str	r3, [r7, #4]
	R1 = R1*255*1.35;
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	4613      	mov	r3, r2
 8000b88:	021b      	lsls	r3, r3, #8
 8000b8a:	1a9b      	subs	r3, r3, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fc31 	bl	80003f4 <__aeabi_i2d>
 8000b92:	a38d      	add	r3, pc, #564	; (adr r3, 8000dc8 <motor+0x270>)
 8000b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b98:	f7ff fc96 	bl	80004c8 <__aeabi_dmul>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	4610      	mov	r0, r2
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f7ff fea2 	bl	80008ec <__aeabi_d2iz>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	603b      	str	r3, [r7, #0]

	if(L1 > 65535) L1 = 65535;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bb2:	db02      	blt.n	8000bba <motor+0x62>
 8000bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bb8:	60fb      	str	r3, [r7, #12]
	if(L2 > 65535) L2 = 65535;
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc0:	db02      	blt.n	8000bc8 <motor+0x70>
 8000bc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bc6:	60bb      	str	r3, [r7, #8]
	if(R2 > 65535) R2 = 65535;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bce:	db02      	blt.n	8000bd6 <motor+0x7e>
 8000bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bd4:	607b      	str	r3, [r7, #4]
	if(R1 > 65535) R1 = 65535;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bdc:	db02      	blt.n	8000be4 <motor+0x8c>
 8000bde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be2:	603b      	str	r3, [r7, #0]

	if(L1 < -65535) L1 = -65535;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000bea:	dc01      	bgt.n	8000bf0 <motor+0x98>
 8000bec:	4b78      	ldr	r3, [pc, #480]	; (8000dd0 <motor+0x278>)
 8000bee:	60fb      	str	r3, [r7, #12]
	if(L2 < -65535) L2 = -65535;
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000bf6:	dc01      	bgt.n	8000bfc <motor+0xa4>
 8000bf8:	4b75      	ldr	r3, [pc, #468]	; (8000dd0 <motor+0x278>)
 8000bfa:	60bb      	str	r3, [r7, #8]
	if(R2 < -65535) R2 = -65535;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000c02:	dc01      	bgt.n	8000c08 <motor+0xb0>
 8000c04:	4b72      	ldr	r3, [pc, #456]	; (8000dd0 <motor+0x278>)
 8000c06:	607b      	str	r3, [r7, #4]
	if(R1 < -65535) R1 = -65535;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000c0e:	dc01      	bgt.n	8000c14 <motor+0xbc>
 8000c10:	4b6f      	ldr	r3, [pc, #444]	; (8000dd0 <motor+0x278>)
 8000c12:	603b      	str	r3, [r7, #0]

	// ------------------ L1
	if(L2 == 0){
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d110      	bne.n	8000c3c <motor+0xe4>
		HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c20:	486c      	ldr	r0, [pc, #432]	; (8000dd4 <motor+0x27c>)
 8000c22:	f001 ff5d 	bl	8002ae0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c2c:	4869      	ldr	r0, [pc, #420]	; (8000dd4 <motor+0x27c>)
 8000c2e:	f001 ff57 	bl	8002ae0 <HAL_GPIO_WritePin>
		TIM4->CCR2 = 65535;
 8000c32:	4b69      	ldr	r3, [pc, #420]	; (8000dd8 <motor+0x280>)
 8000c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c38:	639a      	str	r2, [r3, #56]	; 0x38
 8000c3a:	e022      	b.n	8000c82 <motor+0x12a>
	}
	else if(L2 > 0){
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	dd0f      	ble.n	8000c62 <motor+0x10a>
		HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, 1);
 8000c42:	2201      	movs	r2, #1
 8000c44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c48:	4862      	ldr	r0, [pc, #392]	; (8000dd4 <motor+0x27c>)
 8000c4a:	f001 ff49 	bl	8002ae0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c54:	485f      	ldr	r0, [pc, #380]	; (8000dd4 <motor+0x27c>)
 8000c56:	f001 ff43 	bl	8002ae0 <HAL_GPIO_WritePin>
		TIM4->CCR2 = L2;
 8000c5a:	4a5f      	ldr	r2, [pc, #380]	; (8000dd8 <motor+0x280>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	6393      	str	r3, [r2, #56]	; 0x38
 8000c60:	e00f      	b.n	8000c82 <motor+0x12a>
	}else{
		HAL_GPIO_WritePin(INA1_GPIO_Port, INA1_Pin, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c68:	485a      	ldr	r0, [pc, #360]	; (8000dd4 <motor+0x27c>)
 8000c6a:	f001 ff39 	bl	8002ae0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB1_GPIO_Port, INB1_Pin, 1);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c74:	4857      	ldr	r0, [pc, #348]	; (8000dd4 <motor+0x27c>)
 8000c76:	f001 ff33 	bl	8002ae0 <HAL_GPIO_WritePin>
		TIM4->CCR2 = -L2;
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	425a      	negs	r2, r3
 8000c7e:	4b56      	ldr	r3, [pc, #344]	; (8000dd8 <motor+0x280>)
 8000c80:	639a      	str	r2, [r3, #56]	; 0x38
	}
	// ------------------ L2
	if(L1 == 0){
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d110      	bne.n	8000caa <motor+0x152>
		HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c8e:	4851      	ldr	r0, [pc, #324]	; (8000dd4 <motor+0x27c>)
 8000c90:	f001 ff26 	bl	8002ae0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c9a:	484e      	ldr	r0, [pc, #312]	; (8000dd4 <motor+0x27c>)
 8000c9c:	f001 ff20 	bl	8002ae0 <HAL_GPIO_WritePin>
		TIM4->CCR1 = 65535;
 8000ca0:	4b4d      	ldr	r3, [pc, #308]	; (8000dd8 <motor+0x280>)
 8000ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ca8:	e022      	b.n	8000cf0 <motor+0x198>
	}
	else if(L1 > 0){
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	dd0f      	ble.n	8000cd0 <motor+0x178>
		HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, 1);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb6:	4847      	ldr	r0, [pc, #284]	; (8000dd4 <motor+0x27c>)
 8000cb8:	f001 ff12 	bl	8002ae0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc2:	4844      	ldr	r0, [pc, #272]	; (8000dd4 <motor+0x27c>)
 8000cc4:	f001 ff0c 	bl	8002ae0 <HAL_GPIO_WritePin>
		TIM4->CCR1 = L1;
 8000cc8:	4a43      	ldr	r2, [pc, #268]	; (8000dd8 <motor+0x280>)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	6353      	str	r3, [r2, #52]	; 0x34
 8000cce:	e00f      	b.n	8000cf0 <motor+0x198>
	}else{
		HAL_GPIO_WritePin(INA2_GPIO_Port, INA2_Pin, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd6:	483f      	ldr	r0, [pc, #252]	; (8000dd4 <motor+0x27c>)
 8000cd8:	f001 ff02 	bl	8002ae0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB2_GPIO_Port, INB2_Pin, 1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce2:	483c      	ldr	r0, [pc, #240]	; (8000dd4 <motor+0x27c>)
 8000ce4:	f001 fefc 	bl	8002ae0 <HAL_GPIO_WritePin>
		TIM4->CCR1 = -L1;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	425a      	negs	r2, r3
 8000cec:	4b3a      	ldr	r3, [pc, #232]	; (8000dd8 <motor+0x280>)
 8000cee:	635a      	str	r2, [r3, #52]	; 0x34
	}
	// ------------------ R2
	if(R2 == 0){
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d110      	bne.n	8000d18 <motor+0x1c0>
		HAL_GPIO_WritePin(INA3_GPIO_Port, INA3_Pin, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cfc:	4837      	ldr	r0, [pc, #220]	; (8000ddc <motor+0x284>)
 8000cfe:	f001 feef 	bl	8002ae0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB3_GPIO_Port, INB3_Pin, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d08:	4834      	ldr	r0, [pc, #208]	; (8000ddc <motor+0x284>)
 8000d0a:	f001 fee9 	bl	8002ae0 <HAL_GPIO_WritePin>
		TIM4->CCR3 = 65535;
 8000d0e:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <motor+0x280>)
 8000d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d14:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d16:	e022      	b.n	8000d5e <motor+0x206>
	}
	else if(R2 > 0){
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	dd0f      	ble.n	8000d3e <motor+0x1e6>
		HAL_GPIO_WritePin(INA3_GPIO_Port, INA3_Pin, 1);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d24:	482d      	ldr	r0, [pc, #180]	; (8000ddc <motor+0x284>)
 8000d26:	f001 fedb 	bl	8002ae0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB3_GPIO_Port, INB3_Pin, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d30:	482a      	ldr	r0, [pc, #168]	; (8000ddc <motor+0x284>)
 8000d32:	f001 fed5 	bl	8002ae0 <HAL_GPIO_WritePin>
		TIM4->CCR3 = R2;
 8000d36:	4a28      	ldr	r2, [pc, #160]	; (8000dd8 <motor+0x280>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000d3c:	e00f      	b.n	8000d5e <motor+0x206>
	}else{
		HAL_GPIO_WritePin(INA3_GPIO_Port, INA3_Pin, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d44:	4825      	ldr	r0, [pc, #148]	; (8000ddc <motor+0x284>)
 8000d46:	f001 fecb 	bl	8002ae0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB3_GPIO_Port, INB3_Pin, 1);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d50:	4822      	ldr	r0, [pc, #136]	; (8000ddc <motor+0x284>)
 8000d52:	f001 fec5 	bl	8002ae0 <HAL_GPIO_WritePin>
		TIM4->CCR3 = -R2;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	425a      	negs	r2, r3
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <motor+0x280>)
 8000d5c:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	// ------------------ R1
	if(R1 == 0){
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d10e      	bne.n	8000d82 <motor+0x22a>
		HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2110      	movs	r1, #16
 8000d68:	481a      	ldr	r0, [pc, #104]	; (8000dd4 <motor+0x27c>)
 8000d6a:	f001 feb9 	bl	8002ae0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2120      	movs	r1, #32
 8000d72:	4818      	ldr	r0, [pc, #96]	; (8000dd4 <motor+0x27c>)
 8000d74:	f001 feb4 	bl	8002ae0 <HAL_GPIO_WritePin>
		TIM4->CCR4 = 65535;
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <motor+0x280>)
 8000d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7e:	641a      	str	r2, [r3, #64]	; 0x40
	}else{
		HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, 0);
		HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, 1);
		TIM4->CCR4 = -R1;
	}
}
 8000d80:	e01e      	b.n	8000dc0 <motor+0x268>
	else if(R1 > 0){
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	dd0d      	ble.n	8000da4 <motor+0x24c>
		HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, 1);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <motor+0x27c>)
 8000d8e:	f001 fea7 	bl	8002ae0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2120      	movs	r1, #32
 8000d96:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <motor+0x27c>)
 8000d98:	f001 fea2 	bl	8002ae0 <HAL_GPIO_WritePin>
		TIM4->CCR4 = R1;
 8000d9c:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <motor+0x280>)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000da2:	e00d      	b.n	8000dc0 <motor+0x268>
		HAL_GPIO_WritePin(INA4_GPIO_Port, INA4_Pin, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2110      	movs	r1, #16
 8000da8:	480a      	ldr	r0, [pc, #40]	; (8000dd4 <motor+0x27c>)
 8000daa:	f001 fe99 	bl	8002ae0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INB4_GPIO_Port, INB4_Pin, 1);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2120      	movs	r1, #32
 8000db2:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <motor+0x27c>)
 8000db4:	f001 fe94 	bl	8002ae0 <HAL_GPIO_WritePin>
		TIM4->CCR4 = -R1;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	425a      	negs	r2, r3
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <motor+0x280>)
 8000dbe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	9999999a 	.word	0x9999999a
 8000dcc:	3ff59999 	.word	0x3ff59999
 8000dd0:	ffff0001 	.word	0xffff0001
 8000dd4:	40010c00 	.word	0x40010c00
 8000dd8:	40000800 	.word	0x40000800
 8000ddc:	40010800 	.word	0x40010800

08000de0 <initGY>:
	if(direction == 8)  motor(-v, -v,  v,  v);
	if(direction == 10) motor(-v,  0,  v,  0);
	if(direction == 12) motor(-v,  v,  v, -v);
	if(direction == 14) motor( 0,  v,  0, -v);
}
void initGY(){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8000de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000de8:	f001 f926 	bl	8002038 <HAL_Delay>
	HAL_UART_Transmit(&huart2, GY_A5, 1, PHY_FULLDUPLEX_10M);
 8000dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df0:	2201      	movs	r2, #1
 8000df2:	491a      	ldr	r1, [pc, #104]	; (8000e5c <initGY+0x7c>)
 8000df4:	481a      	ldr	r0, [pc, #104]	; (8000e60 <initGY+0x80>)
 8000df6:	f003 fa7a 	bl	80042ee <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, GY_54, 1, PHY_FULLDUPLEX_10M);
 8000dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dfe:	2201      	movs	r2, #1
 8000e00:	4918      	ldr	r1, [pc, #96]	; (8000e64 <initGY+0x84>)
 8000e02:	4817      	ldr	r0, [pc, #92]	; (8000e60 <initGY+0x80>)
 8000e04:	f003 fa73 	bl	80042ee <HAL_UART_Transmit>
	HAL_Delay(500);
 8000e08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e0c:	f001 f914 	bl	8002038 <HAL_Delay>
	HAL_UART_Transmit(&huart2, GY_A5, 1, PHY_FULLDUPLEX_10M);
 8000e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e14:	2201      	movs	r2, #1
 8000e16:	4911      	ldr	r1, [pc, #68]	; (8000e5c <initGY+0x7c>)
 8000e18:	4811      	ldr	r0, [pc, #68]	; (8000e60 <initGY+0x80>)
 8000e1a:	f003 fa68 	bl	80042ee <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, GY_51, 1, PHY_FULLDUPLEX_10M);
 8000e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e22:	2201      	movs	r2, #1
 8000e24:	4910      	ldr	r1, [pc, #64]	; (8000e68 <initGY+0x88>)
 8000e26:	480e      	ldr	r0, [pc, #56]	; (8000e60 <initGY+0x80>)
 8000e28:	f003 fa61 	bl	80042ee <HAL_UART_Transmit>
	HAL_Delay(500);
 8000e2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e30:	f001 f902 	bl	8002038 <HAL_Delay>
	HAL_UART_Transmit(&huart2, GY_A5, 1, PHY_FULLDUPLEX_10M);
 8000e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4908      	ldr	r1, [pc, #32]	; (8000e5c <initGY+0x7c>)
 8000e3c:	4808      	ldr	r0, [pc, #32]	; (8000e60 <initGY+0x80>)
 8000e3e:	f003 fa56 	bl	80042ee <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, GY_55, 1, PHY_FULLDUPLEX_10M);
 8000e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e46:	2201      	movs	r2, #1
 8000e48:	4908      	ldr	r1, [pc, #32]	; (8000e6c <initGY+0x8c>)
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <initGY+0x80>)
 8000e4c:	f003 fa4f 	bl	80042ee <HAL_UART_Transmit>
	HAL_Delay(500);
 8000e50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e54:	f001 f8f0 	bl	8002038 <HAL_Delay>
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000004 	.word	0x20000004
 8000e60:	20000160 	.word	0x20000160
 8000e64:	20000008 	.word	0x20000008
 8000e68:	2000000c 	.word	0x2000000c
 8000e6c:	20000010 	.word	0x20000010

08000e70 <delay>:
void delay(int t){
 8000e70:	b490      	push	{r4, r7}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	for(register int i=0; i<t; i++);
 8000e78:	2400      	movs	r4, #0
 8000e7a:	e000      	b.n	8000e7e <delay+0xe>
 8000e7c:	3401      	adds	r4, #1
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	429c      	cmp	r4, r3
 8000e82:	dbfb      	blt.n	8000e7c <delay+0xc>
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc90      	pop	{r4, r7}
 8000e8e:	4770      	bx	lr

08000e90 <HAL_UARTEx_RxEventCallback>:
//	srf_cnt = 0;
//	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0);
//	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 1) srf_cnt++;
//	Left_Dist = srf_cnt/52;
}
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1){
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a58      	ldr	r2, [pc, #352]	; (8001004 <HAL_UARTEx_RxEventCallback+0x174>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	f040 809e 	bne.w	8000fe4 <HAL_UARTEx_RxEventCallback+0x154>
		RED_ON;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eae:	4856      	ldr	r0, [pc, #344]	; (8001008 <HAL_UARTEx_RxEventCallback+0x178>)
 8000eb0:	f001 fe16 	bl	8002ae0 <HAL_GPIO_WritePin>
		if(Rx1_Buff[0] == 'M') {
 8000eb4:	4b55      	ldr	r3, [pc, #340]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b4d      	cmp	r3, #77	; 0x4d
 8000eba:	d13c      	bne.n	8000f36 <HAL_UARTEx_RxEventCallback+0xa6>
		  if(Rx1_Buff[1]=='-') 	r1 =-(int)Rx1_Buff[2];
 8000ebc:	4b53      	ldr	r3, [pc, #332]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000ebe:	785b      	ldrb	r3, [r3, #1]
 8000ec0:	2b2d      	cmp	r3, #45	; 0x2d
 8000ec2:	d105      	bne.n	8000ed0 <HAL_UARTEx_RxEventCallback+0x40>
 8000ec4:	4b51      	ldr	r3, [pc, #324]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000ec6:	789b      	ldrb	r3, [r3, #2]
 8000ec8:	425b      	negs	r3, r3
 8000eca:	4a51      	ldr	r2, [pc, #324]	; (8001010 <HAL_UARTEx_RxEventCallback+0x180>)
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	e004      	b.n	8000eda <HAL_UARTEx_RxEventCallback+0x4a>
		  else  				r1 = (int)Rx1_Buff[2];
 8000ed0:	4b4e      	ldr	r3, [pc, #312]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000ed2:	789b      	ldrb	r3, [r3, #2]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b4e      	ldr	r3, [pc, #312]	; (8001010 <HAL_UARTEx_RxEventCallback+0x180>)
 8000ed8:	601a      	str	r2, [r3, #0]
		  ////////////////
		  if(Rx1_Buff[3]=='-') 	r2 =-(int)Rx1_Buff[4];
 8000eda:	4b4c      	ldr	r3, [pc, #304]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000edc:	78db      	ldrb	r3, [r3, #3]
 8000ede:	2b2d      	cmp	r3, #45	; 0x2d
 8000ee0:	d105      	bne.n	8000eee <HAL_UARTEx_RxEventCallback+0x5e>
 8000ee2:	4b4a      	ldr	r3, [pc, #296]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000ee4:	791b      	ldrb	r3, [r3, #4]
 8000ee6:	425b      	negs	r3, r3
 8000ee8:	4a4a      	ldr	r2, [pc, #296]	; (8001014 <HAL_UARTEx_RxEventCallback+0x184>)
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	e004      	b.n	8000ef8 <HAL_UARTEx_RxEventCallback+0x68>
		  else  				r2 = (int)Rx1_Buff[4];
 8000eee:	4b47      	ldr	r3, [pc, #284]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000ef0:	791b      	ldrb	r3, [r3, #4]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b47      	ldr	r3, [pc, #284]	; (8001014 <HAL_UARTEx_RxEventCallback+0x184>)
 8000ef6:	601a      	str	r2, [r3, #0]
		  ////////////////
		  if(Rx1_Buff[5]=='-') 	l2 =-(int)Rx1_Buff[6];
 8000ef8:	4b44      	ldr	r3, [pc, #272]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000efa:	795b      	ldrb	r3, [r3, #5]
 8000efc:	2b2d      	cmp	r3, #45	; 0x2d
 8000efe:	d105      	bne.n	8000f0c <HAL_UARTEx_RxEventCallback+0x7c>
 8000f00:	4b42      	ldr	r3, [pc, #264]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000f02:	799b      	ldrb	r3, [r3, #6]
 8000f04:	425b      	negs	r3, r3
 8000f06:	4a44      	ldr	r2, [pc, #272]	; (8001018 <HAL_UARTEx_RxEventCallback+0x188>)
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e004      	b.n	8000f16 <HAL_UARTEx_RxEventCallback+0x86>
		  else  				l2 = (int)Rx1_Buff[6];
 8000f0c:	4b3f      	ldr	r3, [pc, #252]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000f0e:	799b      	ldrb	r3, [r3, #6]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b41      	ldr	r3, [pc, #260]	; (8001018 <HAL_UARTEx_RxEventCallback+0x188>)
 8000f14:	601a      	str	r2, [r3, #0]
		  ////////////////
		  if(Rx1_Buff[7]=='-') 	l1 =-(int)Rx1_Buff[8];
 8000f16:	4b3d      	ldr	r3, [pc, #244]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000f18:	79db      	ldrb	r3, [r3, #7]
 8000f1a:	2b2d      	cmp	r3, #45	; 0x2d
 8000f1c:	d105      	bne.n	8000f2a <HAL_UARTEx_RxEventCallback+0x9a>
 8000f1e:	4b3b      	ldr	r3, [pc, #236]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000f20:	7a1b      	ldrb	r3, [r3, #8]
 8000f22:	425b      	negs	r3, r3
 8000f24:	4a3d      	ldr	r2, [pc, #244]	; (800101c <HAL_UARTEx_RxEventCallback+0x18c>)
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	e048      	b.n	8000fbc <HAL_UARTEx_RxEventCallback+0x12c>
		  else  				l1 = (int)Rx1_Buff[8];
 8000f2a:	4b38      	ldr	r3, [pc, #224]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000f2c:	7a1b      	ldrb	r3, [r3, #8]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b3a      	ldr	r3, [pc, #232]	; (800101c <HAL_UARTEx_RxEventCallback+0x18c>)
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	e042      	b.n	8000fbc <HAL_UARTEx_RxEventCallback+0x12c>
		}
		else if(Rx1_Buff[0] == 'S') {
 8000f36:	4b35      	ldr	r3, [pc, #212]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b53      	cmp	r3, #83	; 0x53
 8000f3c:	d114      	bne.n	8000f68 <HAL_UARTEx_RxEventCallback+0xd8>
			HAL_UART_Transmit(&huart2, GY_Set_Command, 2, PHY_FULLDUPLEX_10M);
 8000f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f42:	2202      	movs	r2, #2
 8000f44:	4936      	ldr	r1, [pc, #216]	; (8001020 <HAL_UARTEx_RxEventCallback+0x190>)
 8000f46:	4837      	ldr	r0, [pc, #220]	; (8001024 <HAL_UARTEx_RxEventCallback+0x194>)
 8000f48:	f003 f9d1 	bl	80042ee <HAL_UART_Transmit>
			delay(100000);
 8000f4c:	4836      	ldr	r0, [pc, #216]	; (8001028 <HAL_UARTEx_RxEventCallback+0x198>)
 8000f4e:	f7ff ff8f 	bl	8000e70 <delay>
			HAL_UART_Transmit(&huart2, GY_Set_Command, 2, PHY_FULLDUPLEX_10M);
 8000f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f56:	2202      	movs	r2, #2
 8000f58:	4931      	ldr	r1, [pc, #196]	; (8001020 <HAL_UARTEx_RxEventCallback+0x190>)
 8000f5a:	4832      	ldr	r0, [pc, #200]	; (8001024 <HAL_UARTEx_RxEventCallback+0x194>)
 8000f5c:	f003 f9c7 	bl	80042ee <HAL_UART_Transmit>
			delay(100000);
 8000f60:	4831      	ldr	r0, [pc, #196]	; (8001028 <HAL_UARTEx_RxEventCallback+0x198>)
 8000f62:	f7ff ff85 	bl	8000e70 <delay>
 8000f66:	e029      	b.n	8000fbc <HAL_UARTEx_RxEventCallback+0x12c>
		}
		else if(Rx1_Buff[0] == 'C') {
 8000f68:	4b28      	ldr	r3, [pc, #160]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b43      	cmp	r3, #67	; 0x43
 8000f6e:	d11d      	bne.n	8000fac <HAL_UARTEx_RxEventCallback+0x11c>
			if(Rx1_Buff[1] == 'T'){
 8000f70:	4b26      	ldr	r3, [pc, #152]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000f72:	785b      	ldrb	r3, [r3, #1]
 8000f74:	2b54      	cmp	r3, #84	; 0x54
 8000f76:	d10a      	bne.n	8000f8e <HAL_UARTEx_RxEventCallback+0xfe>
				if(Correction_EN == 1) Correction_EN = 0;
 8000f78:	4b2c      	ldr	r3, [pc, #176]	; (800102c <HAL_UARTEx_RxEventCallback+0x19c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d103      	bne.n	8000f88 <HAL_UARTEx_RxEventCallback+0xf8>
 8000f80:	4b2a      	ldr	r3, [pc, #168]	; (800102c <HAL_UARTEx_RxEventCallback+0x19c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	e002      	b.n	8000f8e <HAL_UARTEx_RxEventCallback+0xfe>
				else				   Correction_EN = 1;
 8000f88:	4b28      	ldr	r3, [pc, #160]	; (800102c <HAL_UARTEx_RxEventCallback+0x19c>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]
			}if(Rx1_Buff[1] == '1'){
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000f90:	785b      	ldrb	r3, [r3, #1]
 8000f92:	2b31      	cmp	r3, #49	; 0x31
 8000f94:	d102      	bne.n	8000f9c <HAL_UARTEx_RxEventCallback+0x10c>
				Correction_EN = 1;
 8000f96:	4b25      	ldr	r3, [pc, #148]	; (800102c <HAL_UARTEx_RxEventCallback+0x19c>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]
			}if(Rx1_Buff[1] == '0'){
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000f9e:	785b      	ldrb	r3, [r3, #1]
 8000fa0:	2b30      	cmp	r3, #48	; 0x30
 8000fa2:	d10b      	bne.n	8000fbc <HAL_UARTEx_RxEventCallback+0x12c>
				Correction_EN = 0;
 8000fa4:	4b21      	ldr	r3, [pc, #132]	; (800102c <HAL_UARTEx_RxEventCallback+0x19c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	e007      	b.n	8000fbc <HAL_UARTEx_RxEventCallback+0x12c>
//									 (uint8_t) Back_Dist  >> 8,(uint8_t) Back_Dist  & 0xFF,
//									 (uint8_t) Left_Dist  >> 8,(uint8_t) Left_Dist  & 0xFF};
//				HAL_UART_Transmit(&huart1, tx_data, 8, PHY_FULLDUPLEX_10M);
//			}
//		}
		else if(Rx1_Buff[0] == 'P') {
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b50      	cmp	r3, #80	; 0x50
 8000fb2:	d103      	bne.n	8000fbc <HAL_UARTEx_RxEventCallback+0x12c>
			look_direction = Rx1_Buff[1];
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000fb6:	785a      	ldrb	r2, [r3, #1]
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8000fba:	701a      	strb	r2, [r3, #0]
		}
		RED_OFF;
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fc2:	4811      	ldr	r0, [pc, #68]	; (8001008 <HAL_UARTEx_RxEventCallback+0x178>)
 8000fc4:	f001 fd8c 	bl	8002ae0 <HAL_GPIO_WritePin>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx1_Buff, RX1_Size);
 8000fc8:	2209      	movs	r2, #9
 8000fca:	4910      	ldr	r1, [pc, #64]	; (800100c <HAL_UARTEx_RxEventCallback+0x17c>)
 8000fcc:	4819      	ldr	r0, [pc, #100]	; (8001034 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8000fce:	f003 fa20 	bl	8004412 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 0204 	bic.w	r2, r2, #4
 8000fe0:	601a      	str	r2, [r3, #0]
		GREEN_OFF;
		HAL_UART_Transmit(&huart2, GY_Request_Command, 2, PHY_FULLDUPLEX_10M);
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx2_Buff, RX2_Size);
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
	}
}
 8000fe2:	e12f      	b.n	8001244 <HAL_UARTEx_RxEventCallback+0x3b4>
	else if(huart->Instance == USART2){
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <HAL_UARTEx_RxEventCallback+0x1ac>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	f040 812a 	bne.w	8001244 <HAL_UARTEx_RxEventCallback+0x3b4>
		GREEN_ON;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff6:	4804      	ldr	r0, [pc, #16]	; (8001008 <HAL_UARTEx_RxEventCallback+0x178>)
 8000ff8:	f001 fd72 	bl	8002ae0 <HAL_GPIO_WritePin>
		for(int i=0; i<RX2_Size; i++){
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	e102      	b.n	8001208 <HAL_UARTEx_RxEventCallback+0x378>
 8001002:	bf00      	nop
 8001004:	40013800 	.word	0x40013800
 8001008:	40011000 	.word	0x40011000
 800100c:	2000022c 	.word	0x2000022c
 8001010:	2000024c 	.word	0x2000024c
 8001014:	20000248 	.word	0x20000248
 8001018:	20000244 	.word	0x20000244
 800101c:	20000240 	.word	0x20000240
 8001020:	20000018 	.word	0x20000018
 8001024:	20000160 	.word	0x20000160
 8001028:	000186a0 	.word	0x000186a0
 800102c:	20000268 	.word	0x20000268
 8001030:	20000000 	.word	0x20000000
 8001034:	2000011c 	.word	0x2000011c
 8001038:	200001a4 	.word	0x200001a4
 800103c:	40004400 	.word	0x40004400
			if(Rx2_Buff[i] == 0xAA){
 8001040:	4a82      	ldr	r2, [pc, #520]	; (800124c <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4413      	add	r3, r2
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2baa      	cmp	r3, #170	; 0xaa
 800104a:	f040 80da 	bne.w	8001202 <HAL_UARTEx_RxEventCallback+0x372>
				Heading = (int16_t)(Rx2_Buff[(i+1)%8]<<8 | Rx2_Buff[(i+2)%8])/100.00;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	3301      	adds	r3, #1
 8001052:	425a      	negs	r2, r3
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	f002 0207 	and.w	r2, r2, #7
 800105c:	bf58      	it	pl
 800105e:	4253      	negpl	r3, r2
 8001060:	4a7a      	ldr	r2, [pc, #488]	; (800124c <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001062:	5cd3      	ldrb	r3, [r2, r3]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3302      	adds	r3, #2
 800106c:	4259      	negs	r1, r3
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	f001 0107 	and.w	r1, r1, #7
 8001076:	bf58      	it	pl
 8001078:	424b      	negpl	r3, r1
 800107a:	4974      	ldr	r1, [pc, #464]	; (800124c <HAL_UARTEx_RxEventCallback+0x3bc>)
 800107c:	5ccb      	ldrb	r3, [r1, r3]
 800107e:	b21b      	sxth	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b21b      	sxth	r3, r3
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff f9b5 	bl	80003f4 <__aeabi_i2d>
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	4b70      	ldr	r3, [pc, #448]	; (8001250 <HAL_UARTEx_RxEventCallback+0x3c0>)
 8001090:	f7ff fb44 	bl	800071c <__aeabi_ddiv>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f7ff fc26 	bl	80008ec <__aeabi_d2iz>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b6b      	ldr	r3, [pc, #428]	; (8001254 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80010a6:	801a      	strh	r2, [r3, #0]
				Pitch = (int16_t)(Rx2_Buff[(i+3)%8]<<8 | Rx2_Buff[(i+4)%8])/100.00;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	3303      	adds	r3, #3
 80010ac:	425a      	negs	r2, r3
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	f002 0207 	and.w	r2, r2, #7
 80010b6:	bf58      	it	pl
 80010b8:	4253      	negpl	r3, r2
 80010ba:	4a64      	ldr	r2, [pc, #400]	; (800124c <HAL_UARTEx_RxEventCallback+0x3bc>)
 80010bc:	5cd3      	ldrb	r3, [r2, r3]
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3304      	adds	r3, #4
 80010c6:	4259      	negs	r1, r3
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	f001 0107 	and.w	r1, r1, #7
 80010d0:	bf58      	it	pl
 80010d2:	424b      	negpl	r3, r1
 80010d4:	495d      	ldr	r1, [pc, #372]	; (800124c <HAL_UARTEx_RxEventCallback+0x3bc>)
 80010d6:	5ccb      	ldrb	r3, [r1, r3]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	4313      	orrs	r3, r2
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f988 	bl	80003f4 <__aeabi_i2d>
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	4b59      	ldr	r3, [pc, #356]	; (8001250 <HAL_UARTEx_RxEventCallback+0x3c0>)
 80010ea:	f7ff fb17 	bl	800071c <__aeabi_ddiv>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff fbf9 	bl	80008ec <__aeabi_d2iz>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	4b56      	ldr	r3, [pc, #344]	; (8001258 <HAL_UARTEx_RxEventCallback+0x3c8>)
 8001100:	801a      	strh	r2, [r3, #0]
				Roll = (int16_t)(Rx2_Buff[(i+5)%8]<<8 | Rx2_Buff[(i+6)%8])/100.00;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	3305      	adds	r3, #5
 8001106:	425a      	negs	r2, r3
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	f002 0207 	and.w	r2, r2, #7
 8001110:	bf58      	it	pl
 8001112:	4253      	negpl	r3, r2
 8001114:	4a4d      	ldr	r2, [pc, #308]	; (800124c <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001116:	5cd3      	ldrb	r3, [r2, r3]
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b21a      	sxth	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	3306      	adds	r3, #6
 8001120:	4259      	negs	r1, r3
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	f001 0107 	and.w	r1, r1, #7
 800112a:	bf58      	it	pl
 800112c:	424b      	negpl	r3, r1
 800112e:	4947      	ldr	r1, [pc, #284]	; (800124c <HAL_UARTEx_RxEventCallback+0x3bc>)
 8001130:	5ccb      	ldrb	r3, [r1, r3]
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21b      	sxth	r3, r3
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f95b 	bl	80003f4 <__aeabi_i2d>
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	4b43      	ldr	r3, [pc, #268]	; (8001250 <HAL_UARTEx_RxEventCallback+0x3c0>)
 8001144:	f7ff faea 	bl	800071c <__aeabi_ddiv>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff fbcc 	bl	80008ec <__aeabi_d2iz>
 8001154:	4603      	mov	r3, r0
 8001156:	b21a      	sxth	r2, r3
 8001158:	4b40      	ldr	r3, [pc, #256]	; (800125c <HAL_UARTEx_RxEventCallback+0x3cc>)
 800115a:	801a      	strh	r2, [r3, #0]
				if(look_direction == 'W'){
 800115c:	4b40      	ldr	r3, [pc, #256]	; (8001260 <HAL_UARTEx_RxEventCallback+0x3d0>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b57      	cmp	r3, #87	; 0x57
 8001162:	d108      	bne.n	8001176 <HAL_UARTEx_RxEventCallback+0x2e6>
					Heading -= 90;
 8001164:	4b3b      	ldr	r3, [pc, #236]	; (8001254 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8001166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116a:	b29b      	uxth	r3, r3
 800116c:	3b5a      	subs	r3, #90	; 0x5a
 800116e:	b29b      	uxth	r3, r3
 8001170:	b21a      	sxth	r2, r3
 8001172:	4b38      	ldr	r3, [pc, #224]	; (8001254 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8001174:	801a      	strh	r2, [r3, #0]
				if(look_direction == 'E'){
 8001176:	4b3a      	ldr	r3, [pc, #232]	; (8001260 <HAL_UARTEx_RxEventCallback+0x3d0>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b45      	cmp	r3, #69	; 0x45
 800117c:	d108      	bne.n	8001190 <HAL_UARTEx_RxEventCallback+0x300>
					Heading += 90;
 800117e:	4b35      	ldr	r3, [pc, #212]	; (8001254 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8001180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001184:	b29b      	uxth	r3, r3
 8001186:	335a      	adds	r3, #90	; 0x5a
 8001188:	b29b      	uxth	r3, r3
 800118a:	b21a      	sxth	r2, r3
 800118c:	4b31      	ldr	r3, [pc, #196]	; (8001254 <HAL_UARTEx_RxEventCallback+0x3c4>)
 800118e:	801a      	strh	r2, [r3, #0]
				if(look_direction == 'S'){
 8001190:	4b33      	ldr	r3, [pc, #204]	; (8001260 <HAL_UARTEx_RxEventCallback+0x3d0>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b53      	cmp	r3, #83	; 0x53
 8001196:	d117      	bne.n	80011c8 <HAL_UARTEx_RxEventCallback+0x338>
					if(Heading > 0) Heading = Heading - 180;
 8001198:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <HAL_UARTEx_RxEventCallback+0x3c4>)
 800119a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	dd09      	ble.n	80011b6 <HAL_UARTEx_RxEventCallback+0x326>
 80011a2:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80011a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	3bb4      	subs	r3, #180	; 0xb4
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80011b2:	801a      	strh	r2, [r3, #0]
 80011b4:	e008      	b.n	80011c8 <HAL_UARTEx_RxEventCallback+0x338>
					else		    Heading = Heading + 180;
 80011b6:	4b27      	ldr	r3, [pc, #156]	; (8001254 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80011b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	33b4      	adds	r3, #180	; 0xb4
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80011c6:	801a      	strh	r2, [r3, #0]
				if(Heading > 180) Heading -= 180;
 80011c8:	4b22      	ldr	r3, [pc, #136]	; (8001254 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80011ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ce:	2bb4      	cmp	r3, #180	; 0xb4
 80011d0:	dd08      	ble.n	80011e4 <HAL_UARTEx_RxEventCallback+0x354>
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80011d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	3bb4      	subs	r3, #180	; 0xb4
 80011dc:	b29b      	uxth	r3, r3
 80011de:	b21a      	sxth	r2, r3
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80011e2:	801a      	strh	r2, [r3, #0]
				if(Heading <-180) Heading += 180;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80011e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ea:	f113 0fb4 	cmn.w	r3, #180	; 0xb4
 80011ee:	da08      	bge.n	8001202 <HAL_UARTEx_RxEventCallback+0x372>
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80011f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	33b4      	adds	r3, #180	; 0xb4
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8001200:	801a      	strh	r2, [r3, #0]
		for(int i=0; i<RX2_Size; i++){
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3301      	adds	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b07      	cmp	r3, #7
 800120c:	f77f af18 	ble.w	8001040 <HAL_UARTEx_RxEventCallback+0x1b0>
		GREEN_OFF;
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001216:	4813      	ldr	r0, [pc, #76]	; (8001264 <HAL_UARTEx_RxEventCallback+0x3d4>)
 8001218:	f001 fc62 	bl	8002ae0 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, GY_Request_Command, 2, PHY_FULLDUPLEX_10M);
 800121c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001220:	2202      	movs	r2, #2
 8001222:	4911      	ldr	r1, [pc, #68]	; (8001268 <HAL_UARTEx_RxEventCallback+0x3d8>)
 8001224:	4811      	ldr	r0, [pc, #68]	; (800126c <HAL_UARTEx_RxEventCallback+0x3dc>)
 8001226:	f003 f862 	bl	80042ee <HAL_UART_Transmit>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx2_Buff, RX2_Size);
 800122a:	2208      	movs	r2, #8
 800122c:	4907      	ldr	r1, [pc, #28]	; (800124c <HAL_UARTEx_RxEventCallback+0x3bc>)
 800122e:	480f      	ldr	r0, [pc, #60]	; (800126c <HAL_UARTEx_RxEventCallback+0x3dc>)
 8001230:	f003 f8ef 	bl	8004412 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <HAL_UARTEx_RxEventCallback+0x3e0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <HAL_UARTEx_RxEventCallback+0x3e0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0204 	bic.w	r2, r2, #4
 8001242:	601a      	str	r2, [r3, #0]
}
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000238 	.word	0x20000238
 8001250:	40590000 	.word	0x40590000
 8001254:	20000254 	.word	0x20000254
 8001258:	20000250 	.word	0x20000250
 800125c:	20000252 	.word	0x20000252
 8001260:	20000000 	.word	0x20000000
 8001264:	40011000 	.word	0x40011000
 8001268:	20000014 	.word	0x20000014
 800126c:	20000160 	.word	0x20000160
 8001270:	200001e8 	.word	0x200001e8

08001274 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_1){
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d105      	bne.n	8001290 <HAL_GPIO_EXTI_Callback+0x1c>
		Motor1_Pulse++;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_GPIO_EXTI_Callback+0x28>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <HAL_GPIO_EXTI_Callback+0x28>)
 800128e:	801a      	strh	r2, [r3, #0]
	}
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000270 	.word	0x20000270

080012a0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b0:	d104      	bne.n	80012bc <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    millis ++;
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	4a03      	ldr	r2, [pc, #12]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80012ba:	6013      	str	r3, [r2, #0]
  }
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000280 	.word	0x20000280
 80012cc:	00000000 	.word	0x00000000

080012d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d0:	b5b0      	push	{r4, r5, r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d6:	f000 fe4d 	bl	8001f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012da:	f000 f9a7 	bl	800162c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012de:	f000 fb77 	bl	80019d0 <MX_GPIO_Init>
  MX_TIM4_Init();
 80012e2:	f000 fa81 	bl	80017e8 <MX_TIM4_Init>
  MX_DMA_Init();
 80012e6:	f000 fb4d 	bl	8001984 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80012ea:	f000 faf7 	bl	80018dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80012ee:	f000 fb1f 	bl	8001930 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80012f2:	f000 f9dd 	bl	80016b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012f6:	f000 fa2b 	bl	8001750 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80012fa:	2100      	movs	r1, #0
 80012fc:	48ac      	ldr	r0, [pc, #688]	; (80015b0 <main+0x2e0>)
 80012fe:	f002 f945 	bl	800358c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001302:	2104      	movs	r1, #4
 8001304:	48aa      	ldr	r0, [pc, #680]	; (80015b0 <main+0x2e0>)
 8001306:	f002 f941 	bl	800358c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800130a:	2108      	movs	r1, #8
 800130c:	48a8      	ldr	r0, [pc, #672]	; (80015b0 <main+0x2e0>)
 800130e:	f002 f93d 	bl	800358c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001312:	210c      	movs	r1, #12
 8001314:	48a6      	ldr	r0, [pc, #664]	; (80015b0 <main+0x2e0>)
 8001316:	f002 f939 	bl	800358c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800131a:	48a6      	ldr	r0, [pc, #664]	; (80015b4 <main+0x2e4>)
 800131c:	f002 f894 	bl	8003448 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(MOTORS_EN_GPIO_Port, MOTORS_EN_Pin, 1);
 8001320:	2201      	movs	r2, #1
 8001322:	2108      	movs	r1, #8
 8001324:	48a4      	ldr	r0, [pc, #656]	; (80015b8 <main+0x2e8>)
 8001326:	f001 fbdb 	bl	8002ae0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // Red LED
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001330:	48a2      	ldr	r0, [pc, #648]	; (80015bc <main+0x2ec>)
 8001332:	f001 fbd5 	bl	8002ae0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0); // Red LED
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800133c:	489f      	ldr	r0, [pc, #636]	; (80015bc <main+0x2ec>)
 800133e:	f001 fbcf 	bl	8002ae0 <HAL_GPIO_WritePin>
  for(int i=0; i<5; i++){
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	e00f      	b.n	8001368 <main+0x98>
	  HAL_Delay(100);
 8001348:	2064      	movs	r0, #100	; 0x64
 800134a:	f000 fe75 	bl	8002038 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14); // Red LED
 800134e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001352:	489a      	ldr	r0, [pc, #616]	; (80015bc <main+0x2ec>)
 8001354:	f001 fbdc 	bl	8002b10 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Green LED
 8001358:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135c:	4897      	ldr	r0, [pc, #604]	; (80015bc <main+0x2ec>)
 800135e:	f001 fbd7 	bl	8002b10 <HAL_GPIO_TogglePin>
  for(int i=0; i<5; i++){
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3301      	adds	r3, #1
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b04      	cmp	r3, #4
 800136c:	ddec      	ble.n	8001348 <main+0x78>
  }
  RED_OFF;
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001374:	4891      	ldr	r0, [pc, #580]	; (80015bc <main+0x2ec>)
 8001376:	f001 fbb3 	bl	8002ae0 <HAL_GPIO_WritePin>
  GREEN_OFF;
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001380:	488e      	ldr	r0, [pc, #568]	; (80015bc <main+0x2ec>)
 8001382:	f001 fbad 	bl	8002ae0 <HAL_GPIO_WritePin>

  initGY();
 8001386:	f7ff fd2b 	bl	8000de0 <initGY>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx1_Buff, RX1_Size);
 800138a:	2209      	movs	r2, #9
 800138c:	498c      	ldr	r1, [pc, #560]	; (80015c0 <main+0x2f0>)
 800138e:	488d      	ldr	r0, [pc, #564]	; (80015c4 <main+0x2f4>)
 8001390:	f003 f83f 	bl	8004412 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001394:	4b8c      	ldr	r3, [pc, #560]	; (80015c8 <main+0x2f8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4b8b      	ldr	r3, [pc, #556]	; (80015c8 <main+0x2f8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0204 	bic.w	r2, r2, #4
 80013a2:	601a      	str	r2, [r3, #0]

  HAL_UART_Transmit(&huart2, GY_Request_Command, 2, PHY_FULLDUPLEX_10M);
 80013a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a8:	2202      	movs	r2, #2
 80013aa:	4988      	ldr	r1, [pc, #544]	; (80015cc <main+0x2fc>)
 80013ac:	4888      	ldr	r0, [pc, #544]	; (80015d0 <main+0x300>)
 80013ae:	f002 ff9e 	bl	80042ee <HAL_UART_Transmit>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx2_Buff, RX2_Size);
 80013b2:	2208      	movs	r2, #8
 80013b4:	4987      	ldr	r1, [pc, #540]	; (80015d4 <main+0x304>)
 80013b6:	4886      	ldr	r0, [pc, #536]	; (80015d0 <main+0x300>)
 80013b8:	f003 f82b 	bl	8004412 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80013bc:	4b86      	ldr	r3, [pc, #536]	; (80015d8 <main+0x308>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b85      	ldr	r3, [pc, #532]	; (80015d8 <main+0x308>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0204 	bic.w	r2, r2, #4
 80013ca:	601a      	str	r2, [r3, #0]


  Last_Time = HAL_GetTick();
 80013cc:	f000 fe2a 	bl	8002024 <HAL_GetTick>
 80013d0:	4603      	mov	r3, r0
 80013d2:	4a82      	ldr	r2, [pc, #520]	; (80015dc <main+0x30c>)
 80013d4:	6013      	str	r3, [r2, #0]
  while (1)
  {
//	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // Red LED
//	  else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); // Red LED

	  if(millis > 200){
 80013d6:	4b82      	ldr	r3, [pc, #520]	; (80015e0 <main+0x310>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2bc8      	cmp	r3, #200	; 0xc8
 80013dc:	d93c      	bls.n	8001458 <main+0x188>
		  Motor1_FB = Motor1_Dir * ((Motor1_Pulse / 36.0) / 200.0)*1000*60;
 80013de:	4b81      	ldr	r3, [pc, #516]	; (80015e4 <main+0x314>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f806 	bl	80003f4 <__aeabi_i2d>
 80013e8:	4604      	mov	r4, r0
 80013ea:	460d      	mov	r5, r1
 80013ec:	4b7e      	ldr	r3, [pc, #504]	; (80015e8 <main+0x318>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7fe ffff 	bl	80003f4 <__aeabi_i2d>
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	4b7c      	ldr	r3, [pc, #496]	; (80015ec <main+0x31c>)
 80013fc:	f7ff f98e 	bl	800071c <__aeabi_ddiv>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b78      	ldr	r3, [pc, #480]	; (80015f0 <main+0x320>)
 800140e:	f7ff f985 	bl	800071c <__aeabi_ddiv>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4620      	mov	r0, r4
 8001418:	4629      	mov	r1, r5
 800141a:	f7ff f855 	bl	80004c8 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	4b72      	ldr	r3, [pc, #456]	; (80015f4 <main+0x324>)
 800142c:	f7ff f84c 	bl	80004c8 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	4b6e      	ldr	r3, [pc, #440]	; (80015f8 <main+0x328>)
 800143e:	f7ff f843 	bl	80004c8 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	496d      	ldr	r1, [pc, #436]	; (80015fc <main+0x32c>)
 8001448:	e9c1 2300 	strd	r2, r3, [r1]
		  Motor1_Pulse = 0;
 800144c:	4b66      	ldr	r3, [pc, #408]	; (80015e8 <main+0x318>)
 800144e:	2200      	movs	r2, #0
 8001450:	801a      	strh	r2, [r3, #0]
		  millis = 0;
 8001452:	4b63      	ldr	r3, [pc, #396]	; (80015e0 <main+0x310>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
	  }
	  K_P = Heading;
 8001458:	4b69      	ldr	r3, [pc, #420]	; (8001600 <main+0x330>)
 800145a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fb26 	bl	8000ab0 <__aeabi_i2f>
 8001464:	4603      	mov	r3, r0
 8001466:	4a67      	ldr	r2, [pc, #412]	; (8001604 <main+0x334>)
 8001468:	6013      	str	r3, [r2, #0]
	  if(HAL_GetTick() - Last_Time > 1000){
 800146a:	f000 fddb 	bl	8002024 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	4b5a      	ldr	r3, [pc, #360]	; (80015dc <main+0x30c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800147a:	d936      	bls.n	80014ea <main+0x21a>
		  if(Heading == 0) {
 800147c:	4b60      	ldr	r3, [pc, #384]	; (8001600 <main+0x330>)
 800147e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d108      	bne.n	8001498 <main+0x1c8>
			  K_I = 0;
 8001486:	4b60      	ldr	r3, [pc, #384]	; (8001608 <main+0x338>)
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
			  K_D = 0;
 800148e:	4b5f      	ldr	r3, [pc, #380]	; (800160c <main+0x33c>)
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e01e      	b.n	80014d6 <main+0x206>
		  }else{
			  K_I = (K_I + Heading);
 8001498:	4b59      	ldr	r3, [pc, #356]	; (8001600 <main+0x330>)
 800149a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fb06 	bl	8000ab0 <__aeabi_i2f>
 80014a4:	4602      	mov	r2, r0
 80014a6:	4b58      	ldr	r3, [pc, #352]	; (8001608 <main+0x338>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4619      	mov	r1, r3
 80014ac:	4610      	mov	r0, r2
 80014ae:	f7ff fa4b 	bl	8000948 <__addsf3>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b54      	ldr	r3, [pc, #336]	; (8001608 <main+0x338>)
 80014b8:	601a      	str	r2, [r3, #0]
			  K_D = (Heading - Last_Heading);
 80014ba:	4b51      	ldr	r3, [pc, #324]	; (8001600 <main+0x330>)
 80014bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b53      	ldr	r3, [pc, #332]	; (8001610 <main+0x340>)
 80014c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff faf0 	bl	8000ab0 <__aeabi_i2f>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4a4e      	ldr	r2, [pc, #312]	; (800160c <main+0x33c>)
 80014d4:	6013      	str	r3, [r2, #0]
		  }
		  Last_Time = HAL_GetTick();
 80014d6:	f000 fda5 	bl	8002024 <HAL_GetTick>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a3f      	ldr	r2, [pc, #252]	; (80015dc <main+0x30c>)
 80014de:	6013      	str	r3, [r2, #0]
		  Last_Heading = Heading;
 80014e0:	4b47      	ldr	r3, [pc, #284]	; (8001600 <main+0x330>)
 80014e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014e6:	4b4a      	ldr	r3, [pc, #296]	; (8001610 <main+0x340>)
 80014e8:	801a      	strh	r2, [r3, #0]
	  }
	  // correction = 2.1 * K_P + 0.43 * K_I + 0.0 * K_D;
	  correction = 1 * K_P + 0.9 * K_I + 0.1 * K_D;
 80014ea:	4b46      	ldr	r3, [pc, #280]	; (8001604 <main+0x334>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe ff92 	bl	8000418 <__aeabi_f2d>
 80014f4:	4604      	mov	r4, r0
 80014f6:	460d      	mov	r5, r1
 80014f8:	4b43      	ldr	r3, [pc, #268]	; (8001608 <main+0x338>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe ff8b 	bl	8000418 <__aeabi_f2d>
 8001502:	a327      	add	r3, pc, #156	; (adr r3, 80015a0 <main+0x2d0>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7fe ffde 	bl	80004c8 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4620      	mov	r0, r4
 8001512:	4629      	mov	r1, r5
 8001514:	f7fe fe22 	bl	800015c <__adddf3>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4614      	mov	r4, r2
 800151e:	461d      	mov	r5, r3
 8001520:	4b3a      	ldr	r3, [pc, #232]	; (800160c <main+0x33c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ff77 	bl	8000418 <__aeabi_f2d>
 800152a:	a31f      	add	r3, pc, #124	; (adr r3, 80015a8 <main+0x2d8>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7fe ffca 	bl	80004c8 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7fe fe0e 	bl	800015c <__adddf3>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff f9d0 	bl	80008ec <__aeabi_d2iz>
 800154c:	4603      	mov	r3, r0
 800154e:	4a31      	ldr	r2, [pc, #196]	; (8001614 <main+0x344>)
 8001550:	6013      	str	r3, [r2, #0]


	  if(Correction_EN == 1)
 8001552:	4b31      	ldr	r3, [pc, #196]	; (8001618 <main+0x348>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d117      	bne.n	800158a <main+0x2ba>
		  motor(l1 + correction, l2 + correction, r2 + correction, r1 + correction);
 800155a:	4b30      	ldr	r3, [pc, #192]	; (800161c <main+0x34c>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <main+0x344>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	18d0      	adds	r0, r2, r3
 8001564:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <main+0x350>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <main+0x344>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	18d1      	adds	r1, r2, r3
 800156e:	4b2d      	ldr	r3, [pc, #180]	; (8001624 <main+0x354>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4b28      	ldr	r3, [pc, #160]	; (8001614 <main+0x344>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	18d4      	adds	r4, r2, r3
 8001578:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <main+0x358>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b25      	ldr	r3, [pc, #148]	; (8001614 <main+0x344>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4413      	add	r3, r2
 8001582:	4622      	mov	r2, r4
 8001584:	f7ff fae8 	bl	8000b58 <motor>
 8001588:	e725      	b.n	80013d6 <main+0x106>
	  else
		  motor(l1, l2, r2, r1);
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <main+0x34c>)
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	4b24      	ldr	r3, [pc, #144]	; (8001620 <main+0x350>)
 8001590:	6819      	ldr	r1, [r3, #0]
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <main+0x354>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4b24      	ldr	r3, [pc, #144]	; (8001628 <main+0x358>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f7ff fadd 	bl	8000b58 <motor>
	  if(millis > 200){
 800159e:	e71a      	b.n	80013d6 <main+0x106>
 80015a0:	cccccccd 	.word	0xcccccccd
 80015a4:	3feccccc 	.word	0x3feccccc
 80015a8:	9999999a 	.word	0x9999999a
 80015ac:	3fb99999 	.word	0x3fb99999
 80015b0:	200000d4 	.word	0x200000d4
 80015b4:	2000008c 	.word	0x2000008c
 80015b8:	40010c00 	.word	0x40010c00
 80015bc:	40011000 	.word	0x40011000
 80015c0:	2000022c 	.word	0x2000022c
 80015c4:	2000011c 	.word	0x2000011c
 80015c8:	200001a4 	.word	0x200001a4
 80015cc:	20000014 	.word	0x20000014
 80015d0:	20000160 	.word	0x20000160
 80015d4:	20000238 	.word	0x20000238
 80015d8:	200001e8 	.word	0x200001e8
 80015dc:	2000026c 	.word	0x2000026c
 80015e0:	20000280 	.word	0x20000280
 80015e4:	2000001a 	.word	0x2000001a
 80015e8:	20000270 	.word	0x20000270
 80015ec:	40420000 	.word	0x40420000
 80015f0:	40690000 	.word	0x40690000
 80015f4:	408f4000 	.word	0x408f4000
 80015f8:	404e0000 	.word	0x404e0000
 80015fc:	20000278 	.word	0x20000278
 8001600:	20000254 	.word	0x20000254
 8001604:	2000025c 	.word	0x2000025c
 8001608:	20000260 	.word	0x20000260
 800160c:	20000264 	.word	0x20000264
 8001610:	20000256 	.word	0x20000256
 8001614:	20000258 	.word	0x20000258
 8001618:	20000268 	.word	0x20000268
 800161c:	20000240 	.word	0x20000240
 8001620:	20000244 	.word	0x20000244
 8001624:	20000248 	.word	0x20000248
 8001628:	2000024c 	.word	0x2000024c

0800162c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b090      	sub	sp, #64	; 0x40
 8001630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f107 0318 	add.w	r3, r7, #24
 8001636:	2228      	movs	r2, #40	; 0x28
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f003 fc7c 	bl	8004f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800164e:	2302      	movs	r3, #2
 8001650:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001652:	2301      	movs	r3, #1
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001656:	2310      	movs	r3, #16
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800165a:	2302      	movs	r3, #2
 800165c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800165e:	2300      	movs	r3, #0
 8001660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001662:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001666:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001668:	f107 0318 	add.w	r3, r7, #24
 800166c:	4618      	mov	r0, r3
 800166e:	f001 fa81 	bl	8002b74 <HAL_RCC_OscConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001678:	f000 fa46 	bl	8001b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167c:	230f      	movs	r3, #15
 800167e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001680:	2302      	movs	r3, #2
 8001682:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800168c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	2102      	movs	r1, #2
 8001696:	4618      	mov	r0, r3
 8001698:	f001 fcee 	bl	8003078 <HAL_RCC_ClockConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80016a2:	f000 fa31 	bl	8001b08 <Error_Handler>
  }
}
 80016a6:	bf00      	nop
 80016a8:	3740      	adds	r7, #64	; 0x40
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c4:	463b      	mov	r3, r7
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016cc:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <MX_TIM1_Init+0x98>)
 80016ce:	4a1f      	ldr	r2, [pc, #124]	; (800174c <MX_TIM1_Init+0x9c>)
 80016d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 80016d2:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <MX_TIM1_Init+0x98>)
 80016d4:	223f      	movs	r2, #63	; 0x3f
 80016d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <MX_TIM1_Init+0x98>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <MX_TIM1_Init+0x98>)
 80016e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <MX_TIM1_Init+0x98>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <MX_TIM1_Init+0x98>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <MX_TIM1_Init+0x98>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016f8:	4813      	ldr	r0, [pc, #76]	; (8001748 <MX_TIM1_Init+0x98>)
 80016fa:	f001 fe55 	bl	80033a8 <HAL_TIM_Base_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001704:	f000 fa00 	bl	8001b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800170e:	f107 0308 	add.w	r3, r7, #8
 8001712:	4619      	mov	r1, r3
 8001714:	480c      	ldr	r0, [pc, #48]	; (8001748 <MX_TIM1_Init+0x98>)
 8001716:	f002 f9a1 	bl	8003a5c <HAL_TIM_ConfigClockSource>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001720:	f000 f9f2 	bl	8001b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800172c:	463b      	mov	r3, r7
 800172e:	4619      	mov	r1, r3
 8001730:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_TIM1_Init+0x98>)
 8001732:	f002 fd1f 	bl	8004174 <HAL_TIMEx_MasterConfigSynchronization>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800173c:	f000 f9e4 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000044 	.word	0x20000044
 800174c:	40012c00 	.word	0x40012c00

08001750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001764:	463b      	mov	r3, r7
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <MX_TIM2_Init+0x94>)
 800176e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001772:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <MX_TIM2_Init+0x94>)
 8001776:	223f      	movs	r2, #63	; 0x3f
 8001778:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <MX_TIM2_Init+0x94>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <MX_TIM2_Init+0x94>)
 8001782:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001786:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <MX_TIM2_Init+0x94>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <MX_TIM2_Init+0x94>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001794:	4813      	ldr	r0, [pc, #76]	; (80017e4 <MX_TIM2_Init+0x94>)
 8001796:	f001 fe07 	bl	80033a8 <HAL_TIM_Base_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017a0:	f000 f9b2 	bl	8001b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017aa:	f107 0308 	add.w	r3, r7, #8
 80017ae:	4619      	mov	r1, r3
 80017b0:	480c      	ldr	r0, [pc, #48]	; (80017e4 <MX_TIM2_Init+0x94>)
 80017b2:	f002 f953 	bl	8003a5c <HAL_TIM_ConfigClockSource>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017bc:	f000 f9a4 	bl	8001b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c0:	2300      	movs	r3, #0
 80017c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017c8:	463b      	mov	r3, r7
 80017ca:	4619      	mov	r1, r3
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <MX_TIM2_Init+0x94>)
 80017ce:	f002 fcd1 	bl	8004174 <HAL_TIMEx_MasterConfigSynchronization>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017d8:	f000 f996 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	2000008c 	.word	0x2000008c

080017e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ee:	f107 0320 	add.w	r3, r7, #32
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	611a      	str	r2, [r3, #16]
 8001806:	615a      	str	r2, [r3, #20]
 8001808:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800180a:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <MX_TIM4_Init+0xec>)
 800180c:	4a32      	ldr	r2, [pc, #200]	; (80018d8 <MX_TIM4_Init+0xf0>)
 800180e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001810:	4b30      	ldr	r3, [pc, #192]	; (80018d4 <MX_TIM4_Init+0xec>)
 8001812:	2200      	movs	r2, #0
 8001814:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001816:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <MX_TIM4_Init+0xec>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800181c:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <MX_TIM4_Init+0xec>)
 800181e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001822:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001824:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <MX_TIM4_Init+0xec>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182a:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <MX_TIM4_Init+0xec>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001830:	4828      	ldr	r0, [pc, #160]	; (80018d4 <MX_TIM4_Init+0xec>)
 8001832:	f001 fe5b 	bl	80034ec <HAL_TIM_PWM_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800183c:	f000 f964 	bl	8001b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001848:	f107 0320 	add.w	r3, r7, #32
 800184c:	4619      	mov	r1, r3
 800184e:	4821      	ldr	r0, [pc, #132]	; (80018d4 <MX_TIM4_Init+0xec>)
 8001850:	f002 fc90 	bl	8004174 <HAL_TIMEx_MasterConfigSynchronization>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800185a:	f000 f955 	bl	8001b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800185e:	2360      	movs	r3, #96	; 0x60
 8001860:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2200      	movs	r2, #0
 8001872:	4619      	mov	r1, r3
 8001874:	4817      	ldr	r0, [pc, #92]	; (80018d4 <MX_TIM4_Init+0xec>)
 8001876:	f002 f833 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001880:	f000 f942 	bl	8001b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	2204      	movs	r2, #4
 8001888:	4619      	mov	r1, r3
 800188a:	4812      	ldr	r0, [pc, #72]	; (80018d4 <MX_TIM4_Init+0xec>)
 800188c:	f002 f828 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001896:	f000 f937 	bl	8001b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	2208      	movs	r2, #8
 800189e:	4619      	mov	r1, r3
 80018a0:	480c      	ldr	r0, [pc, #48]	; (80018d4 <MX_TIM4_Init+0xec>)
 80018a2:	f002 f81d 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80018ac:	f000 f92c 	bl	8001b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	220c      	movs	r2, #12
 80018b4:	4619      	mov	r1, r3
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <MX_TIM4_Init+0xec>)
 80018b8:	f002 f812 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80018c2:	f000 f921 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80018c6:	4803      	ldr	r0, [pc, #12]	; (80018d4 <MX_TIM4_Init+0xec>)
 80018c8:	f000 f9ac 	bl	8001c24 <HAL_TIM_MspPostInit>

}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200000d4 	.word	0x200000d4
 80018d8:	40000800 	.word	0x40000800

080018dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <MX_USART1_UART_Init+0x4c>)
 80018e2:	4a12      	ldr	r2, [pc, #72]	; (800192c <MX_USART1_UART_Init+0x50>)
 80018e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <MX_USART1_UART_Init+0x4c>)
 80018e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <MX_USART1_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <MX_USART1_UART_Init+0x4c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <MX_USART1_UART_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <MX_USART1_UART_Init+0x4c>)
 8001902:	220c      	movs	r2, #12
 8001904:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <MX_USART1_UART_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <MX_USART1_UART_Init+0x4c>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_USART1_UART_Init+0x4c>)
 8001914:	f002 fc9e 	bl	8004254 <HAL_UART_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800191e:	f000 f8f3 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000011c 	.word	0x2000011c
 800192c:	40013800 	.word	0x40013800

08001930 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <MX_USART2_UART_Init+0x4c>)
 8001936:	4a12      	ldr	r2, [pc, #72]	; (8001980 <MX_USART2_UART_Init+0x50>)
 8001938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <MX_USART2_UART_Init+0x4c>)
 800193c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <MX_USART2_UART_Init+0x4c>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <MX_USART2_UART_Init+0x4c>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <MX_USART2_UART_Init+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <MX_USART2_UART_Init+0x4c>)
 8001956:	220c      	movs	r2, #12
 8001958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <MX_USART2_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <MX_USART2_UART_Init+0x4c>)
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001966:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_USART2_UART_Init+0x4c>)
 8001968:	f002 fc74 	bl	8004254 <HAL_UART_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001972:	f000 f8c9 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000160 	.word	0x20000160
 8001980:	40004400 	.word	0x40004400

08001984 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <MX_DMA_Init+0x48>)
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	4a0f      	ldr	r2, [pc, #60]	; (80019cc <MX_DMA_Init+0x48>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6153      	str	r3, [r2, #20]
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <MX_DMA_Init+0x48>)
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	200f      	movs	r0, #15
 80019a8:	f000 fc41 	bl	800222e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80019ac:	200f      	movs	r0, #15
 80019ae:	f000 fc5a 	bl	8002266 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	2010      	movs	r0, #16
 80019b8:	f000 fc39 	bl	800222e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80019bc:	2010      	movs	r0, #16
 80019be:	f000 fc52 	bl	8002266 <HAL_NVIC_EnableIRQ>

}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000

080019d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d6:	f107 0310 	add.w	r3, r7, #16
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e4:	4b43      	ldr	r3, [pc, #268]	; (8001af4 <MX_GPIO_Init+0x124>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a42      	ldr	r2, [pc, #264]	; (8001af4 <MX_GPIO_Init+0x124>)
 80019ea:	f043 0310 	orr.w	r3, r3, #16
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b40      	ldr	r3, [pc, #256]	; (8001af4 <MX_GPIO_Init+0x124>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0310 	and.w	r3, r3, #16
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fc:	4b3d      	ldr	r3, [pc, #244]	; (8001af4 <MX_GPIO_Init+0x124>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a3c      	ldr	r2, [pc, #240]	; (8001af4 <MX_GPIO_Init+0x124>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b3a      	ldr	r3, [pc, #232]	; (8001af4 <MX_GPIO_Init+0x124>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a14:	4b37      	ldr	r3, [pc, #220]	; (8001af4 <MX_GPIO_Init+0x124>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a36      	ldr	r2, [pc, #216]	; (8001af4 <MX_GPIO_Init+0x124>)
 8001a1a:	f043 0308 	orr.w	r3, r3, #8
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b34      	ldr	r3, [pc, #208]	; (8001af4 <MX_GPIO_Init+0x124>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001a32:	4831      	ldr	r0, [pc, #196]	; (8001af8 <MX_GPIO_Init+0x128>)
 8001a34:	f001 f854 	bl	8002ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|INA3_Pin
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f641 0170 	movw	r1, #6256	; 0x1870
 8001a3e:	482f      	ldr	r0, [pc, #188]	; (8001afc <MX_GPIO_Init+0x12c>)
 8001a40:	f001 f84e 	bl	8002ae0 <HAL_GPIO_WritePin>
                          |INB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INA2_Pin|INB2_Pin|INA1_Pin|INB1_Pin
 8001a44:	2200      	movs	r2, #0
 8001a46:	f24f 0138 	movw	r1, #61496	; 0xf038
 8001a4a:	482d      	ldr	r0, [pc, #180]	; (8001b00 <MX_GPIO_Init+0x130>)
 8001a4c:	f001 f848 	bl	8002ae0 <HAL_GPIO_WritePin>
                          |MOTORS_EN_Pin|INA4_Pin|INB4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001a50:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a62:	f107 0310 	add.w	r3, r7, #16
 8001a66:	4619      	mov	r1, r3
 8001a68:	4823      	ldr	r0, [pc, #140]	; (8001af8 <MX_GPIO_Init+0x128>)
 8001a6a:	f000 feb5 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	4619      	mov	r1, r3
 8001a80:	481e      	ldr	r0, [pc, #120]	; (8001afc <MX_GPIO_Init+0x12c>)
 8001a82:	f000 fea9 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 INA3_Pin
                           INB3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|INA3_Pin
 8001a86:	f641 0370 	movw	r3, #6256	; 0x1870
 8001a8a:	613b      	str	r3, [r7, #16]
                          |INB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2302      	movs	r3, #2
 8001a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4817      	ldr	r0, [pc, #92]	; (8001afc <MX_GPIO_Init+0x12c>)
 8001aa0:	f000 fe9a 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001aa8:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <MX_GPIO_Init+0x134>)
 8001aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4812      	ldr	r0, [pc, #72]	; (8001b00 <MX_GPIO_Init+0x130>)
 8001ab8:	f000 fe8e 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INA2_Pin INB2_Pin INA1_Pin INB1_Pin
                           MOTORS_EN_Pin INA4_Pin INB4_Pin */
  GPIO_InitStruct.Pin = INA2_Pin|INB2_Pin|INA1_Pin|INB1_Pin
 8001abc:	f24f 0338 	movw	r3, #61496	; 0xf038
 8001ac0:	613b      	str	r3, [r7, #16]
                          |MOTORS_EN_Pin|INA4_Pin|INB4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2302      	movs	r3, #2
 8001acc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ace:	f107 0310 	add.w	r3, r7, #16
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480a      	ldr	r0, [pc, #40]	; (8001b00 <MX_GPIO_Init+0x130>)
 8001ad6:	f000 fe7f 	bl	80027d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	2007      	movs	r0, #7
 8001ae0:	f000 fba5 	bl	800222e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001ae4:	2007      	movs	r0, #7
 8001ae6:	f000 fbbe 	bl	8002266 <HAL_NVIC_EnableIRQ>

}
 8001aea:	bf00      	nop
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40011000 	.word	0x40011000
 8001afc:	40010800 	.word	0x40010800
 8001b00:	40010c00 	.word	0x40010c00
 8001b04:	10310000 	.word	0x10310000

08001b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b0c:	b672      	cpsid	i
}
 8001b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <Error_Handler+0x8>
	...

08001b14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <HAL_MspInit+0x5c>)
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	4a14      	ldr	r2, [pc, #80]	; (8001b70 <HAL_MspInit+0x5c>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6193      	str	r3, [r2, #24]
 8001b26:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_MspInit+0x5c>)
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_MspInit+0x5c>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <HAL_MspInit+0x5c>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	61d3      	str	r3, [r2, #28]
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <HAL_MspInit+0x5c>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_MspInit+0x60>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <HAL_MspInit+0x60>)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40010000 	.word	0x40010000

08001b78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a16      	ldr	r2, [pc, #88]	; (8001be0 <HAL_TIM_Base_MspInit+0x68>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d10c      	bne.n	8001ba4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b8a:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <HAL_TIM_Base_MspInit+0x6c>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	4a15      	ldr	r2, [pc, #84]	; (8001be4 <HAL_TIM_Base_MspInit+0x6c>)
 8001b90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b94:	6193      	str	r3, [r2, #24]
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <HAL_TIM_Base_MspInit+0x6c>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ba2:	e018      	b.n	8001bd6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bac:	d113      	bne.n	8001bd6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bae:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <HAL_TIM_Base_MspInit+0x6c>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <HAL_TIM_Base_MspInit+0x6c>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	61d3      	str	r3, [r2, #28]
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_TIM_Base_MspInit+0x6c>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2100      	movs	r1, #0
 8001bca:	201c      	movs	r0, #28
 8001bcc:	f000 fb2f 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bd0:	201c      	movs	r0, #28
 8001bd2:	f000 fb48 	bl	8002266 <HAL_NVIC_EnableIRQ>
}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40012c00 	.word	0x40012c00
 8001be4:	40021000 	.word	0x40021000

08001be8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <HAL_TIM_PWM_MspInit+0x34>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d10b      	bne.n	8001c12 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_TIM_PWM_MspInit+0x38>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <HAL_TIM_PWM_MspInit+0x38>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	61d3      	str	r3, [r2, #28]
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_TIM_PWM_MspInit+0x38>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	40000800 	.word	0x40000800
 8001c20:	40021000 	.word	0x40021000

08001c24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 0310 	add.w	r3, r7, #16
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a10      	ldr	r2, [pc, #64]	; (8001c80 <HAL_TIM_MspPostInit+0x5c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d118      	bne.n	8001c76 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_TIM_MspPostInit+0x60>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a0e      	ldr	r2, [pc, #56]	; (8001c84 <HAL_TIM_MspPostInit+0x60>)
 8001c4a:	f043 0308 	orr.w	r3, r3, #8
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <HAL_TIM_MspPostInit+0x60>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001c5c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001c60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2302      	movs	r3, #2
 8001c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 0310 	add.w	r3, r7, #16
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <HAL_TIM_MspPostInit+0x64>)
 8001c72:	f000 fdb1 	bl	80027d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c76:	bf00      	nop
 8001c78:	3720      	adds	r7, #32
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40000800 	.word	0x40000800
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40010c00 	.word	0x40010c00

08001c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0318 	add.w	r3, r7, #24
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a65      	ldr	r2, [pc, #404]	; (8001e3c <HAL_UART_MspInit+0x1b0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d160      	bne.n	8001d6e <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cac:	4b64      	ldr	r3, [pc, #400]	; (8001e40 <HAL_UART_MspInit+0x1b4>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	4a63      	ldr	r2, [pc, #396]	; (8001e40 <HAL_UART_MspInit+0x1b4>)
 8001cb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb6:	6193      	str	r3, [r2, #24]
 8001cb8:	4b61      	ldr	r3, [pc, #388]	; (8001e40 <HAL_UART_MspInit+0x1b4>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc4:	4b5e      	ldr	r3, [pc, #376]	; (8001e40 <HAL_UART_MspInit+0x1b4>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	4a5d      	ldr	r2, [pc, #372]	; (8001e40 <HAL_UART_MspInit+0x1b4>)
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	6193      	str	r3, [r2, #24]
 8001cd0:	4b5b      	ldr	r3, [pc, #364]	; (8001e40 <HAL_UART_MspInit+0x1b4>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cea:	f107 0318 	add.w	r3, r7, #24
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4854      	ldr	r0, [pc, #336]	; (8001e44 <HAL_UART_MspInit+0x1b8>)
 8001cf2:	f000 fd71 	bl	80027d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d04:	f107 0318 	add.w	r3, r7, #24
 8001d08:	4619      	mov	r1, r3
 8001d0a:	484e      	ldr	r0, [pc, #312]	; (8001e44 <HAL_UART_MspInit+0x1b8>)
 8001d0c:	f000 fd64 	bl	80027d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001d10:	4b4d      	ldr	r3, [pc, #308]	; (8001e48 <HAL_UART_MspInit+0x1bc>)
 8001d12:	4a4e      	ldr	r2, [pc, #312]	; (8001e4c <HAL_UART_MspInit+0x1c0>)
 8001d14:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d16:	4b4c      	ldr	r3, [pc, #304]	; (8001e48 <HAL_UART_MspInit+0x1bc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d1c:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <HAL_UART_MspInit+0x1bc>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d22:	4b49      	ldr	r3, [pc, #292]	; (8001e48 <HAL_UART_MspInit+0x1bc>)
 8001d24:	2280      	movs	r2, #128	; 0x80
 8001d26:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d28:	4b47      	ldr	r3, [pc, #284]	; (8001e48 <HAL_UART_MspInit+0x1bc>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d2e:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <HAL_UART_MspInit+0x1bc>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d34:	4b44      	ldr	r3, [pc, #272]	; (8001e48 <HAL_UART_MspInit+0x1bc>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d3a:	4b43      	ldr	r3, [pc, #268]	; (8001e48 <HAL_UART_MspInit+0x1bc>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d40:	4841      	ldr	r0, [pc, #260]	; (8001e48 <HAL_UART_MspInit+0x1bc>)
 8001d42:	f000 faab 	bl	800229c <HAL_DMA_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001d4c:	f7ff fedc 	bl	8001b08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a3d      	ldr	r2, [pc, #244]	; (8001e48 <HAL_UART_MspInit+0x1bc>)
 8001d54:	639a      	str	r2, [r3, #56]	; 0x38
 8001d56:	4a3c      	ldr	r2, [pc, #240]	; (8001e48 <HAL_UART_MspInit+0x1bc>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2100      	movs	r1, #0
 8001d60:	2025      	movs	r0, #37	; 0x25
 8001d62:	f000 fa64 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d66:	2025      	movs	r0, #37	; 0x25
 8001d68:	f000 fa7d 	bl	8002266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d6c:	e062      	b.n	8001e34 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a37      	ldr	r2, [pc, #220]	; (8001e50 <HAL_UART_MspInit+0x1c4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d15d      	bne.n	8001e34 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d78:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <HAL_UART_MspInit+0x1b4>)
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	4a30      	ldr	r2, [pc, #192]	; (8001e40 <HAL_UART_MspInit+0x1b4>)
 8001d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d82:	61d3      	str	r3, [r2, #28]
 8001d84:	4b2e      	ldr	r3, [pc, #184]	; (8001e40 <HAL_UART_MspInit+0x1b4>)
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_UART_MspInit+0x1b4>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a2a      	ldr	r2, [pc, #168]	; (8001e40 <HAL_UART_MspInit+0x1b4>)
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <HAL_UART_MspInit+0x1b4>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001da8:	2304      	movs	r3, #4
 8001daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db0:	2303      	movs	r3, #3
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 0318 	add.w	r3, r7, #24
 8001db8:	4619      	mov	r1, r3
 8001dba:	4822      	ldr	r0, [pc, #136]	; (8001e44 <HAL_UART_MspInit+0x1b8>)
 8001dbc:	f000 fd0c 	bl	80027d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dcc:	f107 0318 	add.w	r3, r7, #24
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	481c      	ldr	r0, [pc, #112]	; (8001e44 <HAL_UART_MspInit+0x1b8>)
 8001dd4:	f000 fd00 	bl	80027d8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001dd8:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <HAL_UART_MspInit+0x1c8>)
 8001dda:	4a1f      	ldr	r2, [pc, #124]	; (8001e58 <HAL_UART_MspInit+0x1cc>)
 8001ddc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dde:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_UART_MspInit+0x1c8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_UART_MspInit+0x1c8>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dea:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <HAL_UART_MspInit+0x1c8>)
 8001dec:	2280      	movs	r2, #128	; 0x80
 8001dee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001df0:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <HAL_UART_MspInit+0x1c8>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001df6:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_UART_MspInit+0x1c8>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <HAL_UART_MspInit+0x1c8>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e02:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <HAL_UART_MspInit+0x1c8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e08:	4812      	ldr	r0, [pc, #72]	; (8001e54 <HAL_UART_MspInit+0x1c8>)
 8001e0a:	f000 fa47 	bl	800229c <HAL_DMA_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8001e14:	f7ff fe78 	bl	8001b08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <HAL_UART_MspInit+0x1c8>)
 8001e1c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e1e:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <HAL_UART_MspInit+0x1c8>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	2026      	movs	r0, #38	; 0x26
 8001e2a:	f000 fa00 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e2e:	2026      	movs	r0, #38	; 0x26
 8001e30:	f000 fa19 	bl	8002266 <HAL_NVIC_EnableIRQ>
}
 8001e34:	bf00      	nop
 8001e36:	3728      	adds	r7, #40	; 0x28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40013800 	.word	0x40013800
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40010800 	.word	0x40010800
 8001e48:	200001a4 	.word	0x200001a4
 8001e4c:	40020058 	.word	0x40020058
 8001e50:	40004400 	.word	0x40004400
 8001e54:	200001e8 	.word	0x200001e8
 8001e58:	4002006c 	.word	0x4002006c

08001e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <NMI_Handler+0x4>

08001e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <HardFault_Handler+0x4>

08001e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <MemManage_Handler+0x4>

08001e6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <BusFault_Handler+0x4>

08001e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <UsageFault_Handler+0x4>

08001e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr

08001e9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea2:	f000 f8ad 	bl	8002000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001eae:	2002      	movs	r0, #2
 8001eb0:	f000 fe48 	bl	8002b44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ebc:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <DMA1_Channel5_IRQHandler+0x10>)
 8001ebe:	f000 fb57 	bl	8002570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200001a4 	.word	0x200001a4

08001ecc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <DMA1_Channel6_IRQHandler+0x10>)
 8001ed2:	f000 fb4d 	bl	8002570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200001e8 	.word	0x200001e8

08001ee0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <TIM2_IRQHandler+0x10>)
 8001ee6:	f001 fbf3 	bl	80036d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000008c 	.word	0x2000008c

08001ef4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <USART1_IRQHandler+0x10>)
 8001efa:	f002 fad9 	bl	80044b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000011c 	.word	0x2000011c

08001f08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <USART2_IRQHandler+0x10>)
 8001f0e:	f002 facf 	bl	80044b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000160 	.word	0x20000160

08001f1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f28:	480c      	ldr	r0, [pc, #48]	; (8001f5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f2a:	490d      	ldr	r1, [pc, #52]	; (8001f60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f30:	e002      	b.n	8001f38 <LoopCopyDataInit>

08001f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f36:	3304      	adds	r3, #4

08001f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f3c:	d3f9      	bcc.n	8001f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f40:	4c0a      	ldr	r4, [pc, #40]	; (8001f6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f44:	e001      	b.n	8001f4a <LoopFillZerobss>

08001f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f48:	3204      	adds	r2, #4

08001f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f4c:	d3fb      	bcc.n	8001f46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f4e:	f7ff ffe5 	bl	8001f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f52:	f002 ffcd 	bl	8004ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f56:	f7ff f9bb 	bl	80012d0 <main>
  bx lr
 8001f5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f60:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001f64:	08004f90 	.word	0x08004f90
  ldr r2, =_sbss
 8001f68:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001f6c:	20000288 	.word	0x20000288

08001f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f70:	e7fe      	b.n	8001f70 <ADC1_2_IRQHandler>
	...

08001f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_Init+0x28>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <HAL_Init+0x28>)
 8001f7e:	f043 0310 	orr.w	r3, r3, #16
 8001f82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f84:	2003      	movs	r0, #3
 8001f86:	f000 f947 	bl	8002218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f8a:	200f      	movs	r0, #15
 8001f8c:	f000 f808 	bl	8001fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f90:	f7ff fdc0 	bl	8001b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40022000 	.word	0x40022000

08001fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_InitTick+0x54>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_InitTick+0x58>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f95f 	bl	8002282 <HAL_SYSTICK_Config>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00e      	b.n	8001fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b0f      	cmp	r3, #15
 8001fd2:	d80a      	bhi.n	8001fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fdc:	f000 f927 	bl	800222e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe0:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <HAL_InitTick+0x5c>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	2000001c 	.word	0x2000001c
 8001ff8:	20000024 	.word	0x20000024
 8001ffc:	20000020 	.word	0x20000020

08002000 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_IncTick+0x1c>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_IncTick+0x20>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4413      	add	r3, r2
 8002010:	4a03      	ldr	r2, [pc, #12]	; (8002020 <HAL_IncTick+0x20>)
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	20000024 	.word	0x20000024
 8002020:	20000284 	.word	0x20000284

08002024 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return uwTick;
 8002028:	4b02      	ldr	r3, [pc, #8]	; (8002034 <HAL_GetTick+0x10>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	20000284 	.word	0x20000284

08002038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002040:	f7ff fff0 	bl	8002024 <HAL_GetTick>
 8002044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002050:	d005      	beq.n	800205e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002052:	4b0a      	ldr	r3, [pc, #40]	; (800207c <HAL_Delay+0x44>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4413      	add	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800205e:	bf00      	nop
 8002060:	f7ff ffe0 	bl	8002024 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	429a      	cmp	r2, r3
 800206e:	d8f7      	bhi.n	8002060 <HAL_Delay+0x28>
  {
  }
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000024 	.word	0x20000024

08002080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800209c:	4013      	ands	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b2:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	60d3      	str	r3, [r2, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	f003 0307 	and.w	r3, r3, #7
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	db0b      	blt.n	800210e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	f003 021f 	and.w	r2, r3, #31
 80020fc:	4906      	ldr	r1, [pc, #24]	; (8002118 <__NVIC_EnableIRQ+0x34>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2001      	movs	r0, #1
 8002106:	fa00 f202 	lsl.w	r2, r0, r2
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100

0800211c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	2b00      	cmp	r3, #0
 800212e:	db0a      	blt.n	8002146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	490c      	ldr	r1, [pc, #48]	; (8002168 <__NVIC_SetPriority+0x4c>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	440b      	add	r3, r1
 8002140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002144:	e00a      	b.n	800215c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4908      	ldr	r1, [pc, #32]	; (800216c <__NVIC_SetPriority+0x50>)
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	3b04      	subs	r3, #4
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	440b      	add	r3, r1
 800215a:	761a      	strb	r2, [r3, #24]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000e100 	.word	0xe000e100
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	; 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f1c3 0307 	rsb	r3, r3, #7
 800218a:	2b04      	cmp	r3, #4
 800218c:	bf28      	it	cs
 800218e:	2304      	movcs	r3, #4
 8002190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3304      	adds	r3, #4
 8002196:	2b06      	cmp	r3, #6
 8002198:	d902      	bls.n	80021a0 <NVIC_EncodePriority+0x30>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3b03      	subs	r3, #3
 800219e:	e000      	b.n	80021a2 <NVIC_EncodePriority+0x32>
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	401a      	ands	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	43d9      	mvns	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	4313      	orrs	r3, r2
         );
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3724      	adds	r7, #36	; 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e4:	d301      	bcc.n	80021ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00f      	b.n	800220a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <SysTick_Config+0x40>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f2:	210f      	movs	r1, #15
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f7ff ff90 	bl	800211c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <SysTick_Config+0x40>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002202:	4b04      	ldr	r3, [pc, #16]	; (8002214 <SysTick_Config+0x40>)
 8002204:	2207      	movs	r2, #7
 8002206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	e000e010 	.word	0xe000e010

08002218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff2d 	bl	8002080 <__NVIC_SetPriorityGrouping>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002240:	f7ff ff42 	bl	80020c8 <__NVIC_GetPriorityGrouping>
 8002244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	f7ff ff90 	bl	8002170 <NVIC_EncodePriority>
 8002250:	4602      	mov	r2, r0
 8002252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff5f 	bl	800211c <__NVIC_SetPriority>
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff35 	bl	80020e4 <__NVIC_EnableIRQ>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ffa2 	bl	80021d4 <SysTick_Config>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e043      	b.n	800233a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	4b22      	ldr	r3, [pc, #136]	; (8002344 <HAL_DMA_Init+0xa8>)
 80022ba:	4413      	add	r3, r2
 80022bc:	4a22      	ldr	r2, [pc, #136]	; (8002348 <HAL_DMA_Init+0xac>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	091b      	lsrs	r3, r3, #4
 80022c4:	009a      	lsls	r2, r3, #2
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a1f      	ldr	r2, [pc, #124]	; (800234c <HAL_DMA_Init+0xb0>)
 80022ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80022e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002300:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800230c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	bffdfff8 	.word	0xbffdfff8
 8002348:	cccccccd 	.word	0xcccccccd
 800234c:	40020000 	.word	0x40020000

08002350 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_DMA_Start_IT+0x20>
 800236c:	2302      	movs	r3, #2
 800236e:	e04a      	b.n	8002406 <HAL_DMA_Start_IT+0xb6>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800237e:	2b01      	cmp	r3, #1
 8002380:	d13a      	bne.n	80023f8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2202      	movs	r2, #2
 8002386:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f9e8 	bl	800277c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 020e 	orr.w	r2, r2, #14
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	e00f      	b.n	80023e6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0204 	bic.w	r2, r2, #4
 80023d4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 020a 	orr.w	r2, r2, #10
 80023e4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0201 	orr.w	r2, r2, #1
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	e005      	b.n	8002404 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002400:	2302      	movs	r3, #2
 8002402:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002404:	7dfb      	ldrb	r3, [r7, #23]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800240e:	b480      	push	{r7}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002420:	2b02      	cmp	r3, #2
 8002422:	d008      	beq.n	8002436 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2204      	movs	r2, #4
 8002428:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e020      	b.n	8002478 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 020e 	bic.w	r2, r2, #14
 8002444:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0201 	bic.w	r2, r2, #1
 8002454:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	2101      	movs	r1, #1
 8002460:	fa01 f202 	lsl.w	r2, r1, r2
 8002464:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002476:	7bfb      	ldrb	r3, [r7, #15]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
	...

08002484 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002496:	2b02      	cmp	r3, #2
 8002498:	d005      	beq.n	80024a6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2204      	movs	r2, #4
 800249e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	e051      	b.n	800254a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 020e 	bic.w	r2, r2, #14
 80024b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0201 	bic.w	r2, r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a22      	ldr	r2, [pc, #136]	; (8002554 <HAL_DMA_Abort_IT+0xd0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d029      	beq.n	8002524 <HAL_DMA_Abort_IT+0xa0>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a20      	ldr	r2, [pc, #128]	; (8002558 <HAL_DMA_Abort_IT+0xd4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d022      	beq.n	8002520 <HAL_DMA_Abort_IT+0x9c>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a1f      	ldr	r2, [pc, #124]	; (800255c <HAL_DMA_Abort_IT+0xd8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d01a      	beq.n	800251a <HAL_DMA_Abort_IT+0x96>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a1d      	ldr	r2, [pc, #116]	; (8002560 <HAL_DMA_Abort_IT+0xdc>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d012      	beq.n	8002514 <HAL_DMA_Abort_IT+0x90>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1c      	ldr	r2, [pc, #112]	; (8002564 <HAL_DMA_Abort_IT+0xe0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00a      	beq.n	800250e <HAL_DMA_Abort_IT+0x8a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1a      	ldr	r2, [pc, #104]	; (8002568 <HAL_DMA_Abort_IT+0xe4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d102      	bne.n	8002508 <HAL_DMA_Abort_IT+0x84>
 8002502:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002506:	e00e      	b.n	8002526 <HAL_DMA_Abort_IT+0xa2>
 8002508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800250c:	e00b      	b.n	8002526 <HAL_DMA_Abort_IT+0xa2>
 800250e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002512:	e008      	b.n	8002526 <HAL_DMA_Abort_IT+0xa2>
 8002514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002518:	e005      	b.n	8002526 <HAL_DMA_Abort_IT+0xa2>
 800251a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800251e:	e002      	b.n	8002526 <HAL_DMA_Abort_IT+0xa2>
 8002520:	2310      	movs	r3, #16
 8002522:	e000      	b.n	8002526 <HAL_DMA_Abort_IT+0xa2>
 8002524:	2301      	movs	r3, #1
 8002526:	4a11      	ldr	r2, [pc, #68]	; (800256c <HAL_DMA_Abort_IT+0xe8>)
 8002528:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	4798      	blx	r3
    } 
  }
  return status;
 800254a:	7bfb      	ldrb	r3, [r7, #15]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40020008 	.word	0x40020008
 8002558:	4002001c 	.word	0x4002001c
 800255c:	40020030 	.word	0x40020030
 8002560:	40020044 	.word	0x40020044
 8002564:	40020058 	.word	0x40020058
 8002568:	4002006c 	.word	0x4002006c
 800256c:	40020000 	.word	0x40020000

08002570 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	2204      	movs	r2, #4
 800258e:	409a      	lsls	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d04f      	beq.n	8002638 <HAL_DMA_IRQHandler+0xc8>
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d04a      	beq.n	8002638 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0320 	and.w	r3, r3, #32
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d107      	bne.n	80025c0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0204 	bic.w	r2, r2, #4
 80025be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a66      	ldr	r2, [pc, #408]	; (8002760 <HAL_DMA_IRQHandler+0x1f0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d029      	beq.n	800261e <HAL_DMA_IRQHandler+0xae>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a65      	ldr	r2, [pc, #404]	; (8002764 <HAL_DMA_IRQHandler+0x1f4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d022      	beq.n	800261a <HAL_DMA_IRQHandler+0xaa>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a63      	ldr	r2, [pc, #396]	; (8002768 <HAL_DMA_IRQHandler+0x1f8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d01a      	beq.n	8002614 <HAL_DMA_IRQHandler+0xa4>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a62      	ldr	r2, [pc, #392]	; (800276c <HAL_DMA_IRQHandler+0x1fc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d012      	beq.n	800260e <HAL_DMA_IRQHandler+0x9e>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a60      	ldr	r2, [pc, #384]	; (8002770 <HAL_DMA_IRQHandler+0x200>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00a      	beq.n	8002608 <HAL_DMA_IRQHandler+0x98>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a5f      	ldr	r2, [pc, #380]	; (8002774 <HAL_DMA_IRQHandler+0x204>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d102      	bne.n	8002602 <HAL_DMA_IRQHandler+0x92>
 80025fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002600:	e00e      	b.n	8002620 <HAL_DMA_IRQHandler+0xb0>
 8002602:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002606:	e00b      	b.n	8002620 <HAL_DMA_IRQHandler+0xb0>
 8002608:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800260c:	e008      	b.n	8002620 <HAL_DMA_IRQHandler+0xb0>
 800260e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002612:	e005      	b.n	8002620 <HAL_DMA_IRQHandler+0xb0>
 8002614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002618:	e002      	b.n	8002620 <HAL_DMA_IRQHandler+0xb0>
 800261a:	2340      	movs	r3, #64	; 0x40
 800261c:	e000      	b.n	8002620 <HAL_DMA_IRQHandler+0xb0>
 800261e:	2304      	movs	r3, #4
 8002620:	4a55      	ldr	r2, [pc, #340]	; (8002778 <HAL_DMA_IRQHandler+0x208>)
 8002622:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 8094 	beq.w	8002756 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002636:	e08e      	b.n	8002756 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	2202      	movs	r2, #2
 800263e:	409a      	lsls	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d056      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x186>
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d051      	beq.n	80026f6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0320 	and.w	r3, r3, #32
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10b      	bne.n	8002678 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 020a 	bic.w	r2, r2, #10
 800266e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a38      	ldr	r2, [pc, #224]	; (8002760 <HAL_DMA_IRQHandler+0x1f0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d029      	beq.n	80026d6 <HAL_DMA_IRQHandler+0x166>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a37      	ldr	r2, [pc, #220]	; (8002764 <HAL_DMA_IRQHandler+0x1f4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d022      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x162>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a35      	ldr	r2, [pc, #212]	; (8002768 <HAL_DMA_IRQHandler+0x1f8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d01a      	beq.n	80026cc <HAL_DMA_IRQHandler+0x15c>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a34      	ldr	r2, [pc, #208]	; (800276c <HAL_DMA_IRQHandler+0x1fc>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d012      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x156>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a32      	ldr	r2, [pc, #200]	; (8002770 <HAL_DMA_IRQHandler+0x200>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00a      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x150>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a31      	ldr	r2, [pc, #196]	; (8002774 <HAL_DMA_IRQHandler+0x204>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d102      	bne.n	80026ba <HAL_DMA_IRQHandler+0x14a>
 80026b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026b8:	e00e      	b.n	80026d8 <HAL_DMA_IRQHandler+0x168>
 80026ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026be:	e00b      	b.n	80026d8 <HAL_DMA_IRQHandler+0x168>
 80026c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026c4:	e008      	b.n	80026d8 <HAL_DMA_IRQHandler+0x168>
 80026c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026ca:	e005      	b.n	80026d8 <HAL_DMA_IRQHandler+0x168>
 80026cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026d0:	e002      	b.n	80026d8 <HAL_DMA_IRQHandler+0x168>
 80026d2:	2320      	movs	r3, #32
 80026d4:	e000      	b.n	80026d8 <HAL_DMA_IRQHandler+0x168>
 80026d6:	2302      	movs	r3, #2
 80026d8:	4a27      	ldr	r2, [pc, #156]	; (8002778 <HAL_DMA_IRQHandler+0x208>)
 80026da:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d034      	beq.n	8002756 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026f4:	e02f      	b.n	8002756 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2208      	movs	r2, #8
 80026fc:	409a      	lsls	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d028      	beq.n	8002758 <HAL_DMA_IRQHandler+0x1e8>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b00      	cmp	r3, #0
 800270e:	d023      	beq.n	8002758 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 020e 	bic.w	r2, r2, #14
 800271e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002728:	2101      	movs	r1, #1
 800272a:	fa01 f202 	lsl.w	r2, r1, r2
 800272e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	2b00      	cmp	r3, #0
 800274c:	d004      	beq.n	8002758 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	4798      	blx	r3
    }
  }
  return;
 8002756:	bf00      	nop
 8002758:	bf00      	nop
}
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40020008 	.word	0x40020008
 8002764:	4002001c 	.word	0x4002001c
 8002768:	40020030 	.word	0x40020030
 800276c:	40020044 	.word	0x40020044
 8002770:	40020058 	.word	0x40020058
 8002774:	4002006c 	.word	0x4002006c
 8002778:	40020000 	.word	0x40020000

0800277c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002792:	2101      	movs	r1, #1
 8002794:	fa01 f202 	lsl.w	r2, r1, r2
 8002798:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b10      	cmp	r3, #16
 80027a8:	d108      	bne.n	80027bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027ba:	e007      	b.n	80027cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	60da      	str	r2, [r3, #12]
}
 80027cc:	bf00      	nop
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
	...

080027d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d8:	b480      	push	{r7}
 80027da:	b08b      	sub	sp, #44	; 0x2c
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027e6:	2300      	movs	r3, #0
 80027e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ea:	e169      	b.n	8002ac0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027ec:	2201      	movs	r2, #1
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	429a      	cmp	r2, r3
 8002806:	f040 8158 	bne.w	8002aba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	4a9a      	ldr	r2, [pc, #616]	; (8002a78 <HAL_GPIO_Init+0x2a0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d05e      	beq.n	80028d2 <HAL_GPIO_Init+0xfa>
 8002814:	4a98      	ldr	r2, [pc, #608]	; (8002a78 <HAL_GPIO_Init+0x2a0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d875      	bhi.n	8002906 <HAL_GPIO_Init+0x12e>
 800281a:	4a98      	ldr	r2, [pc, #608]	; (8002a7c <HAL_GPIO_Init+0x2a4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d058      	beq.n	80028d2 <HAL_GPIO_Init+0xfa>
 8002820:	4a96      	ldr	r2, [pc, #600]	; (8002a7c <HAL_GPIO_Init+0x2a4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d86f      	bhi.n	8002906 <HAL_GPIO_Init+0x12e>
 8002826:	4a96      	ldr	r2, [pc, #600]	; (8002a80 <HAL_GPIO_Init+0x2a8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d052      	beq.n	80028d2 <HAL_GPIO_Init+0xfa>
 800282c:	4a94      	ldr	r2, [pc, #592]	; (8002a80 <HAL_GPIO_Init+0x2a8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d869      	bhi.n	8002906 <HAL_GPIO_Init+0x12e>
 8002832:	4a94      	ldr	r2, [pc, #592]	; (8002a84 <HAL_GPIO_Init+0x2ac>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d04c      	beq.n	80028d2 <HAL_GPIO_Init+0xfa>
 8002838:	4a92      	ldr	r2, [pc, #584]	; (8002a84 <HAL_GPIO_Init+0x2ac>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d863      	bhi.n	8002906 <HAL_GPIO_Init+0x12e>
 800283e:	4a92      	ldr	r2, [pc, #584]	; (8002a88 <HAL_GPIO_Init+0x2b0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d046      	beq.n	80028d2 <HAL_GPIO_Init+0xfa>
 8002844:	4a90      	ldr	r2, [pc, #576]	; (8002a88 <HAL_GPIO_Init+0x2b0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d85d      	bhi.n	8002906 <HAL_GPIO_Init+0x12e>
 800284a:	2b12      	cmp	r3, #18
 800284c:	d82a      	bhi.n	80028a4 <HAL_GPIO_Init+0xcc>
 800284e:	2b12      	cmp	r3, #18
 8002850:	d859      	bhi.n	8002906 <HAL_GPIO_Init+0x12e>
 8002852:	a201      	add	r2, pc, #4	; (adr r2, 8002858 <HAL_GPIO_Init+0x80>)
 8002854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002858:	080028d3 	.word	0x080028d3
 800285c:	080028ad 	.word	0x080028ad
 8002860:	080028bf 	.word	0x080028bf
 8002864:	08002901 	.word	0x08002901
 8002868:	08002907 	.word	0x08002907
 800286c:	08002907 	.word	0x08002907
 8002870:	08002907 	.word	0x08002907
 8002874:	08002907 	.word	0x08002907
 8002878:	08002907 	.word	0x08002907
 800287c:	08002907 	.word	0x08002907
 8002880:	08002907 	.word	0x08002907
 8002884:	08002907 	.word	0x08002907
 8002888:	08002907 	.word	0x08002907
 800288c:	08002907 	.word	0x08002907
 8002890:	08002907 	.word	0x08002907
 8002894:	08002907 	.word	0x08002907
 8002898:	08002907 	.word	0x08002907
 800289c:	080028b5 	.word	0x080028b5
 80028a0:	080028c9 	.word	0x080028c9
 80028a4:	4a79      	ldr	r2, [pc, #484]	; (8002a8c <HAL_GPIO_Init+0x2b4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d013      	beq.n	80028d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028aa:	e02c      	b.n	8002906 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	623b      	str	r3, [r7, #32]
          break;
 80028b2:	e029      	b.n	8002908 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	3304      	adds	r3, #4
 80028ba:	623b      	str	r3, [r7, #32]
          break;
 80028bc:	e024      	b.n	8002908 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	3308      	adds	r3, #8
 80028c4:	623b      	str	r3, [r7, #32]
          break;
 80028c6:	e01f      	b.n	8002908 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	330c      	adds	r3, #12
 80028ce:	623b      	str	r3, [r7, #32]
          break;
 80028d0:	e01a      	b.n	8002908 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d102      	bne.n	80028e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028da:	2304      	movs	r3, #4
 80028dc:	623b      	str	r3, [r7, #32]
          break;
 80028de:	e013      	b.n	8002908 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d105      	bne.n	80028f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028e8:	2308      	movs	r3, #8
 80028ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	611a      	str	r2, [r3, #16]
          break;
 80028f2:	e009      	b.n	8002908 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028f4:	2308      	movs	r3, #8
 80028f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	615a      	str	r2, [r3, #20]
          break;
 80028fe:	e003      	b.n	8002908 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002900:	2300      	movs	r3, #0
 8002902:	623b      	str	r3, [r7, #32]
          break;
 8002904:	e000      	b.n	8002908 <HAL_GPIO_Init+0x130>
          break;
 8002906:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2bff      	cmp	r3, #255	; 0xff
 800290c:	d801      	bhi.n	8002912 <HAL_GPIO_Init+0x13a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	e001      	b.n	8002916 <HAL_GPIO_Init+0x13e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3304      	adds	r3, #4
 8002916:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2bff      	cmp	r3, #255	; 0xff
 800291c:	d802      	bhi.n	8002924 <HAL_GPIO_Init+0x14c>
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	e002      	b.n	800292a <HAL_GPIO_Init+0x152>
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	3b08      	subs	r3, #8
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	210f      	movs	r1, #15
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	fa01 f303 	lsl.w	r3, r1, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	401a      	ands	r2, r3
 800293c:	6a39      	ldr	r1, [r7, #32]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	fa01 f303 	lsl.w	r3, r1, r3
 8002944:	431a      	orrs	r2, r3
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 80b1 	beq.w	8002aba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002958:	4b4d      	ldr	r3, [pc, #308]	; (8002a90 <HAL_GPIO_Init+0x2b8>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	4a4c      	ldr	r2, [pc, #304]	; (8002a90 <HAL_GPIO_Init+0x2b8>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6193      	str	r3, [r2, #24]
 8002964:	4b4a      	ldr	r3, [pc, #296]	; (8002a90 <HAL_GPIO_Init+0x2b8>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002970:	4a48      	ldr	r2, [pc, #288]	; (8002a94 <HAL_GPIO_Init+0x2bc>)
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	3302      	adds	r3, #2
 8002978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	220f      	movs	r2, #15
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4013      	ands	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a40      	ldr	r2, [pc, #256]	; (8002a98 <HAL_GPIO_Init+0x2c0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d013      	beq.n	80029c4 <HAL_GPIO_Init+0x1ec>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a3f      	ldr	r2, [pc, #252]	; (8002a9c <HAL_GPIO_Init+0x2c4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00d      	beq.n	80029c0 <HAL_GPIO_Init+0x1e8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a3e      	ldr	r2, [pc, #248]	; (8002aa0 <HAL_GPIO_Init+0x2c8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d007      	beq.n	80029bc <HAL_GPIO_Init+0x1e4>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a3d      	ldr	r2, [pc, #244]	; (8002aa4 <HAL_GPIO_Init+0x2cc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d101      	bne.n	80029b8 <HAL_GPIO_Init+0x1e0>
 80029b4:	2303      	movs	r3, #3
 80029b6:	e006      	b.n	80029c6 <HAL_GPIO_Init+0x1ee>
 80029b8:	2304      	movs	r3, #4
 80029ba:	e004      	b.n	80029c6 <HAL_GPIO_Init+0x1ee>
 80029bc:	2302      	movs	r3, #2
 80029be:	e002      	b.n	80029c6 <HAL_GPIO_Init+0x1ee>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <HAL_GPIO_Init+0x1ee>
 80029c4:	2300      	movs	r3, #0
 80029c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c8:	f002 0203 	and.w	r2, r2, #3
 80029cc:	0092      	lsls	r2, r2, #2
 80029ce:	4093      	lsls	r3, r2
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029d6:	492f      	ldr	r1, [pc, #188]	; (8002a94 <HAL_GPIO_Init+0x2bc>)
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	3302      	adds	r3, #2
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d006      	beq.n	80029fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029f0:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <HAL_GPIO_Init+0x2d0>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	492c      	ldr	r1, [pc, #176]	; (8002aa8 <HAL_GPIO_Init+0x2d0>)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	600b      	str	r3, [r1, #0]
 80029fc:	e006      	b.n	8002a0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029fe:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	4928      	ldr	r1, [pc, #160]	; (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d006      	beq.n	8002a26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a18:	4b23      	ldr	r3, [pc, #140]	; (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	4922      	ldr	r1, [pc, #136]	; (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
 8002a24:	e006      	b.n	8002a34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a26:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	491e      	ldr	r1, [pc, #120]	; (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d006      	beq.n	8002a4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a40:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	4918      	ldr	r1, [pc, #96]	; (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	608b      	str	r3, [r1, #8]
 8002a4c:	e006      	b.n	8002a5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a4e:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	4914      	ldr	r1, [pc, #80]	; (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d021      	beq.n	8002aac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a68:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	490e      	ldr	r1, [pc, #56]	; (8002aa8 <HAL_GPIO_Init+0x2d0>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	60cb      	str	r3, [r1, #12]
 8002a74:	e021      	b.n	8002aba <HAL_GPIO_Init+0x2e2>
 8002a76:	bf00      	nop
 8002a78:	10320000 	.word	0x10320000
 8002a7c:	10310000 	.word	0x10310000
 8002a80:	10220000 	.word	0x10220000
 8002a84:	10210000 	.word	0x10210000
 8002a88:	10120000 	.word	0x10120000
 8002a8c:	10110000 	.word	0x10110000
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40010800 	.word	0x40010800
 8002a9c:	40010c00 	.word	0x40010c00
 8002aa0:	40011000 	.word	0x40011000
 8002aa4:	40011400 	.word	0x40011400
 8002aa8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <HAL_GPIO_Init+0x304>)
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	4909      	ldr	r1, [pc, #36]	; (8002adc <HAL_GPIO_Init+0x304>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	3301      	adds	r3, #1
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f47f ae8e 	bne.w	80027ec <HAL_GPIO_Init+0x14>
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop
 8002ad4:	372c      	adds	r7, #44	; 0x2c
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr
 8002adc:	40010400 	.word	0x40010400

08002ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	807b      	strh	r3, [r7, #2]
 8002aec:	4613      	mov	r3, r2
 8002aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002af0:	787b      	ldrb	r3, [r7, #1]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002af6:	887a      	ldrh	r2, [r7, #2]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002afc:	e003      	b.n	8002b06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002afe:	887b      	ldrh	r3, [r7, #2]
 8002b00:	041a      	lsls	r2, r3, #16
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	611a      	str	r2, [r3, #16]
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b22:	887a      	ldrh	r2, [r7, #2]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4013      	ands	r3, r2
 8002b28:	041a      	lsls	r2, r3, #16
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	43d9      	mvns	r1, r3
 8002b2e:	887b      	ldrh	r3, [r7, #2]
 8002b30:	400b      	ands	r3, r1
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	611a      	str	r2, [r3, #16]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
	...

08002b44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d006      	beq.n	8002b68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b5a:	4a05      	ldr	r2, [pc, #20]	; (8002b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe fb86 	bl	8001274 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b68:	bf00      	nop
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40010400 	.word	0x40010400

08002b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e272      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 8087 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b94:	4b92      	ldr	r3, [pc, #584]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 030c 	and.w	r3, r3, #12
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d00c      	beq.n	8002bba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ba0:	4b8f      	ldr	r3, [pc, #572]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 030c 	and.w	r3, r3, #12
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d112      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x5e>
 8002bac:	4b8c      	ldr	r3, [pc, #560]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bba:	4b89      	ldr	r3, [pc, #548]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d06c      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x12c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d168      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e24c      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x76>
 8002bdc:	4b80      	ldr	r3, [pc, #512]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a7f      	ldr	r2, [pc, #508]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	e02e      	b.n	8002c48 <HAL_RCC_OscConfig+0xd4>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x98>
 8002bf2:	4b7b      	ldr	r3, [pc, #492]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a7a      	ldr	r2, [pc, #488]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b78      	ldr	r3, [pc, #480]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a77      	ldr	r2, [pc, #476]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e01d      	b.n	8002c48 <HAL_RCC_OscConfig+0xd4>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0xbc>
 8002c16:	4b72      	ldr	r3, [pc, #456]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a71      	ldr	r2, [pc, #452]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b6f      	ldr	r3, [pc, #444]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a6e      	ldr	r2, [pc, #440]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0xd4>
 8002c30:	4b6b      	ldr	r3, [pc, #428]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a6a      	ldr	r2, [pc, #424]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b68      	ldr	r3, [pc, #416]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a67      	ldr	r2, [pc, #412]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d013      	beq.n	8002c78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7ff f9e8 	bl	8002024 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c58:	f7ff f9e4 	bl	8002024 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e200      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b5d      	ldr	r3, [pc, #372]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0xe4>
 8002c76:	e014      	b.n	8002ca2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7ff f9d4 	bl	8002024 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c80:	f7ff f9d0 	bl	8002024 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1ec      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c92:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x10c>
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d063      	beq.n	8002d76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cae:	4b4c      	ldr	r3, [pc, #304]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cba:	4b49      	ldr	r3, [pc, #292]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d11c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x18c>
 8002cc6:	4b46      	ldr	r3, [pc, #280]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d116      	bne.n	8002d00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd2:	4b43      	ldr	r3, [pc, #268]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <HAL_RCC_OscConfig+0x176>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d001      	beq.n	8002cea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e1c0      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cea:	4b3d      	ldr	r3, [pc, #244]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4939      	ldr	r1, [pc, #228]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	e03a      	b.n	8002d76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d020      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d08:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <HAL_RCC_OscConfig+0x270>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0e:	f7ff f989 	bl	8002024 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d16:	f7ff f985 	bl	8002024 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e1a1      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d28:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d34:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4927      	ldr	r1, [pc, #156]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]
 8002d48:	e015      	b.n	8002d76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4a:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d50:	f7ff f968 	bl	8002024 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d58:	f7ff f964 	bl	8002024 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e180      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d03a      	beq.n	8002df8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d019      	beq.n	8002dbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8a:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d90:	f7ff f948 	bl	8002024 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d98:	f7ff f944 	bl	8002024 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e160      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002db6:	2001      	movs	r0, #1
 8002db8:	f000 fad8 	bl	800336c <RCC_Delay>
 8002dbc:	e01c      	b.n	8002df8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_RCC_OscConfig+0x274>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc4:	f7ff f92e 	bl	8002024 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dca:	e00f      	b.n	8002dec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dcc:	f7ff f92a 	bl	8002024 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d908      	bls.n	8002dec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e146      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000
 8002de4:	42420000 	.word	0x42420000
 8002de8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dec:	4b92      	ldr	r3, [pc, #584]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e9      	bne.n	8002dcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80a6 	beq.w	8002f52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e06:	2300      	movs	r3, #0
 8002e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0a:	4b8b      	ldr	r3, [pc, #556]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10d      	bne.n	8002e32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e16:	4b88      	ldr	r3, [pc, #544]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	4a87      	ldr	r2, [pc, #540]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e20:	61d3      	str	r3, [r2, #28]
 8002e22:	4b85      	ldr	r3, [pc, #532]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e32:	4b82      	ldr	r3, [pc, #520]	; (800303c <HAL_RCC_OscConfig+0x4c8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d118      	bne.n	8002e70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e3e:	4b7f      	ldr	r3, [pc, #508]	; (800303c <HAL_RCC_OscConfig+0x4c8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a7e      	ldr	r2, [pc, #504]	; (800303c <HAL_RCC_OscConfig+0x4c8>)
 8002e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e4a:	f7ff f8eb 	bl	8002024 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e52:	f7ff f8e7 	bl	8002024 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b64      	cmp	r3, #100	; 0x64
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e103      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	4b75      	ldr	r3, [pc, #468]	; (800303c <HAL_RCC_OscConfig+0x4c8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d106      	bne.n	8002e86 <HAL_RCC_OscConfig+0x312>
 8002e78:	4b6f      	ldr	r3, [pc, #444]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4a6e      	ldr	r2, [pc, #440]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6213      	str	r3, [r2, #32]
 8002e84:	e02d      	b.n	8002ee2 <HAL_RCC_OscConfig+0x36e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x334>
 8002e8e:	4b6a      	ldr	r3, [pc, #424]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	4a69      	ldr	r2, [pc, #420]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	6213      	str	r3, [r2, #32]
 8002e9a:	4b67      	ldr	r3, [pc, #412]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4a66      	ldr	r2, [pc, #408]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	f023 0304 	bic.w	r3, r3, #4
 8002ea4:	6213      	str	r3, [r2, #32]
 8002ea6:	e01c      	b.n	8002ee2 <HAL_RCC_OscConfig+0x36e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b05      	cmp	r3, #5
 8002eae:	d10c      	bne.n	8002eca <HAL_RCC_OscConfig+0x356>
 8002eb0:	4b61      	ldr	r3, [pc, #388]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4a60      	ldr	r2, [pc, #384]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	f043 0304 	orr.w	r3, r3, #4
 8002eba:	6213      	str	r3, [r2, #32]
 8002ebc:	4b5e      	ldr	r3, [pc, #376]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4a5d      	ldr	r2, [pc, #372]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6213      	str	r3, [r2, #32]
 8002ec8:	e00b      	b.n	8002ee2 <HAL_RCC_OscConfig+0x36e>
 8002eca:	4b5b      	ldr	r3, [pc, #364]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	4a5a      	ldr	r2, [pc, #360]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	f023 0301 	bic.w	r3, r3, #1
 8002ed4:	6213      	str	r3, [r2, #32]
 8002ed6:	4b58      	ldr	r3, [pc, #352]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4a57      	ldr	r2, [pc, #348]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	f023 0304 	bic.w	r3, r3, #4
 8002ee0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d015      	beq.n	8002f16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eea:	f7ff f89b 	bl	8002024 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef0:	e00a      	b.n	8002f08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef2:	f7ff f897 	bl	8002024 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e0b1      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f08:	4b4b      	ldr	r3, [pc, #300]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0ee      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x37e>
 8002f14:	e014      	b.n	8002f40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f16:	f7ff f885 	bl	8002024 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1e:	f7ff f881 	bl	8002024 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e09b      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f34:	4b40      	ldr	r3, [pc, #256]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1ee      	bne.n	8002f1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f40:	7dfb      	ldrb	r3, [r7, #23]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d105      	bne.n	8002f52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f46:	4b3c      	ldr	r3, [pc, #240]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4a3b      	ldr	r2, [pc, #236]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8087 	beq.w	800306a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f5c:	4b36      	ldr	r3, [pc, #216]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 030c 	and.w	r3, r3, #12
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d061      	beq.n	800302c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d146      	bne.n	8002ffe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f70:	4b33      	ldr	r3, [pc, #204]	; (8003040 <HAL_RCC_OscConfig+0x4cc>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f76:	f7ff f855 	bl	8002024 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7e:	f7ff f851 	bl	8002024 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e06d      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f90:	4b29      	ldr	r3, [pc, #164]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f0      	bne.n	8002f7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa4:	d108      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fa6:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	4921      	ldr	r1, [pc, #132]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb8:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a19      	ldr	r1, [r3, #32]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	491b      	ldr	r1, [pc, #108]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <HAL_RCC_OscConfig+0x4cc>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd6:	f7ff f825 	bl	8002024 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fde:	f7ff f821 	bl	8002024 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e03d      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x46a>
 8002ffc:	e035      	b.n	800306a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffe:	4b10      	ldr	r3, [pc, #64]	; (8003040 <HAL_RCC_OscConfig+0x4cc>)
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7ff f80e 	bl	8002024 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300c:	f7ff f80a 	bl	8002024 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e026      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_RCC_OscConfig+0x4c4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x498>
 800302a:	e01e      	b.n	800306a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d107      	bne.n	8003044 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e019      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
 8003038:	40021000 	.word	0x40021000
 800303c:	40007000 	.word	0x40007000
 8003040:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCC_OscConfig+0x500>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	429a      	cmp	r2, r3
 8003056:	d106      	bne.n	8003066 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d001      	beq.n	800306a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000

08003078 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0d0      	b.n	800322e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800308c:	4b6a      	ldr	r3, [pc, #424]	; (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d910      	bls.n	80030bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4b67      	ldr	r3, [pc, #412]	; (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 0207 	bic.w	r2, r3, #7
 80030a2:	4965      	ldr	r1, [pc, #404]	; (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030aa:	4b63      	ldr	r3, [pc, #396]	; (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0b8      	b.n	800322e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d020      	beq.n	800310a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d4:	4b59      	ldr	r3, [pc, #356]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	4a58      	ldr	r2, [pc, #352]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030ec:	4b53      	ldr	r3, [pc, #332]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	4a52      	ldr	r2, [pc, #328]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f8:	4b50      	ldr	r3, [pc, #320]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	494d      	ldr	r1, [pc, #308]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	4313      	orrs	r3, r2
 8003108:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d040      	beq.n	8003198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d107      	bne.n	800312e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311e:	4b47      	ldr	r3, [pc, #284]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d115      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e07f      	b.n	800322e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d107      	bne.n	8003146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003136:	4b41      	ldr	r3, [pc, #260]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e073      	b.n	800322e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003146:	4b3d      	ldr	r3, [pc, #244]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e06b      	b.n	800322e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003156:	4b39      	ldr	r3, [pc, #228]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f023 0203 	bic.w	r2, r3, #3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4936      	ldr	r1, [pc, #216]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003168:	f7fe ff5c 	bl	8002024 <HAL_GetTick>
 800316c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	e00a      	b.n	8003186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003170:	f7fe ff58 	bl	8002024 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	; 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e053      	b.n	800322e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003186:	4b2d      	ldr	r3, [pc, #180]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 020c 	and.w	r2, r3, #12
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	429a      	cmp	r2, r3
 8003196:	d1eb      	bne.n	8003170 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003198:	4b27      	ldr	r3, [pc, #156]	; (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d210      	bcs.n	80031c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b24      	ldr	r3, [pc, #144]	; (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 0207 	bic.w	r2, r3, #7
 80031ae:	4922      	ldr	r1, [pc, #136]	; (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b20      	ldr	r3, [pc, #128]	; (8003238 <HAL_RCC_ClockConfig+0x1c0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e032      	b.n	800322e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d008      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d4:	4b19      	ldr	r3, [pc, #100]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	4916      	ldr	r1, [pc, #88]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d009      	beq.n	8003206 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031f2:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	490e      	ldr	r1, [pc, #56]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003206:	f000 f821 	bl	800324c <HAL_RCC_GetSysClockFreq>
 800320a:	4602      	mov	r2, r0
 800320c:	4b0b      	ldr	r3, [pc, #44]	; (800323c <HAL_RCC_ClockConfig+0x1c4>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	490a      	ldr	r1, [pc, #40]	; (8003240 <HAL_RCC_ClockConfig+0x1c8>)
 8003218:	5ccb      	ldrb	r3, [r1, r3]
 800321a:	fa22 f303 	lsr.w	r3, r2, r3
 800321e:	4a09      	ldr	r2, [pc, #36]	; (8003244 <HAL_RCC_ClockConfig+0x1cc>)
 8003220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <HAL_RCC_ClockConfig+0x1d0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe feba 	bl	8001fa0 <HAL_InitTick>

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40022000 	.word	0x40022000
 800323c:	40021000 	.word	0x40021000
 8003240:	08004f70 	.word	0x08004f70
 8003244:	2000001c 	.word	0x2000001c
 8003248:	20000020 	.word	0x20000020

0800324c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800324c:	b490      	push	{r4, r7}
 800324e:	b08a      	sub	sp, #40	; 0x28
 8003250:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003252:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003254:	1d3c      	adds	r4, r7, #4
 8003256:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003258:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800325c:	f240 2301 	movw	r3, #513	; 0x201
 8003260:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	2300      	movs	r3, #0
 8003268:	61bb      	str	r3, [r7, #24]
 800326a:	2300      	movs	r3, #0
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003276:	4b21      	ldr	r3, [pc, #132]	; (80032fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b04      	cmp	r3, #4
 8003284:	d002      	beq.n	800328c <HAL_RCC_GetSysClockFreq+0x40>
 8003286:	2b08      	cmp	r3, #8
 8003288:	d003      	beq.n	8003292 <HAL_RCC_GetSysClockFreq+0x46>
 800328a:	e02b      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800328c:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <HAL_RCC_GetSysClockFreq+0xb4>)
 800328e:	623b      	str	r3, [r7, #32]
      break;
 8003290:	e02b      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	0c9b      	lsrs	r3, r3, #18
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	3328      	adds	r3, #40	; 0x28
 800329c:	443b      	add	r3, r7
 800329e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032a2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d012      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032ae:	4b13      	ldr	r3, [pc, #76]	; (80032fc <HAL_RCC_GetSysClockFreq+0xb0>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	0c5b      	lsrs	r3, r3, #17
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	3328      	adds	r3, #40	; 0x28
 80032ba:	443b      	add	r3, r7
 80032bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	4a0e      	ldr	r2, [pc, #56]	; (8003300 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032c6:	fb03 f202 	mul.w	r2, r3, r2
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
 80032d2:	e004      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	4a0b      	ldr	r2, [pc, #44]	; (8003304 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032d8:	fb02 f303 	mul.w	r3, r2, r3
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	623b      	str	r3, [r7, #32]
      break;
 80032e2:	e002      	b.n	80032ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032e6:	623b      	str	r3, [r7, #32]
      break;
 80032e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ea:	6a3b      	ldr	r3, [r7, #32]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3728      	adds	r7, #40	; 0x28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc90      	pop	{r4, r7}
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	08004f60 	.word	0x08004f60
 80032fc:	40021000 	.word	0x40021000
 8003300:	007a1200 	.word	0x007a1200
 8003304:	003d0900 	.word	0x003d0900

08003308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800330c:	4b02      	ldr	r3, [pc, #8]	; (8003318 <HAL_RCC_GetHCLKFreq+0x10>)
 800330e:	681b      	ldr	r3, [r3, #0]
}
 8003310:	4618      	mov	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr
 8003318:	2000001c 	.word	0x2000001c

0800331c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003320:	f7ff fff2 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 8003324:	4602      	mov	r2, r0
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	0a1b      	lsrs	r3, r3, #8
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	4903      	ldr	r1, [pc, #12]	; (8003340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003332:	5ccb      	ldrb	r3, [r1, r3]
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003338:	4618      	mov	r0, r3
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40021000 	.word	0x40021000
 8003340:	08004f80 	.word	0x08004f80

08003344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003348:	f7ff ffde 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	0adb      	lsrs	r3, r3, #11
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4903      	ldr	r1, [pc, #12]	; (8003368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800335a:	5ccb      	ldrb	r3, [r1, r3]
 800335c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003360:	4618      	mov	r0, r3
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000
 8003368:	08004f80 	.word	0x08004f80

0800336c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003374:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <RCC_Delay+0x34>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <RCC_Delay+0x38>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	0a5b      	lsrs	r3, r3, #9
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	fb02 f303 	mul.w	r3, r2, r3
 8003386:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003388:	bf00      	nop
  }
  while (Delay --);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1e5a      	subs	r2, r3, #1
 800338e:	60fa      	str	r2, [r7, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f9      	bne.n	8003388 <RCC_Delay+0x1c>
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	2000001c 	.word	0x2000001c
 80033a4:	10624dd3 	.word	0x10624dd3

080033a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e041      	b.n	800343e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fe fbd2 	bl	8001b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3304      	adds	r3, #4
 80033e4:	4619      	mov	r1, r3
 80033e6:	4610      	mov	r0, r2
 80033e8:	f000 fc20 	bl	8003c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b01      	cmp	r3, #1
 800345a:	d001      	beq.n	8003460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e03a      	b.n	80034d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a18      	ldr	r2, [pc, #96]	; (80034e0 <HAL_TIM_Base_Start_IT+0x98>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d00e      	beq.n	80034a0 <HAL_TIM_Base_Start_IT+0x58>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348a:	d009      	beq.n	80034a0 <HAL_TIM_Base_Start_IT+0x58>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a14      	ldr	r2, [pc, #80]	; (80034e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d004      	beq.n	80034a0 <HAL_TIM_Base_Start_IT+0x58>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d111      	bne.n	80034c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d010      	beq.n	80034d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 0201 	orr.w	r2, r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c2:	e007      	b.n	80034d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr
 80034e0:	40012c00 	.word	0x40012c00
 80034e4:	40000400 	.word	0x40000400
 80034e8:	40000800 	.word	0x40000800

080034ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e041      	b.n	8003582 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fe fb68 	bl	8001be8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f000 fb7e 	bl	8003c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d109      	bne.n	80035b0 <HAL_TIM_PWM_Start+0x24>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e022      	b.n	80035f6 <HAL_TIM_PWM_Start+0x6a>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d109      	bne.n	80035ca <HAL_TIM_PWM_Start+0x3e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	bf14      	ite	ne
 80035c2:	2301      	movne	r3, #1
 80035c4:	2300      	moveq	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	e015      	b.n	80035f6 <HAL_TIM_PWM_Start+0x6a>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d109      	bne.n	80035e4 <HAL_TIM_PWM_Start+0x58>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	bf14      	ite	ne
 80035dc:	2301      	movne	r3, #1
 80035de:	2300      	moveq	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e008      	b.n	80035f6 <HAL_TIM_PWM_Start+0x6a>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	bf14      	ite	ne
 80035f0:	2301      	movne	r3, #1
 80035f2:	2300      	moveq	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e05e      	b.n	80036bc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d104      	bne.n	800360e <HAL_TIM_PWM_Start+0x82>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800360c:	e013      	b.n	8003636 <HAL_TIM_PWM_Start+0xaa>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b04      	cmp	r3, #4
 8003612:	d104      	bne.n	800361e <HAL_TIM_PWM_Start+0x92>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800361c:	e00b      	b.n	8003636 <HAL_TIM_PWM_Start+0xaa>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b08      	cmp	r3, #8
 8003622:	d104      	bne.n	800362e <HAL_TIM_PWM_Start+0xa2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800362c:	e003      	b.n	8003636 <HAL_TIM_PWM_Start+0xaa>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2201      	movs	r2, #1
 800363c:	6839      	ldr	r1, [r7, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fd74 	bl	800412c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a1e      	ldr	r2, [pc, #120]	; (80036c4 <HAL_TIM_PWM_Start+0x138>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d107      	bne.n	800365e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800365c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a18      	ldr	r2, [pc, #96]	; (80036c4 <HAL_TIM_PWM_Start+0x138>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00e      	beq.n	8003686 <HAL_TIM_PWM_Start+0xfa>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003670:	d009      	beq.n	8003686 <HAL_TIM_PWM_Start+0xfa>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a14      	ldr	r2, [pc, #80]	; (80036c8 <HAL_TIM_PWM_Start+0x13c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d004      	beq.n	8003686 <HAL_TIM_PWM_Start+0xfa>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a12      	ldr	r2, [pc, #72]	; (80036cc <HAL_TIM_PWM_Start+0x140>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d111      	bne.n	80036aa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b06      	cmp	r3, #6
 8003696:	d010      	beq.n	80036ba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a8:	e007      	b.n	80036ba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0201 	orr.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40012c00 	.word	0x40012c00
 80036c8:	40000400 	.word	0x40000400
 80036cc:	40000800 	.word	0x40000800

080036d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d122      	bne.n	800372c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d11b      	bne.n	800372c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0202 	mvn.w	r2, #2
 80036fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fa6f 	bl	8003bf6 <HAL_TIM_IC_CaptureCallback>
 8003718:	e005      	b.n	8003726 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fa62 	bl	8003be4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fa71 	bl	8003c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b04      	cmp	r3, #4
 8003738:	d122      	bne.n	8003780 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b04      	cmp	r3, #4
 8003746:	d11b      	bne.n	8003780 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0204 	mvn.w	r2, #4
 8003750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2202      	movs	r2, #2
 8003756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fa45 	bl	8003bf6 <HAL_TIM_IC_CaptureCallback>
 800376c:	e005      	b.n	800377a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fa38 	bl	8003be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fa47 	bl	8003c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b08      	cmp	r3, #8
 800378c:	d122      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b08      	cmp	r3, #8
 800379a:	d11b      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0208 	mvn.w	r2, #8
 80037a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2204      	movs	r2, #4
 80037aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fa1b 	bl	8003bf6 <HAL_TIM_IC_CaptureCallback>
 80037c0:	e005      	b.n	80037ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fa0e 	bl	8003be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fa1d 	bl	8003c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b10      	cmp	r3, #16
 80037e0:	d122      	bne.n	8003828 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d11b      	bne.n	8003828 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0210 	mvn.w	r2, #16
 80037f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2208      	movs	r2, #8
 80037fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f9f1 	bl	8003bf6 <HAL_TIM_IC_CaptureCallback>
 8003814:	e005      	b.n	8003822 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f9e4 	bl	8003be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f9f3 	bl	8003c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b01      	cmp	r3, #1
 8003834:	d10e      	bne.n	8003854 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b01      	cmp	r3, #1
 8003842:	d107      	bne.n	8003854 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0201 	mvn.w	r2, #1
 800384c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd fd26 	bl	80012a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385e:	2b80      	cmp	r3, #128	; 0x80
 8003860:	d10e      	bne.n	8003880 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386c:	2b80      	cmp	r3, #128	; 0x80
 800386e:	d107      	bne.n	8003880 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fce1 	bl	8004242 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	d10e      	bne.n	80038ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d107      	bne.n	80038ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f9b7 	bl	8003c1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d10e      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d107      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0220 	mvn.w	r2, #32
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fcac 	bl	8004230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038d8:	bf00      	nop
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e0ac      	b.n	8003a54 <HAL_TIM_PWM_ConfigChannel+0x174>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b0c      	cmp	r3, #12
 8003906:	f200 809f 	bhi.w	8003a48 <HAL_TIM_PWM_ConfigChannel+0x168>
 800390a:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	08003945 	.word	0x08003945
 8003914:	08003a49 	.word	0x08003a49
 8003918:	08003a49 	.word	0x08003a49
 800391c:	08003a49 	.word	0x08003a49
 8003920:	08003985 	.word	0x08003985
 8003924:	08003a49 	.word	0x08003a49
 8003928:	08003a49 	.word	0x08003a49
 800392c:	08003a49 	.word	0x08003a49
 8003930:	080039c7 	.word	0x080039c7
 8003934:	08003a49 	.word	0x08003a49
 8003938:	08003a49 	.word	0x08003a49
 800393c:	08003a49 	.word	0x08003a49
 8003940:	08003a07 	.word	0x08003a07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f9d0 	bl	8003cf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0208 	orr.w	r2, r2, #8
 800395e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0204 	bic.w	r2, r2, #4
 800396e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6999      	ldr	r1, [r3, #24]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	619a      	str	r2, [r3, #24]
      break;
 8003982:	e062      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fa16 	bl	8003dbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800399e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6999      	ldr	r1, [r3, #24]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	021a      	lsls	r2, r3, #8
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	619a      	str	r2, [r3, #24]
      break;
 80039c4:	e041      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68b9      	ldr	r1, [r7, #8]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fa5f 	bl	8003e90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69da      	ldr	r2, [r3, #28]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0208 	orr.w	r2, r2, #8
 80039e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69da      	ldr	r2, [r3, #28]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0204 	bic.w	r2, r2, #4
 80039f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69d9      	ldr	r1, [r3, #28]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	61da      	str	r2, [r3, #28]
      break;
 8003a04:	e021      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68b9      	ldr	r1, [r7, #8]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 faa9 	bl	8003f64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69d9      	ldr	r1, [r3, #28]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	021a      	lsls	r2, r3, #8
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	61da      	str	r2, [r3, #28]
      break;
 8003a46:	e000      	b.n	8003a4a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003a48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_TIM_ConfigClockSource+0x18>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e0b3      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x180>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aac:	d03e      	beq.n	8003b2c <HAL_TIM_ConfigClockSource+0xd0>
 8003aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab2:	f200 8087 	bhi.w	8003bc4 <HAL_TIM_ConfigClockSource+0x168>
 8003ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aba:	f000 8085 	beq.w	8003bc8 <HAL_TIM_ConfigClockSource+0x16c>
 8003abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac2:	d87f      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x168>
 8003ac4:	2b70      	cmp	r3, #112	; 0x70
 8003ac6:	d01a      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0xa2>
 8003ac8:	2b70      	cmp	r3, #112	; 0x70
 8003aca:	d87b      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x168>
 8003acc:	2b60      	cmp	r3, #96	; 0x60
 8003ace:	d050      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0x116>
 8003ad0:	2b60      	cmp	r3, #96	; 0x60
 8003ad2:	d877      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x168>
 8003ad4:	2b50      	cmp	r3, #80	; 0x50
 8003ad6:	d03c      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0xf6>
 8003ad8:	2b50      	cmp	r3, #80	; 0x50
 8003ada:	d873      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x168>
 8003adc:	2b40      	cmp	r3, #64	; 0x40
 8003ade:	d058      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0x136>
 8003ae0:	2b40      	cmp	r3, #64	; 0x40
 8003ae2:	d86f      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x168>
 8003ae4:	2b30      	cmp	r3, #48	; 0x30
 8003ae6:	d064      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x156>
 8003ae8:	2b30      	cmp	r3, #48	; 0x30
 8003aea:	d86b      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x168>
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d060      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x156>
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d867      	bhi.n	8003bc4 <HAL_TIM_ConfigClockSource+0x168>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d05c      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x156>
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d05a      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003afc:	e062      	b.n	8003bc4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6899      	ldr	r1, [r3, #8]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f000 faee 	bl	80040ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b20:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	609a      	str	r2, [r3, #8]
      break;
 8003b2a:	e04e      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	6899      	ldr	r1, [r3, #8]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f000 fad7 	bl	80040ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b4e:	609a      	str	r2, [r3, #8]
      break;
 8003b50:	e03b      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6859      	ldr	r1, [r3, #4]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f000 fa4e 	bl	8004000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2150      	movs	r1, #80	; 0x50
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 faa5 	bl	80040ba <TIM_ITRx_SetConfig>
      break;
 8003b70:	e02b      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6859      	ldr	r1, [r3, #4]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f000 fa6c 	bl	800405c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2160      	movs	r1, #96	; 0x60
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fa95 	bl	80040ba <TIM_ITRx_SetConfig>
      break;
 8003b90:	e01b      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6859      	ldr	r1, [r3, #4]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f000 fa2e 	bl	8004000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2140      	movs	r1, #64	; 0x40
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fa85 	bl	80040ba <TIM_ITRx_SetConfig>
      break;
 8003bb0:	e00b      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	f000 fa7c 	bl	80040ba <TIM_ITRx_SetConfig>
        break;
 8003bc2:	e002      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003bc4:	bf00      	nop
 8003bc6:	e000      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003bc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr

08003c1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a29      	ldr	r2, [pc, #164]	; (8003ce4 <TIM_Base_SetConfig+0xb8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00b      	beq.n	8003c5c <TIM_Base_SetConfig+0x30>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c4a:	d007      	beq.n	8003c5c <TIM_Base_SetConfig+0x30>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a26      	ldr	r2, [pc, #152]	; (8003ce8 <TIM_Base_SetConfig+0xbc>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d003      	beq.n	8003c5c <TIM_Base_SetConfig+0x30>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a25      	ldr	r2, [pc, #148]	; (8003cec <TIM_Base_SetConfig+0xc0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d108      	bne.n	8003c6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a1c      	ldr	r2, [pc, #112]	; (8003ce4 <TIM_Base_SetConfig+0xb8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00b      	beq.n	8003c8e <TIM_Base_SetConfig+0x62>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7c:	d007      	beq.n	8003c8e <TIM_Base_SetConfig+0x62>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a19      	ldr	r2, [pc, #100]	; (8003ce8 <TIM_Base_SetConfig+0xbc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d003      	beq.n	8003c8e <TIM_Base_SetConfig+0x62>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a18      	ldr	r2, [pc, #96]	; (8003cec <TIM_Base_SetConfig+0xc0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d108      	bne.n	8003ca0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a07      	ldr	r2, [pc, #28]	; (8003ce4 <TIM_Base_SetConfig+0xb8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d103      	bne.n	8003cd4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	615a      	str	r2, [r3, #20]
}
 8003cda:	bf00      	nop
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr
 8003ce4:	40012c00 	.word	0x40012c00
 8003ce8:	40000400 	.word	0x40000400
 8003cec:	40000800 	.word	0x40000800

08003cf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	f023 0201 	bic.w	r2, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0303 	bic.w	r3, r3, #3
 8003d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f023 0302 	bic.w	r3, r3, #2
 8003d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a1c      	ldr	r2, [pc, #112]	; (8003db8 <TIM_OC1_SetConfig+0xc8>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d10c      	bne.n	8003d66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f023 0308 	bic.w	r3, r3, #8
 8003d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f023 0304 	bic.w	r3, r3, #4
 8003d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a13      	ldr	r2, [pc, #76]	; (8003db8 <TIM_OC1_SetConfig+0xc8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d111      	bne.n	8003d92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	621a      	str	r2, [r3, #32]
}
 8003dac:	bf00      	nop
 8003dae:	371c      	adds	r7, #28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40012c00 	.word	0x40012c00

08003dbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	f023 0210 	bic.w	r2, r3, #16
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f023 0320 	bic.w	r3, r3, #32
 8003e06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a1d      	ldr	r2, [pc, #116]	; (8003e8c <TIM_OC2_SetConfig+0xd0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d10d      	bne.n	8003e38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a14      	ldr	r2, [pc, #80]	; (8003e8c <TIM_OC2_SetConfig+0xd0>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d113      	bne.n	8003e68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	621a      	str	r2, [r3, #32]
}
 8003e82:	bf00      	nop
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr
 8003e8c:	40012c00 	.word	0x40012c00

08003e90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0303 	bic.w	r3, r3, #3
 8003ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	021b      	lsls	r3, r3, #8
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a1d      	ldr	r2, [pc, #116]	; (8003f60 <TIM_OC3_SetConfig+0xd0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d10d      	bne.n	8003f0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a14      	ldr	r2, [pc, #80]	; (8003f60 <TIM_OC3_SetConfig+0xd0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d113      	bne.n	8003f3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	621a      	str	r2, [r3, #32]
}
 8003f54:	bf00      	nop
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40012c00 	.word	0x40012c00

08003f64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	021b      	lsls	r3, r3, #8
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	031b      	lsls	r3, r3, #12
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a0f      	ldr	r2, [pc, #60]	; (8003ffc <TIM_OC4_SetConfig+0x98>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d109      	bne.n	8003fd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	019b      	lsls	r3, r3, #6
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	621a      	str	r2, [r3, #32]
}
 8003ff2:	bf00      	nop
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr
 8003ffc:	40012c00 	.word	0x40012c00

08004000 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f023 0201 	bic.w	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800402a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f023 030a 	bic.w	r3, r3, #10
 800403c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4313      	orrs	r3, r2
 8004044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	621a      	str	r2, [r3, #32]
}
 8004052:	bf00      	nop
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	f023 0210 	bic.w	r2, r3, #16
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004086:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	031b      	lsls	r3, r3, #12
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004098:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	621a      	str	r2, [r3, #32]
}
 80040b0:	bf00      	nop
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr

080040ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b085      	sub	sp, #20
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f043 0307 	orr.w	r3, r3, #7
 80040dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	609a      	str	r2, [r3, #8]
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr

080040ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b087      	sub	sp, #28
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	607a      	str	r2, [r7, #4]
 80040fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004108:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	021a      	lsls	r2, r3, #8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	431a      	orrs	r2, r3
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	4313      	orrs	r3, r2
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	609a      	str	r2, [r3, #8]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr

0800412c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	2201      	movs	r2, #1
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1a      	ldr	r2, [r3, #32]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	43db      	mvns	r3, r3
 800414e:	401a      	ands	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	431a      	orrs	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004188:	2302      	movs	r3, #2
 800418a:	e046      	b.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a16      	ldr	r2, [pc, #88]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00e      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d8:	d009      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a12      	ldr	r2, [pc, #72]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a10      	ldr	r2, [pc, #64]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10c      	bne.n	8004208 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40000400 	.word	0x40000400
 800422c:	40000800 	.word	0x40000800

08004230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e03f      	b.n	80042e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fd fd06 	bl	8001c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2224      	movs	r2, #36	; 0x24
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004296:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fd9b 	bl	8004dd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b08a      	sub	sp, #40	; 0x28
 80042f2:	af02      	add	r7, sp, #8
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	603b      	str	r3, [r7, #0]
 80042fa:	4613      	mov	r3, r2
 80042fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b20      	cmp	r3, #32
 800430c:	d17c      	bne.n	8004408 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_UART_Transmit+0x2c>
 8004314:	88fb      	ldrh	r3, [r7, #6]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e075      	b.n	800440a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_UART_Transmit+0x3e>
 8004328:	2302      	movs	r3, #2
 800432a:	e06e      	b.n	800440a <HAL_UART_Transmit+0x11c>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2221      	movs	r2, #33	; 0x21
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004342:	f7fd fe6f 	bl	8002024 <HAL_GetTick>
 8004346:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	88fa      	ldrh	r2, [r7, #6]
 800434c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	88fa      	ldrh	r2, [r7, #6]
 8004352:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435c:	d108      	bne.n	8004370 <HAL_UART_Transmit+0x82>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d104      	bne.n	8004370 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004366:	2300      	movs	r3, #0
 8004368:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	61bb      	str	r3, [r7, #24]
 800436e:	e003      	b.n	8004378 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004374:	2300      	movs	r3, #0
 8004376:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004380:	e02a      	b.n	80043d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2200      	movs	r2, #0
 800438a:	2180      	movs	r1, #128	; 0x80
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 fb0d 	bl	80049ac <UART_WaitOnFlagUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e036      	b.n	800440a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10b      	bne.n	80043ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	3302      	adds	r3, #2
 80043b6:	61bb      	str	r3, [r7, #24]
 80043b8:	e007      	b.n	80043ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	781a      	ldrb	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	3301      	adds	r3, #1
 80043c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1cf      	bne.n	8004382 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2200      	movs	r2, #0
 80043ea:	2140      	movs	r1, #64	; 0x40
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 fadd 	bl	80049ac <UART_WaitOnFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e006      	b.n	800440a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	e000      	b.n	800440a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004408:	2302      	movs	r3, #2
  }
}
 800440a:	4618      	mov	r0, r3
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b086      	sub	sp, #24
 8004416:	af00      	add	r7, sp, #0
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	4613      	mov	r3, r2
 800441e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b20      	cmp	r3, #32
 800442a:	d13c      	bne.n	80044a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004432:	88fb      	ldrh	r3, [r7, #6]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e035      	b.n	80044a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004446:	2302      	movs	r3, #2
 8004448:	e02e      	b.n	80044a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004458:	88fb      	ldrh	r3, [r7, #6]
 800445a:	461a      	mov	r2, r3
 800445c:	68b9      	ldr	r1, [r7, #8]
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 faee 	bl	8004a40 <UART_Start_Receive_DMA>
 8004464:	4603      	mov	r3, r0
 8004466:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004468:	7dfb      	ldrb	r3, [r7, #23]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d119      	bne.n	80044a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	2b01      	cmp	r3, #1
 8004474:	d113      	bne.n	800449e <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004476:	2300      	movs	r3, #0
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0210 	orr.w	r2, r2, #16
 800449a:	60da      	str	r2, [r3, #12]
 800449c:	e001      	b.n	80044a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
 80044a4:	e000      	b.n	80044a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 80044a6:	2302      	movs	r3, #2
  }
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08a      	sub	sp, #40	; 0x28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10d      	bne.n	8004502 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	f003 0320 	and.w	r3, r3, #32
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <HAL_UART_IRQHandler+0x52>
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fbc0 	bl	8004c80 <UART_Receive_IT>
      return;
 8004500:	e17b      	b.n	80047fa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80b1 	beq.w	800466c <HAL_UART_IRQHandler+0x1bc>
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d105      	bne.n	8004520 <HAL_UART_IRQHandler+0x70>
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80a6 	beq.w	800466c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_UART_IRQHandler+0x90>
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d005      	beq.n	8004540 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	f043 0201 	orr.w	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <HAL_UART_IRQHandler+0xb0>
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	f043 0202 	orr.w	r2, r3, #2
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <HAL_UART_IRQHandler+0xd0>
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	f043 0204 	orr.w	r2, r3, #4
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00f      	beq.n	80045aa <HAL_UART_IRQHandler+0xfa>
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d104      	bne.n	800459e <HAL_UART_IRQHandler+0xee>
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d005      	beq.n	80045aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f043 0208 	orr.w	r2, r3, #8
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 811e 	beq.w	80047f0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <HAL_UART_IRQHandler+0x11e>
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fb59 	bl	8004c80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf14      	ite	ne
 80045dc:	2301      	movne	r3, #1
 80045de:	2300      	moveq	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d102      	bne.n	80045f6 <HAL_UART_IRQHandler+0x146>
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d031      	beq.n	800465a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fa9b 	bl	8004b32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d023      	beq.n	8004652 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695a      	ldr	r2, [r3, #20]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004618:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	2b00      	cmp	r3, #0
 8004620:	d013      	beq.n	800464a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	4a76      	ldr	r2, [pc, #472]	; (8004800 <HAL_UART_IRQHandler+0x350>)
 8004628:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	4618      	mov	r0, r3
 8004630:	f7fd ff28 	bl	8002484 <HAL_DMA_Abort_IT>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d016      	beq.n	8004668 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004644:	4610      	mov	r0, r2
 8004646:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004648:	e00e      	b.n	8004668 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f8f5 	bl	800483a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004650:	e00a      	b.n	8004668 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f8f1 	bl	800483a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004658:	e006      	b.n	8004668 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f8ed 	bl	800483a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004666:	e0c3      	b.n	80047f0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004668:	bf00      	nop
    return;
 800466a:	e0c1      	b.n	80047f0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	2b01      	cmp	r3, #1
 8004672:	f040 80a1 	bne.w	80047b8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 809b 	beq.w	80047b8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 8095 	beq.w	80047b8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d04e      	beq.n	8004750 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80046bc:	8a3b      	ldrh	r3, [r7, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 8098 	beq.w	80047f4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046c8:	8a3a      	ldrh	r2, [r7, #16]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	f080 8092 	bcs.w	80047f4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8a3a      	ldrh	r2, [r7, #16]
 80046d4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d02b      	beq.n	8004738 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046ee:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695a      	ldr	r2, [r3, #20]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0201 	bic.w	r2, r2, #1
 80046fe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695a      	ldr	r2, [r3, #20]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800470e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0210 	bic.w	r2, r2, #16
 800472c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	4618      	mov	r0, r3
 8004734:	f7fd fe6b 	bl	800240e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004740:	b29b      	uxth	r3, r3
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	b29b      	uxth	r3, r3
 8004746:	4619      	mov	r1, r3
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7fc fba1 	bl	8000e90 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800474e:	e051      	b.n	80047f4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004758:	b29b      	uxth	r3, r3
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d047      	beq.n	80047f8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004768:	8a7b      	ldrh	r3, [r7, #18]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d044      	beq.n	80047f8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800477c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695a      	ldr	r2, [r3, #20]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0201 	bic.w	r2, r2, #1
 800478c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0210 	bic.w	r2, r2, #16
 80047aa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047ac:	8a7b      	ldrh	r3, [r7, #18]
 80047ae:	4619      	mov	r1, r3
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7fc fb6d 	bl	8000e90 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80047b6:	e01f      	b.n	80047f8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d008      	beq.n	80047d4 <HAL_UART_IRQHandler+0x324>
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f9f0 	bl	8004bb2 <UART_Transmit_IT>
    return;
 80047d2:	e012      	b.n	80047fa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00d      	beq.n	80047fa <HAL_UART_IRQHandler+0x34a>
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d008      	beq.n	80047fa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 fa31 	bl	8004c50 <UART_EndTransmit_IT>
    return;
 80047ee:	e004      	b.n	80047fa <HAL_UART_IRQHandler+0x34a>
    return;
 80047f0:	bf00      	nop
 80047f2:	e002      	b.n	80047fa <HAL_UART_IRQHandler+0x34a>
      return;
 80047f4:	bf00      	nop
 80047f6:	e000      	b.n	80047fa <HAL_UART_IRQHandler+0x34a>
      return;
 80047f8:	bf00      	nop
  }
}
 80047fa:	3728      	adds	r7, #40	; 0x28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	08004b8b 	.word	0x08004b8b

08004804 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr

08004816 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr

08004828 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr

0800483a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr

0800484c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	2b00      	cmp	r3, #0
 8004866:	d12a      	bne.n	80048be <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800487c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695a      	ldr	r2, [r3, #20]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0201 	bic.w	r2, r2, #1
 800488c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695a      	ldr	r2, [r3, #20]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800489c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d107      	bne.n	80048be <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0210 	bic.w	r2, r2, #16
 80048bc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d106      	bne.n	80048d4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ca:	4619      	mov	r1, r3
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f7fc fadf 	bl	8000e90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048d2:	e002      	b.n	80048da <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f7ff ff9e 	bl	8004816 <HAL_UART_RxCpltCallback>
}
 80048da:	bf00      	nop
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d108      	bne.n	800490a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048fc:	085b      	lsrs	r3, r3, #1
 80048fe:	b29b      	uxth	r3, r3
 8004900:	4619      	mov	r1, r3
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f7fc fac4 	bl	8000e90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004908:	e002      	b.n	8004910 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f7ff ff8c 	bl	8004828 <HAL_UART_RxHalfCpltCallback>
}
 8004910:	bf00      	nop
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004934:	2b00      	cmp	r3, #0
 8004936:	bf14      	ite	ne
 8004938:	2301      	movne	r3, #1
 800493a:	2300      	moveq	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b21      	cmp	r3, #33	; 0x21
 800494a:	d108      	bne.n	800495e <UART_DMAError+0x46>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d005      	beq.n	800495e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2200      	movs	r2, #0
 8004956:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004958:	68b8      	ldr	r0, [r7, #8]
 800495a:	f000 f8d5 	bl	8004b08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	bf14      	ite	ne
 800496c:	2301      	movne	r3, #1
 800496e:	2300      	moveq	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b22      	cmp	r3, #34	; 0x22
 800497e:	d108      	bne.n	8004992 <UART_DMAError+0x7a>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d005      	beq.n	8004992 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2200      	movs	r2, #0
 800498a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800498c:	68b8      	ldr	r0, [r7, #8]
 800498e:	f000 f8d0 	bl	8004b32 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	f043 0210 	orr.w	r2, r3, #16
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800499e:	68b8      	ldr	r0, [r7, #8]
 80049a0:	f7ff ff4b 	bl	800483a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049a4:	bf00      	nop
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	4613      	mov	r3, r2
 80049ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049bc:	e02c      	b.n	8004a18 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c4:	d028      	beq.n	8004a18 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <UART_WaitOnFlagUntilTimeout+0x30>
 80049cc:	f7fd fb2a 	bl	8002024 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d21d      	bcs.n	8004a18 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695a      	ldr	r2, [r3, #20]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0201 	bic.w	r2, r2, #1
 80049fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e00f      	b.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	4013      	ands	r3, r2
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	bf0c      	ite	eq
 8004a28:	2301      	moveq	r3, #1
 8004a2a:	2300      	movne	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d0c3      	beq.n	80049be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	88fa      	ldrh	r2, [r7, #6]
 8004a58:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2222      	movs	r2, #34	; 0x22
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	4a23      	ldr	r2, [pc, #140]	; (8004afc <UART_Start_Receive_DMA+0xbc>)
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	4a22      	ldr	r2, [pc, #136]	; (8004b00 <UART_Start_Receive_DMA+0xc0>)
 8004a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	4a21      	ldr	r2, [pc, #132]	; (8004b04 <UART_Start_Receive_DMA+0xc4>)
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	2200      	movs	r2, #0
 8004a86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004a88:	f107 0308 	add.w	r3, r7, #8
 8004a8c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3304      	adds	r3, #4
 8004a98:	4619      	mov	r1, r3
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	88fb      	ldrh	r3, [r7, #6]
 8004aa0:	f7fd fc56 	bl	8002350 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695a      	ldr	r2, [r3, #20]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f042 0201 	orr.w	r2, r2, #1
 8004ae0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695a      	ldr	r2, [r3, #20]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004af0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	0800484d 	.word	0x0800484d
 8004b00:	080048e3 	.word	0x080048e3
 8004b04:	08004919 	.word	0x08004919

08004b08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004b1e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr

08004b32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b48:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695a      	ldr	r2, [r3, #20]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0201 	bic.w	r2, r2, #1
 8004b58:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d107      	bne.n	8004b72 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0210 	bic.w	r2, r2, #16
 8004b70:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc80      	pop	{r7}
 8004b88:	4770      	bx	lr

08004b8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f7ff fe48 	bl	800483a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004baa:	bf00      	nop
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b085      	sub	sp, #20
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b21      	cmp	r3, #33	; 0x21
 8004bc4:	d13e      	bne.n	8004c44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bce:	d114      	bne.n	8004bfa <UART_Transmit_IT+0x48>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d110      	bne.n	8004bfa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	1c9a      	adds	r2, r3, #2
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	621a      	str	r2, [r3, #32]
 8004bf8:	e008      	b.n	8004c0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	1c59      	adds	r1, r3, #1
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6211      	str	r1, [r2, #32]
 8004c04:	781a      	ldrb	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10f      	bne.n	8004c40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	e000      	b.n	8004c46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c44:	2302      	movs	r3, #2
  }
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc80      	pop	{r7}
 8004c4e:	4770      	bx	lr

08004c50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff fdc7 	bl	8004804 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b22      	cmp	r3, #34	; 0x22
 8004c92:	f040 8099 	bne.w	8004dc8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9e:	d117      	bne.n	8004cd0 <UART_Receive_IT+0x50>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d113      	bne.n	8004cd0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc8:	1c9a      	adds	r2, r3, #2
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	629a      	str	r2, [r3, #40]	; 0x28
 8004cce:	e026      	b.n	8004d1e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce2:	d007      	beq.n	8004cf4 <UART_Receive_IT+0x74>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10a      	bne.n	8004d02 <UART_Receive_IT+0x82>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d106      	bne.n	8004d02 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	701a      	strb	r2, [r3, #0]
 8004d00:	e008      	b.n	8004d14 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d148      	bne.n	8004dc4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0220 	bic.w	r2, r2, #32
 8004d40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695a      	ldr	r2, [r3, #20]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0201 	bic.w	r2, r2, #1
 8004d60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d123      	bne.n	8004dba <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0210 	bic.w	r2, r2, #16
 8004d86:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	2b10      	cmp	r3, #16
 8004d94:	d10a      	bne.n	8004dac <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004db0:	4619      	mov	r1, r3
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fc f86c 	bl	8000e90 <HAL_UARTEx_RxEventCallback>
 8004db8:	e002      	b.n	8004dc0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff fd2b 	bl	8004816 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	e002      	b.n	8004dca <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e000      	b.n	8004dca <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004dc8:	2302      	movs	r3, #2
  }
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e0e:	f023 030c 	bic.w	r3, r3, #12
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6812      	ldr	r2, [r2, #0]
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	430b      	orrs	r3, r1
 8004e1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a2c      	ldr	r2, [pc, #176]	; (8004ee8 <UART_SetConfig+0x114>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d103      	bne.n	8004e44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e3c:	f7fe fa82 	bl	8003344 <HAL_RCC_GetPCLK2Freq>
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	e002      	b.n	8004e4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e44:	f7fe fa6a 	bl	800331c <HAL_RCC_GetPCLK1Freq>
 8004e48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	009a      	lsls	r2, r3, #2
 8004e54:	441a      	add	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e60:	4a22      	ldr	r2, [pc, #136]	; (8004eec <UART_SetConfig+0x118>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	0119      	lsls	r1, r3, #4
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	009a      	lsls	r2, r3, #2
 8004e74:	441a      	add	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e80:	4b1a      	ldr	r3, [pc, #104]	; (8004eec <UART_SetConfig+0x118>)
 8004e82:	fba3 0302 	umull	r0, r3, r3, r2
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	2064      	movs	r0, #100	; 0x64
 8004e8a:	fb00 f303 	mul.w	r3, r0, r3
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	3332      	adds	r3, #50	; 0x32
 8004e94:	4a15      	ldr	r2, [pc, #84]	; (8004eec <UART_SetConfig+0x118>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ea0:	4419      	add	r1, r3
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009a      	lsls	r2, r3, #2
 8004eac:	441a      	add	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eb8:	4b0c      	ldr	r3, [pc, #48]	; (8004eec <UART_SetConfig+0x118>)
 8004eba:	fba3 0302 	umull	r0, r3, r3, r2
 8004ebe:	095b      	lsrs	r3, r3, #5
 8004ec0:	2064      	movs	r0, #100	; 0x64
 8004ec2:	fb00 f303 	mul.w	r3, r0, r3
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	3332      	adds	r3, #50	; 0x32
 8004ecc:	4a07      	ldr	r2, [pc, #28]	; (8004eec <UART_SetConfig+0x118>)
 8004ece:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	f003 020f 	and.w	r2, r3, #15
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	440a      	add	r2, r1
 8004ede:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ee0:	bf00      	nop
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40013800 	.word	0x40013800
 8004eec:	51eb851f 	.word	0x51eb851f

08004ef0 <__libc_init_array>:
 8004ef0:	b570      	push	{r4, r5, r6, lr}
 8004ef2:	2600      	movs	r6, #0
 8004ef4:	4d0c      	ldr	r5, [pc, #48]	; (8004f28 <__libc_init_array+0x38>)
 8004ef6:	4c0d      	ldr	r4, [pc, #52]	; (8004f2c <__libc_init_array+0x3c>)
 8004ef8:	1b64      	subs	r4, r4, r5
 8004efa:	10a4      	asrs	r4, r4, #2
 8004efc:	42a6      	cmp	r6, r4
 8004efe:	d109      	bne.n	8004f14 <__libc_init_array+0x24>
 8004f00:	f000 f822 	bl	8004f48 <_init>
 8004f04:	2600      	movs	r6, #0
 8004f06:	4d0a      	ldr	r5, [pc, #40]	; (8004f30 <__libc_init_array+0x40>)
 8004f08:	4c0a      	ldr	r4, [pc, #40]	; (8004f34 <__libc_init_array+0x44>)
 8004f0a:	1b64      	subs	r4, r4, r5
 8004f0c:	10a4      	asrs	r4, r4, #2
 8004f0e:	42a6      	cmp	r6, r4
 8004f10:	d105      	bne.n	8004f1e <__libc_init_array+0x2e>
 8004f12:	bd70      	pop	{r4, r5, r6, pc}
 8004f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f18:	4798      	blx	r3
 8004f1a:	3601      	adds	r6, #1
 8004f1c:	e7ee      	b.n	8004efc <__libc_init_array+0xc>
 8004f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f22:	4798      	blx	r3
 8004f24:	3601      	adds	r6, #1
 8004f26:	e7f2      	b.n	8004f0e <__libc_init_array+0x1e>
 8004f28:	08004f88 	.word	0x08004f88
 8004f2c:	08004f88 	.word	0x08004f88
 8004f30:	08004f88 	.word	0x08004f88
 8004f34:	08004f8c 	.word	0x08004f8c

08004f38 <memset>:
 8004f38:	4603      	mov	r3, r0
 8004f3a:	4402      	add	r2, r0
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d100      	bne.n	8004f42 <memset+0xa>
 8004f40:	4770      	bx	lr
 8004f42:	f803 1b01 	strb.w	r1, [r3], #1
 8004f46:	e7f9      	b.n	8004f3c <memset+0x4>

08004f48 <_init>:
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	bf00      	nop
 8004f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f4e:	bc08      	pop	{r3}
 8004f50:	469e      	mov	lr, r3
 8004f52:	4770      	bx	lr

08004f54 <_fini>:
 8004f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f56:	bf00      	nop
 8004f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f5a:	bc08      	pop	{r3}
 8004f5c:	469e      	mov	lr, r3
 8004f5e:	4770      	bx	lr
