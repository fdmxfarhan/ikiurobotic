
test-01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004248  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004354  08004354  00014354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004394  08004394  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004394  08004394  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004394  08004394  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004394  08004394  00014394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004398  08004398  00014398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800439c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000001c  080043b8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080043b8  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db88  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5b  00000000  00000000  0002dbcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  0002fa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00030770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001768c  00000000  00000000  00031400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8fb  00000000  00000000  00048a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b778  00000000  00000000  00057387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2aff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000379c  00000000  00000000  000e2b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800433c 	.word	0x0800433c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	0800433c 	.word	0x0800433c

0800014c <read_adc>:
int error3 = 0;
int error4 = 0;
int start_time;
int count_grip = 0;

uint32_t read_adc(uint32_t channel){
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000154:	f107 0308 	add.w	r3, r7, #8
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000160:	2302      	movs	r3, #2
 8000162:	613b      	str	r3, [r7, #16]
	sConfig.Channel = channel;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000168:	2301      	movs	r3, #1
 800016a:	60fb      	str	r3, [r7, #12]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800016c:	f107 0308 	add.w	r3, r7, #8
 8000170:	4619      	mov	r1, r3
 8000172:	480a      	ldr	r0, [pc, #40]	; (800019c <read_adc+0x50>)
 8000174:	f001 f960 	bl	8001438 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000178:	4808      	ldr	r0, [pc, #32]	; (800019c <read_adc+0x50>)
 800017a:	f000 ff9d 	bl	80010b8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800017e:	f04f 31ff 	mov.w	r1, #4294967295
 8000182:	4806      	ldr	r0, [pc, #24]	; (800019c <read_adc+0x50>)
 8000184:	f001 f846 	bl	8001214 <HAL_ADC_PollForConversion>
	uint32_t val = HAL_ADC_GetValue(&hadc1);
 8000188:	4804      	ldr	r0, [pc, #16]	; (800019c <read_adc+0x50>)
 800018a:	f001 f949 	bl	8001420 <HAL_ADC_GetValue>
 800018e:	6178      	str	r0, [r7, #20]
	return val;
 8000190:	697b      	ldr	r3, [r7, #20]
}
 8000192:	4618      	mov	r0, r3
 8000194:	3718      	adds	r7, #24
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	20000038 	.word	0x20000038

080001a0 <motor1>:

void motor1(int v){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	if(v >  MAX_SPEED)  v =  MAX_SPEED;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	f649 4240 	movw	r2, #40000	; 0x9c40
 80001ae:	4293      	cmp	r3, r2
 80001b0:	dd02      	ble.n	80001b8 <motor1+0x18>
 80001b2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80001b6:	607b      	str	r3, [r7, #4]
	if(v < -MAX_SPEED)  v = -MAX_SPEED;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	4a10      	ldr	r2, [pc, #64]	; (80001fc <motor1+0x5c>)
 80001bc:	4293      	cmp	r3, r2
 80001be:	da01      	bge.n	80001c4 <motor1+0x24>
 80001c0:	4b0e      	ldr	r3, [pc, #56]	; (80001fc <motor1+0x5c>)
 80001c2:	607b      	str	r3, [r7, #4]
	// ------------- Motor L1
	if(v >= 0){
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	db08      	blt.n	80001dc <motor1+0x3c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80001ca:	2200      	movs	r2, #0
 80001cc:	2110      	movs	r1, #16
 80001ce:	480c      	ldr	r0, [pc, #48]	; (8000200 <motor1+0x60>)
 80001d0:	f001 fe98 	bl	8001f04 <HAL_GPIO_WritePin>
		TIM4->CCR3 = v;
 80001d4:	4a0b      	ldr	r2, [pc, #44]	; (8000204 <motor1+0x64>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	63d3      	str	r3, [r2, #60]	; 0x3c
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
		TIM4->CCR3 = v+65535;
	}
}
 80001da:	e00a      	b.n	80001f2 <motor1+0x52>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80001dc:	2201      	movs	r2, #1
 80001de:	2110      	movs	r1, #16
 80001e0:	4807      	ldr	r0, [pc, #28]	; (8000200 <motor1+0x60>)
 80001e2:	f001 fe8f 	bl	8001f04 <HAL_GPIO_WritePin>
		TIM4->CCR3 = v+65535;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80001ec:	33ff      	adds	r3, #255	; 0xff
 80001ee:	4a05      	ldr	r2, [pc, #20]	; (8000204 <motor1+0x64>)
 80001f0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	ffff63c0 	.word	0xffff63c0
 8000200:	40010c00 	.word	0x40010c00
 8000204:	40000800 	.word	0x40000800

08000208 <motor2>:
void motor2(int v){
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
	if(v >  MAX_SPEED)  v =  MAX_SPEED;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000216:	4293      	cmp	r3, r2
 8000218:	dd02      	ble.n	8000220 <motor2+0x18>
 800021a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800021e:	607b      	str	r3, [r7, #4]
	if(v < -MAX_SPEED)  v = -MAX_SPEED;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a10      	ldr	r2, [pc, #64]	; (8000264 <motor2+0x5c>)
 8000224:	4293      	cmp	r3, r2
 8000226:	da01      	bge.n	800022c <motor2+0x24>
 8000228:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <motor2+0x5c>)
 800022a:	607b      	str	r3, [r7, #4]
	// ------------- Motor L1
	if(v >= 0){
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b00      	cmp	r3, #0
 8000230:	db08      	blt.n	8000244 <motor2+0x3c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000232:	2200      	movs	r2, #0
 8000234:	2120      	movs	r1, #32
 8000236:	480c      	ldr	r0, [pc, #48]	; (8000268 <motor2+0x60>)
 8000238:	f001 fe64 	bl	8001f04 <HAL_GPIO_WritePin>
		TIM4->CCR4 = v;
 800023c:	4a0b      	ldr	r2, [pc, #44]	; (800026c <motor2+0x64>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
		TIM4->CCR4 = v+65535;
	}
}
 8000242:	e00a      	b.n	800025a <motor2+0x52>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000244:	2201      	movs	r2, #1
 8000246:	2120      	movs	r1, #32
 8000248:	4807      	ldr	r0, [pc, #28]	; (8000268 <motor2+0x60>)
 800024a:	f001 fe5b 	bl	8001f04 <HAL_GPIO_WritePin>
		TIM4->CCR4 = v+65535;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000254:	33ff      	adds	r3, #255	; 0xff
 8000256:	4a05      	ldr	r2, [pc, #20]	; (800026c <motor2+0x64>)
 8000258:	6413      	str	r3, [r2, #64]	; 0x40
}
 800025a:	bf00      	nop
 800025c:	3708      	adds	r7, #8
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	ffff63c0 	.word	0xffff63c0
 8000268:	40010c00 	.word	0x40010c00
 800026c:	40000800 	.word	0x40000800

08000270 <motor3>:

void motor3(int v){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	if(v >  MAX_SPEED)  v =  MAX_SPEED;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f649 4240 	movw	r2, #40000	; 0x9c40
 800027e:	4293      	cmp	r3, r2
 8000280:	dd02      	ble.n	8000288 <motor3+0x18>
 8000282:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000286:	607b      	str	r3, [r7, #4]
	if(v < -MAX_SPEED)  v = -MAX_SPEED;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4a10      	ldr	r2, [pc, #64]	; (80002cc <motor3+0x5c>)
 800028c:	4293      	cmp	r3, r2
 800028e:	da01      	bge.n	8000294 <motor3+0x24>
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <motor3+0x5c>)
 8000292:	607b      	str	r3, [r7, #4]
	// ------------- Motor L1
	if(v >= 0){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b00      	cmp	r3, #0
 8000298:	db08      	blt.n	80002ac <motor3+0x3c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 800029a:	2200      	movs	r2, #0
 800029c:	2108      	movs	r1, #8
 800029e:	480c      	ldr	r0, [pc, #48]	; (80002d0 <motor3+0x60>)
 80002a0:	f001 fe30 	bl	8001f04 <HAL_GPIO_WritePin>
		TIM4->CCR2 = v;
 80002a4:	4a0b      	ldr	r2, [pc, #44]	; (80002d4 <motor3+0x64>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	6393      	str	r3, [r2, #56]	; 0x38
	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
		TIM4->CCR2 = v+65535;
	}
}
 80002aa:	e00a      	b.n	80002c2 <motor3+0x52>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2108      	movs	r1, #8
 80002b0:	4807      	ldr	r0, [pc, #28]	; (80002d0 <motor3+0x60>)
 80002b2:	f001 fe27 	bl	8001f04 <HAL_GPIO_WritePin>
		TIM4->CCR2 = v+65535;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80002bc:	33ff      	adds	r3, #255	; 0xff
 80002be:	4a05      	ldr	r2, [pc, #20]	; (80002d4 <motor3+0x64>)
 80002c0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	ffff63c0 	.word	0xffff63c0
 80002d0:	40010c00 	.word	0x40010c00
 80002d4:	40000800 	.word	0x40000800

080002d8 <motor4>:
void motor4(int sp){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	if(sp < Motor4_FB){
 80002e0:	4b33      	ldr	r3, [pc, #204]	; (80003b0 <motor4+0xd8>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	da23      	bge.n	8000332 <motor4+0x5a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); // ENA
 80002ea:	2200      	movs	r2, #0
 80002ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f0:	4830      	ldr	r0, [pc, #192]	; (80003b4 <motor4+0xdc>)
 80002f2:	f001 fe07 	bl	8001f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0); // DIR
 80002f6:	2200      	movs	r2, #0
 80002f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002fc:	482d      	ldr	r0, [pc, #180]	; (80003b4 <motor4+0xdc>)
 80002fe:	f001 fe01 	bl	8001f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1); // PUL
 8000302:	2201      	movs	r2, #1
 8000304:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000308:	482a      	ldr	r0, [pc, #168]	; (80003b4 <motor4+0xdc>)
 800030a:	f001 fdfb 	bl	8001f04 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800030e:	2005      	movs	r0, #5
 8000310:	f000 fdd6 	bl	8000ec0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0); // PUL
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800031a:	4826      	ldr	r0, [pc, #152]	; (80003b4 <motor4+0xdc>)
 800031c:	f001 fdf2 	bl	8001f04 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8000320:	2005      	movs	r0, #5
 8000322:	f000 fdcd 	bl	8000ec0 <HAL_Delay>
		Motor4_FB--;
 8000326:	4b22      	ldr	r3, [pc, #136]	; (80003b0 <motor4+0xd8>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	3b01      	subs	r3, #1
 800032c:	4a20      	ldr	r2, [pc, #128]	; (80003b0 <motor4+0xd8>)
 800032e:	6013      	str	r3, [r2, #0]
	}else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1); // DIR
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1); // ENA
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1); // PUL
	}
}
 8000330:	e03a      	b.n	80003a8 <motor4+0xd0>
	}else if(sp > Motor4_FB){
 8000332:	4b1f      	ldr	r3, [pc, #124]	; (80003b0 <motor4+0xd8>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	429a      	cmp	r2, r3
 800033a:	dd23      	ble.n	8000384 <motor4+0xac>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); // ENA
 800033c:	2200      	movs	r2, #0
 800033e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000342:	481c      	ldr	r0, [pc, #112]	; (80003b4 <motor4+0xdc>)
 8000344:	f001 fdde 	bl	8001f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1); // DIR
 8000348:	2201      	movs	r2, #1
 800034a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800034e:	4819      	ldr	r0, [pc, #100]	; (80003b4 <motor4+0xdc>)
 8000350:	f001 fdd8 	bl	8001f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1); // PUL
 8000354:	2201      	movs	r2, #1
 8000356:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800035a:	4816      	ldr	r0, [pc, #88]	; (80003b4 <motor4+0xdc>)
 800035c:	f001 fdd2 	bl	8001f04 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8000360:	2005      	movs	r0, #5
 8000362:	f000 fdad 	bl	8000ec0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0); // PUL
 8000366:	2200      	movs	r2, #0
 8000368:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800036c:	4811      	ldr	r0, [pc, #68]	; (80003b4 <motor4+0xdc>)
 800036e:	f001 fdc9 	bl	8001f04 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8000372:	2005      	movs	r0, #5
 8000374:	f000 fda4 	bl	8000ec0 <HAL_Delay>
		Motor4_FB++;
 8000378:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <motor4+0xd8>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	3301      	adds	r3, #1
 800037e:	4a0c      	ldr	r2, [pc, #48]	; (80003b0 <motor4+0xd8>)
 8000380:	6013      	str	r3, [r2, #0]
}
 8000382:	e011      	b.n	80003a8 <motor4+0xd0>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1); // DIR
 8000384:	2201      	movs	r2, #1
 8000386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800038a:	480a      	ldr	r0, [pc, #40]	; (80003b4 <motor4+0xdc>)
 800038c:	f001 fdba 	bl	8001f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1); // ENA
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000396:	4807      	ldr	r0, [pc, #28]	; (80003b4 <motor4+0xdc>)
 8000398:	f001 fdb4 	bl	8001f04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1); // PUL
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003a2:	4804      	ldr	r0, [pc, #16]	; (80003b4 <motor4+0xdc>)
 80003a4:	f001 fdae 	bl	8001f04 <HAL_GPIO_WritePin>
}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000154 	.word	0x20000154
 80003b4:	40010c00 	.word	0x40010c00

080003b8 <HAL_UARTEx_RxEventCallback>:
		  motor1(-20000);
	  }
	  else motor1(0);
  }
}
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	460b      	mov	r3, r1
 80003c2:	807b      	strh	r3, [r7, #2]
	LED_ON;
 80003c4:	2200      	movs	r2, #0
 80003c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ca:	482e      	ldr	r0, [pc, #184]	; (8000484 <HAL_UARTEx_RxEventCallback+0xcc>)
 80003cc:	f001 fd9a 	bl	8001f04 <HAL_GPIO_WritePin>
	if(huart->Instance == USART2){
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a2c      	ldr	r2, [pc, #176]	; (8000488 <HAL_UARTEx_RxEventCallback+0xd0>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d150      	bne.n	800047c <HAL_UARTEx_RxEventCallback+0xc4>
		if(Rx2_Buff[0] == 'A') {
 80003da:	4b2c      	ldr	r3, [pc, #176]	; (800048c <HAL_UARTEx_RxEventCallback+0xd4>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b41      	cmp	r3, #65	; 0x41
 80003e0:	d113      	bne.n	800040a <HAL_UARTEx_RxEventCallback+0x52>
		  Motor1_SP = (int)Rx2_Buff[1];
 80003e2:	4b2a      	ldr	r3, [pc, #168]	; (800048c <HAL_UARTEx_RxEventCallback+0xd4>)
 80003e4:	785b      	ldrb	r3, [r3, #1]
 80003e6:	461a      	mov	r2, r3
 80003e8:	4b29      	ldr	r3, [pc, #164]	; (8000490 <HAL_UARTEx_RxEventCallback+0xd8>)
 80003ea:	601a      	str	r2, [r3, #0]
		  ////////////////
		  Motor2_SP = (int)Rx2_Buff[2];
 80003ec:	4b27      	ldr	r3, [pc, #156]	; (800048c <HAL_UARTEx_RxEventCallback+0xd4>)
 80003ee:	789b      	ldrb	r3, [r3, #2]
 80003f0:	461a      	mov	r2, r3
 80003f2:	4b28      	ldr	r3, [pc, #160]	; (8000494 <HAL_UARTEx_RxEventCallback+0xdc>)
 80003f4:	601a      	str	r2, [r3, #0]
		  ////////////////
		  Motor3_SP = (int)Rx2_Buff[3];
 80003f6:	4b25      	ldr	r3, [pc, #148]	; (800048c <HAL_UARTEx_RxEventCallback+0xd4>)
 80003f8:	78db      	ldrb	r3, [r3, #3]
 80003fa:	461a      	mov	r2, r3
 80003fc:	4b26      	ldr	r3, [pc, #152]	; (8000498 <HAL_UARTEx_RxEventCallback+0xe0>)
 80003fe:	601a      	str	r2, [r3, #0]
		  ////////////////
		  Motor4_SP = (int)Rx2_Buff[4];
 8000400:	4b22      	ldr	r3, [pc, #136]	; (800048c <HAL_UARTEx_RxEventCallback+0xd4>)
 8000402:	791b      	ldrb	r3, [r3, #4]
 8000404:	461a      	mov	r2, r3
 8000406:	4b25      	ldr	r3, [pc, #148]	; (800049c <HAL_UARTEx_RxEventCallback+0xe4>)
 8000408:	601a      	str	r2, [r3, #0]
		}
		if(Rx2_Buff[0] == 'R') {
 800040a:	4b20      	ldr	r3, [pc, #128]	; (800048c <HAL_UARTEx_RxEventCallback+0xd4>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b52      	cmp	r3, #82	; 0x52
 8000410:	d12f      	bne.n	8000472 <HAL_UARTEx_RxEventCallback+0xba>
			int8_t tx_data[] = {
				(uint8_t) Motor1_FB  >> 8, (uint8_t) Motor1_FB  & 0xFF,
 8000412:	4b23      	ldr	r3, [pc, #140]	; (80004a0 <HAL_UARTEx_RxEventCallback+0xe8>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	b2db      	uxtb	r3, r3
 8000418:	121b      	asrs	r3, r3, #8
			int8_t tx_data[] = {
 800041a:	b25b      	sxtb	r3, r3
 800041c:	723b      	strb	r3, [r7, #8]
				(uint8_t) Motor1_FB  >> 8, (uint8_t) Motor1_FB  & 0xFF,
 800041e:	4b20      	ldr	r3, [pc, #128]	; (80004a0 <HAL_UARTEx_RxEventCallback+0xe8>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	b25b      	sxtb	r3, r3
			int8_t tx_data[] = {
 8000424:	727b      	strb	r3, [r7, #9]
				(uint8_t) Motor2_FB  >> 8, (uint8_t) Motor2_FB  & 0xFF,
 8000426:	4b1f      	ldr	r3, [pc, #124]	; (80004a4 <HAL_UARTEx_RxEventCallback+0xec>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	b2db      	uxtb	r3, r3
 800042c:	121b      	asrs	r3, r3, #8
			int8_t tx_data[] = {
 800042e:	b25b      	sxtb	r3, r3
 8000430:	72bb      	strb	r3, [r7, #10]
				(uint8_t) Motor2_FB  >> 8, (uint8_t) Motor2_FB  & 0xFF,
 8000432:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <HAL_UARTEx_RxEventCallback+0xec>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	b25b      	sxtb	r3, r3
			int8_t tx_data[] = {
 8000438:	72fb      	strb	r3, [r7, #11]
				(uint8_t) Motor3_FB  >> 8, (uint8_t) Motor3_FB  & 0xFF,
 800043a:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <HAL_UARTEx_RxEventCallback+0xf0>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	b2db      	uxtb	r3, r3
 8000440:	121b      	asrs	r3, r3, #8
			int8_t tx_data[] = {
 8000442:	b25b      	sxtb	r3, r3
 8000444:	733b      	strb	r3, [r7, #12]
				(uint8_t) Motor3_FB  >> 8, (uint8_t) Motor3_FB  & 0xFF,
 8000446:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <HAL_UARTEx_RxEventCallback+0xf0>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	b25b      	sxtb	r3, r3
			int8_t tx_data[] = {
 800044c:	737b      	strb	r3, [r7, #13]
				(uint8_t) Motor4_FB  >> 8, (uint8_t) Motor4_FB  & 0xFF
 800044e:	4b17      	ldr	r3, [pc, #92]	; (80004ac <HAL_UARTEx_RxEventCallback+0xf4>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	b2db      	uxtb	r3, r3
 8000454:	121b      	asrs	r3, r3, #8
			int8_t tx_data[] = {
 8000456:	b25b      	sxtb	r3, r3
 8000458:	73bb      	strb	r3, [r7, #14]
				(uint8_t) Motor4_FB  >> 8, (uint8_t) Motor4_FB  & 0xFF
 800045a:	4b14      	ldr	r3, [pc, #80]	; (80004ac <HAL_UARTEx_RxEventCallback+0xf4>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	b25b      	sxtb	r3, r3
			int8_t tx_data[] = {
 8000460:	73fb      	strb	r3, [r7, #15]
			};
			HAL_UART_Transmit(&huart2, tx_data, 8, PHY_FULLDUPLEX_10M);
 8000462:	f107 0108 	add.w	r1, r7, #8
 8000466:	f44f 7380 	mov.w	r3, #256	; 0x100
 800046a:	2208      	movs	r2, #8
 800046c:	4810      	ldr	r0, [pc, #64]	; (80004b0 <HAL_UARTEx_RxEventCallback+0xf8>)
 800046e:	f002 ff4d 	bl	800330c <HAL_UART_Transmit>
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx2_Buff, RX2_Size);
 8000472:	2205      	movs	r2, #5
 8000474:	4905      	ldr	r1, [pc, #20]	; (800048c <HAL_UARTEx_RxEventCallback+0xd4>)
 8000476:	480e      	ldr	r0, [pc, #56]	; (80004b0 <HAL_UARTEx_RxEventCallback+0xf8>)
 8000478:	f002 ffcb 	bl	8003412 <HAL_UARTEx_ReceiveToIdle_DMA>
//		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
	}
}
 800047c:	bf00      	nop
 800047e:	3710      	adds	r7, #16
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40011000 	.word	0x40011000
 8000488:	40004400 	.word	0x40004400
 800048c:	20000140 	.word	0x20000140
 8000490:	20000000 	.word	0x20000000
 8000494:	20000004 	.word	0x20000004
 8000498:	20000008 	.word	0x20000008
 800049c:	2000000c 	.word	0x2000000c
 80004a0:	20000148 	.word	0x20000148
 80004a4:	2000014c 	.word	0x2000014c
 80004a8:	20000150 	.word	0x20000150
 80004ac:	20000154 	.word	0x20000154
 80004b0:	200000f8 	.word	0x200000f8

080004b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b8:	f000 fca0 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004bc:	f000 f8fa 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c0:	f000 fa84 	bl	80009cc <MX_GPIO_Init>
  MX_ADC1_Init();
 80004c4:	f000 f946 	bl	8000754 <MX_ADC1_Init>
  MX_TIM4_Init();
 80004c8:	f000 f9e6 	bl	8000898 <MX_TIM4_Init>
  MX_TIM3_Init();
 80004cc:	f000 f980 	bl	80007d0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 fa52 	bl	8000978 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80004d4:	2104      	movs	r1, #4
 80004d6:	4865      	ldr	r0, [pc, #404]	; (800066c <main+0x1b8>)
 80004d8:	f002 faf8 	bl	8002acc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80004dc:	2108      	movs	r1, #8
 80004de:	4863      	ldr	r0, [pc, #396]	; (800066c <main+0x1b8>)
 80004e0:	f002 faf4 	bl	8002acc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80004e4:	210c      	movs	r1, #12
 80004e6:	4861      	ldr	r0, [pc, #388]	; (800066c <main+0x1b8>)
 80004e8:	f002 faf0 	bl	8002acc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80004ec:	2108      	movs	r1, #8
 80004ee:	4860      	ldr	r0, [pc, #384]	; (8000670 <main+0x1bc>)
 80004f0:	f002 faec 	bl	8002acc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80004f4:	210c      	movs	r1, #12
 80004f6:	485e      	ldr	r0, [pc, #376]	; (8000670 <main+0x1bc>)
 80004f8:	f002 fae8 	bl	8002acc <HAL_TIM_PWM_Start>
	HAL_ADC_Start(&hadc1);
 80004fc:	485d      	ldr	r0, [pc, #372]	; (8000674 <main+0x1c0>)
 80004fe:	f000 fddb 	bl	80010b8 <HAL_ADC_Start>
	motor1(0);
 8000502:	2000      	movs	r0, #0
 8000504:	f7ff fe4c 	bl	80001a0 <motor1>
	motor2(0);
 8000508:	2000      	movs	r0, #0
 800050a:	f7ff fe7d 	bl	8000208 <motor2>
	start_time = HAL_GetTick();
 800050e:	f000 fccd 	bl	8000eac <HAL_GetTick>
 8000512:	4603      	mov	r3, r0
 8000514:	461a      	mov	r2, r3
 8000516:	4b58      	ldr	r3, [pc, #352]	; (8000678 <main+0x1c4>)
 8000518:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 250);
 800051a:	4b55      	ldr	r3, [pc, #340]	; (8000670 <main+0x1bc>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	22fa      	movs	r2, #250	; 0xfa
 8000520:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 250);
 8000522:	4b53      	ldr	r3, [pc, #332]	; (8000670 <main+0x1bc>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	22fa      	movs	r2, #250	; 0xfa
 8000528:	641a      	str	r2, [r3, #64]	; 0x40
//	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 750);
//	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 750);

	///////////////////// default
	Motor1_SP = 3800;
 800052a:	4b54      	ldr	r3, [pc, #336]	; (800067c <main+0x1c8>)
 800052c:	f640 62d8 	movw	r2, #3800	; 0xed8
 8000530:	601a      	str	r2, [r3, #0]
	Motor2_SP = 3500;
 8000532:	4b53      	ldr	r3, [pc, #332]	; (8000680 <main+0x1cc>)
 8000534:	f640 52ac 	movw	r2, #3500	; 0xdac
 8000538:	601a      	str	r2, [r3, #0]
	Motor3_SP = 2000;
 800053a:	4b52      	ldr	r3, [pc, #328]	; (8000684 <main+0x1d0>)
 800053c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000540:	601a      	str	r2, [r3, #0]
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0); // PUL
//			HAL_Delay(5);
//		}
//	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1); // DIR
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000548:	484f      	ldr	r0, [pc, #316]	; (8000688 <main+0x1d4>)
 800054a:	f001 fcdb 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1); // ENA
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000554:	484c      	ldr	r0, [pc, #304]	; (8000688 <main+0x1d4>)
 8000556:	f001 fcd5 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1); // PUL
 800055a:	2201      	movs	r2, #1
 800055c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000560:	4849      	ldr	r0, [pc, #292]	; (8000688 <main+0x1d4>)
 8000562:	f001 fccf 	bl	8001f04 <HAL_GPIO_WritePin>
	motor1(0);
 8000566:	2000      	movs	r0, #0
 8000568:	f7ff fe1a 	bl	80001a0 <motor1>
	motor2(0);
 800056c:	2000      	movs	r0, #0
 800056e:	f7ff fe4b 	bl	8000208 <motor2>
	motor3(0);
 8000572:	2000      	movs	r0, #0
 8000574:	f7ff fe7c 	bl	8000270 <motor3>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx2_Buff, RX2_Size);
 8000578:	2205      	movs	r2, #5
 800057a:	4944      	ldr	r1, [pc, #272]	; (800068c <main+0x1d8>)
 800057c:	4844      	ldr	r0, [pc, #272]	; (8000690 <main+0x1dc>)
 800057e:	f002 ff48 	bl	8003412 <HAL_UARTEx_ReceiveToIdle_DMA>
//			}else{
//				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 250);
//			}
//		  }
//	  }
	Motor1_FB = read_adc(6);
 8000582:	2006      	movs	r0, #6
 8000584:	f7ff fde2 	bl	800014c <read_adc>
 8000588:	4603      	mov	r3, r0
 800058a:	4a42      	ldr	r2, [pc, #264]	; (8000694 <main+0x1e0>)
 800058c:	6013      	str	r3, [r2, #0]
	Motor2_FB = read_adc(5);
 800058e:	2005      	movs	r0, #5
 8000590:	f7ff fddc 	bl	800014c <read_adc>
 8000594:	4603      	mov	r3, r0
 8000596:	4a40      	ldr	r2, [pc, #256]	; (8000698 <main+0x1e4>)
 8000598:	6013      	str	r3, [r2, #0]
	Motor3_FB = read_adc(4);
 800059a:	2004      	movs	r0, #4
 800059c:	f7ff fdd6 	bl	800014c <read_adc>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a3e      	ldr	r2, [pc, #248]	; (800069c <main+0x1e8>)
 80005a4:	6013      	str	r3, [r2, #0]
	error1 = (Motor1_FB - Motor1_SP)*80;
 80005a6:	4b3b      	ldr	r3, [pc, #236]	; (8000694 <main+0x1e0>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a34      	ldr	r2, [pc, #208]	; (800067c <main+0x1c8>)
 80005ac:	6812      	ldr	r2, [r2, #0]
 80005ae:	1a9a      	subs	r2, r3, r2
 80005b0:	4613      	mov	r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	4413      	add	r3, r2
 80005b6:	011b      	lsls	r3, r3, #4
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b39      	ldr	r3, [pc, #228]	; (80006a0 <main+0x1ec>)
 80005bc:	601a      	str	r2, [r3, #0]
	if(error1 > -15000 && error1 < 15000) error1 = 0;
 80005be:	4b38      	ldr	r3, [pc, #224]	; (80006a0 <main+0x1ec>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a38      	ldr	r2, [pc, #224]	; (80006a4 <main+0x1f0>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	db08      	blt.n	80005da <main+0x126>
 80005c8:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <main+0x1ec>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f643 2297 	movw	r2, #14999	; 0x3a97
 80005d0:	4293      	cmp	r3, r2
 80005d2:	dc02      	bgt.n	80005da <main+0x126>
 80005d4:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <main+0x1ec>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
	motor1(error1);
 80005da:	4b31      	ldr	r3, [pc, #196]	; (80006a0 <main+0x1ec>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff fdde 	bl	80001a0 <motor1>

	error2 = -(Motor2_FB - Motor2_SP)*90;
 80005e4:	4b26      	ldr	r3, [pc, #152]	; (8000680 <main+0x1cc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <main+0x1e4>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	1ad3      	subs	r3, r2, r3
 80005f0:	225a      	movs	r2, #90	; 0x5a
 80005f2:	fb02 f303 	mul.w	r3, r2, r3
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <main+0x1f4>)
 80005fa:	601a      	str	r2, [r3, #0]
	if(error2 > -15000 && error2 < 15000) error2 = 0;
 80005fc:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <main+0x1f4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a28      	ldr	r2, [pc, #160]	; (80006a4 <main+0x1f0>)
 8000602:	4293      	cmp	r3, r2
 8000604:	db08      	blt.n	8000618 <main+0x164>
 8000606:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <main+0x1f4>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f643 2297 	movw	r2, #14999	; 0x3a97
 800060e:	4293      	cmp	r3, r2
 8000610:	dc02      	bgt.n	8000618 <main+0x164>
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <main+0x1f4>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
	motor2(error2);
 8000618:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <main+0x1f4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fdf3 	bl	8000208 <motor2>

	error3 = (Motor3_FB - Motor3_SP)*90;
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <main+0x1e8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <main+0x1d0>)
 8000628:	6812      	ldr	r2, [r2, #0]
 800062a:	1a9b      	subs	r3, r3, r2
 800062c:	225a      	movs	r2, #90	; 0x5a
 800062e:	fb02 f303 	mul.w	r3, r2, r3
 8000632:	461a      	mov	r2, r3
 8000634:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <main+0x1f8>)
 8000636:	601a      	str	r2, [r3, #0]
	if(error3 > -15000 && error3 < 15000) error3 = 0;
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <main+0x1f8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a19      	ldr	r2, [pc, #100]	; (80006a4 <main+0x1f0>)
 800063e:	4293      	cmp	r3, r2
 8000640:	db08      	blt.n	8000654 <main+0x1a0>
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <main+0x1f8>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f643 2297 	movw	r2, #14999	; 0x3a97
 800064a:	4293      	cmp	r3, r2
 800064c:	dc02      	bgt.n	8000654 <main+0x1a0>
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <main+0x1f8>)
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
	motor3(error3);
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <main+0x1f8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff fe09 	bl	8000270 <motor3>

	motor4(Motor4_SP);
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <main+0x1fc>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff fe38 	bl	80002d8 <motor4>
	Motor1_FB = read_adc(6);
 8000668:	e78b      	b.n	8000582 <main+0xce>
 800066a:	bf00      	nop
 800066c:	200000b0 	.word	0x200000b0
 8000670:	20000068 	.word	0x20000068
 8000674:	20000038 	.word	0x20000038
 8000678:	20000164 	.word	0x20000164
 800067c:	20000000 	.word	0x20000000
 8000680:	20000004 	.word	0x20000004
 8000684:	20000008 	.word	0x20000008
 8000688:	40010c00 	.word	0x40010c00
 800068c:	20000140 	.word	0x20000140
 8000690:	200000f8 	.word	0x200000f8
 8000694:	20000148 	.word	0x20000148
 8000698:	2000014c 	.word	0x2000014c
 800069c:	20000150 	.word	0x20000150
 80006a0:	20000158 	.word	0x20000158
 80006a4:	ffffc569 	.word	0xffffc569
 80006a8:	2000015c 	.word	0x2000015c
 80006ac:	20000160 	.word	0x20000160
 80006b0:	2000000c 	.word	0x2000000c

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006be:	2228      	movs	r2, #40	; 0x28
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fe32 	bl	800432c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 fc1b 	bl	8001f34 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000704:	f000 f9d0 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f001 fe88 	bl	8002438 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800072e:	f000 f9bb 	bl	8000aa8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000732:	2302      	movs	r3, #2
 8000734:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4618      	mov	r0, r3
 800073e:	f002 f809 	bl	8002754 <HAL_RCCEx_PeriphCLKConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000748:	f000 f9ae 	bl	8000aa8 <Error_Handler>
  }
}
 800074c:	bf00      	nop
 800074e:	3750      	adds	r7, #80	; 0x50
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_ADC1_Init+0x74>)
 8000766:	4a19      	ldr	r2, [pc, #100]	; (80007cc <MX_ADC1_Init+0x78>)
 8000768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_ADC1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_ADC1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_ADC1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_ADC1_Init+0x74>)
 800077e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000782:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000784:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_ADC1_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_ADC1_Init+0x74>)
 800078c:	2201      	movs	r2, #1
 800078e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <MX_ADC1_Init+0x74>)
 8000792:	f000 fbb9 	bl	8000f08 <HAL_ADC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800079c:	f000 f984 	bl	8000aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_ADC1_Init+0x74>)
 80007b2:	f000 fe41 	bl	8001438 <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007bc:	f000 f974 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000038 	.word	0x20000038
 80007cc:	40012400 	.word	0x40012400

080007d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007f2:	4b27      	ldr	r3, [pc, #156]	; (8000890 <MX_TIM3_Init+0xc0>)
 80007f4:	4a27      	ldr	r2, [pc, #156]	; (8000894 <MX_TIM3_Init+0xc4>)
 80007f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <MX_TIM3_Init+0xc0>)
 80007fa:	220f      	movs	r2, #15
 80007fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fe:	4b24      	ldr	r3, [pc, #144]	; (8000890 <MX_TIM3_Init+0xc0>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <MX_TIM3_Init+0xc0>)
 8000806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800080a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <MX_TIM3_Init+0xc0>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_TIM3_Init+0xc0>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000818:	481d      	ldr	r0, [pc, #116]	; (8000890 <MX_TIM3_Init+0xc0>)
 800081a:	f002 f907 	bl	8002a2c <HAL_TIM_PWM_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000824:	f000 f940 	bl	8000aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000830:	f107 0320 	add.w	r3, r7, #32
 8000834:	4619      	mov	r1, r3
 8000836:	4816      	ldr	r0, [pc, #88]	; (8000890 <MX_TIM3_Init+0xc0>)
 8000838:	f002 fcba 	bl	80031b0 <HAL_TIMEx_MasterConfigSynchronization>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000842:	f000 f931 	bl	8000aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000846:	2360      	movs	r3, #96	; 0x60
 8000848:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2208      	movs	r2, #8
 800085a:	4619      	mov	r1, r3
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <MX_TIM3_Init+0xc0>)
 800085e:	f002 f9d7 	bl	8002c10 <HAL_TIM_PWM_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000868:	f000 f91e 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	220c      	movs	r2, #12
 8000870:	4619      	mov	r1, r3
 8000872:	4807      	ldr	r0, [pc, #28]	; (8000890 <MX_TIM3_Init+0xc0>)
 8000874:	f002 f9cc 	bl	8002c10 <HAL_TIM_PWM_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800087e:	f000 f913 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000882:	4803      	ldr	r0, [pc, #12]	; (8000890 <MX_TIM3_Init+0xc0>)
 8000884:	f000 f9b6 	bl	8000bf4 <HAL_TIM_MspPostInit>

}
 8000888:	bf00      	nop
 800088a:	3728      	adds	r7, #40	; 0x28
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000068 	.word	0x20000068
 8000894:	40000400 	.word	0x40000400

08000898 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
 80008b6:	615a      	str	r2, [r3, #20]
 80008b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008ba:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <MX_TIM4_Init+0xd8>)
 80008bc:	4a2d      	ldr	r2, [pc, #180]	; (8000974 <MX_TIM4_Init+0xdc>)
 80008be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008c0:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <MX_TIM4_Init+0xd8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <MX_TIM4_Init+0xd8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008cc:	4b28      	ldr	r3, [pc, #160]	; (8000970 <MX_TIM4_Init+0xd8>)
 80008ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d4:	4b26      	ldr	r3, [pc, #152]	; (8000970 <MX_TIM4_Init+0xd8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008da:	4b25      	ldr	r3, [pc, #148]	; (8000970 <MX_TIM4_Init+0xd8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008e0:	4823      	ldr	r0, [pc, #140]	; (8000970 <MX_TIM4_Init+0xd8>)
 80008e2:	f002 f8a3 	bl	8002a2c <HAL_TIM_PWM_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80008ec:	f000 f8dc 	bl	8000aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008f8:	f107 0320 	add.w	r3, r7, #32
 80008fc:	4619      	mov	r1, r3
 80008fe:	481c      	ldr	r0, [pc, #112]	; (8000970 <MX_TIM4_Init+0xd8>)
 8000900:	f002 fc56 	bl	80031b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800090a:	f000 f8cd 	bl	8000aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800090e:	2360      	movs	r3, #96	; 0x60
 8000910:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2204      	movs	r2, #4
 8000922:	4619      	mov	r1, r3
 8000924:	4812      	ldr	r0, [pc, #72]	; (8000970 <MX_TIM4_Init+0xd8>)
 8000926:	f002 f973 	bl	8002c10 <HAL_TIM_PWM_ConfigChannel>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000930:	f000 f8ba 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2208      	movs	r2, #8
 8000938:	4619      	mov	r1, r3
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_TIM4_Init+0xd8>)
 800093c:	f002 f968 	bl	8002c10 <HAL_TIM_PWM_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000946:	f000 f8af 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	220c      	movs	r2, #12
 800094e:	4619      	mov	r1, r3
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <MX_TIM4_Init+0xd8>)
 8000952:	f002 f95d 	bl	8002c10 <HAL_TIM_PWM_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 800095c:	f000 f8a4 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000960:	4803      	ldr	r0, [pc, #12]	; (8000970 <MX_TIM4_Init+0xd8>)
 8000962:	f000 f947 	bl	8000bf4 <HAL_TIM_MspPostInit>

}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	; 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000b0 	.word	0x200000b0
 8000974:	40000800 	.word	0x40000800

08000978 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART2_UART_Init+0x4c>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <MX_USART2_UART_Init+0x50>)
 8000980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_USART2_UART_Init+0x4c>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART2_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART2_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART2_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART2_UART_Init+0x4c>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART2_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART2_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART2_UART_Init+0x4c>)
 80009b0:	f002 fc5c 	bl	800326c <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ba:	f000 f875 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200000f8 	.word	0x200000f8
 80009c8:	40004400 	.word	0x40004400

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e0:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <MX_GPIO_Init+0xd0>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a2d      	ldr	r2, [pc, #180]	; (8000a9c <MX_GPIO_Init+0xd0>)
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <MX_GPIO_Init+0xd0>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0310 	and.w	r3, r3, #16
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f8:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <MX_GPIO_Init+0xd0>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a27      	ldr	r2, [pc, #156]	; (8000a9c <MX_GPIO_Init+0xd0>)
 80009fe:	f043 0320 	orr.w	r3, r3, #32
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <MX_GPIO_Init+0xd0>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f003 0320 	and.w	r3, r3, #32
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <MX_GPIO_Init+0xd0>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a21      	ldr	r2, [pc, #132]	; (8000a9c <MX_GPIO_Init+0xd0>)
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <MX_GPIO_Init+0xd0>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f003 0304 	and.w	r3, r3, #4
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a28:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <MX_GPIO_Init+0xd0>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <MX_GPIO_Init+0xd0>)
 8000a2e:	f043 0308 	orr.w	r3, r3, #8
 8000a32:	6193      	str	r3, [r2, #24]
 8000a34:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <MX_GPIO_Init+0xd0>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	f003 0308 	and.w	r3, r3, #8
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a46:	4816      	ldr	r0, [pc, #88]	; (8000aa0 <MX_GPIO_Init+0xd4>)
 8000a48:	f001 fa5c 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f247 0138 	movw	r1, #28728	; 0x7038
 8000a52:	4814      	ldr	r0, [pc, #80]	; (8000aa4 <MX_GPIO_Init+0xd8>)
 8000a54:	f001 fa56 	bl	8001f04 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2302      	movs	r3, #2
 8000a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <MX_GPIO_Init+0xd4>)
 8000a72:	f001 f8c3 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_3
 8000a76:	f247 0338 	movw	r3, #28728	; 0x7038
 8000a7a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_GPIO_Init+0xd8>)
 8000a90:	f001 f8b4 	bl	8001bfc <HAL_GPIO_Init>

}
 8000a94:	bf00      	nop
 8000a96:	3720      	adds	r7, #32
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40011000 	.word	0x40011000
 8000aa4:	40010c00 	.word	0x40010c00

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <Error_Handler+0x8>
	...

08000ab4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_MspInit+0x5c>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <HAL_MspInit+0x5c>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6193      	str	r3, [r2, #24]
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_MspInit+0x5c>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_MspInit+0x5c>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <HAL_MspInit+0x5c>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	61d3      	str	r3, [r2, #28]
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_MspInit+0x5c>)
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_MspInit+0x60>)
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <HAL_MspInit+0x60>)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010000 	.word	0x40010000

08000b18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <HAL_ADC_MspInit+0x6c>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d121      	bne.n	8000b7c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <HAL_ADC_MspInit+0x70>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <HAL_ADC_MspInit+0x70>)
 8000b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <HAL_ADC_MspInit+0x70>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <HAL_ADC_MspInit+0x70>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <HAL_ADC_MspInit+0x70>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_ADC_MspInit+0x70>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000b68:	2370      	movs	r3, #112	; 0x70
 8000b6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4619      	mov	r1, r3
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <HAL_ADC_MspInit+0x74>)
 8000b78:	f001 f840 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b7c:	bf00      	nop
 8000b7e:	3720      	adds	r7, #32
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40012400 	.word	0x40012400
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010800 	.word	0x40010800

08000b90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <HAL_TIM_PWM_MspInit+0x58>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d10c      	bne.n	8000bbc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_TIM_PWM_MspInit+0x5c>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	4a11      	ldr	r2, [pc, #68]	; (8000bec <HAL_TIM_PWM_MspInit+0x5c>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	61d3      	str	r3, [r2, #28]
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_TIM_PWM_MspInit+0x5c>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000bba:	e010      	b.n	8000bde <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <HAL_TIM_PWM_MspInit+0x60>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d10b      	bne.n	8000bde <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_TIM_PWM_MspInit+0x5c>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_TIM_PWM_MspInit+0x5c>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	61d3      	str	r3, [r2, #28]
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_TIM_PWM_MspInit+0x5c>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
}
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	40000400 	.word	0x40000400
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40000800 	.word	0x40000800

08000bf4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1f      	ldr	r2, [pc, #124]	; (8000c8c <HAL_TIM_MspPostInit+0x98>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d118      	bne.n	8000c46 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <HAL_TIM_MspPostInit+0x9c>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a1d      	ldr	r2, [pc, #116]	; (8000c90 <HAL_TIM_MspPostInit+0x9c>)
 8000c1a:	f043 0308 	orr.w	r3, r3, #8
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <HAL_TIM_MspPostInit+0x9c>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0308 	and.w	r3, r3, #8
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2302      	movs	r3, #2
 8000c36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4815      	ldr	r0, [pc, #84]	; (8000c94 <HAL_TIM_MspPostInit+0xa0>)
 8000c40:	f000 ffdc 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c44:	e01d      	b.n	8000c82 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM4)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <HAL_TIM_MspPostInit+0xa4>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d118      	bne.n	8000c82 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <HAL_TIM_MspPostInit+0x9c>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <HAL_TIM_MspPostInit+0x9c>)
 8000c56:	f043 0308 	orr.w	r3, r3, #8
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <HAL_TIM_MspPostInit+0x9c>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f003 0308 	and.w	r3, r3, #8
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000c68:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000c6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c76:	f107 0310 	add.w	r3, r7, #16
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4805      	ldr	r0, [pc, #20]	; (8000c94 <HAL_TIM_MspPostInit+0xa0>)
 8000c7e:	f000 ffbd 	bl	8001bfc <HAL_GPIO_Init>
}
 8000c82:	bf00      	nop
 8000c84:	3720      	adds	r7, #32
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40000400 	.word	0x40000400
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40010c00 	.word	0x40010c00
 8000c98:	40000800 	.word	0x40000800

08000c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b088      	sub	sp, #32
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a1f      	ldr	r2, [pc, #124]	; (8000d34 <HAL_UART_MspInit+0x98>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d137      	bne.n	8000d2c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <HAL_UART_MspInit+0x9c>)
 8000cbe:	69db      	ldr	r3, [r3, #28]
 8000cc0:	4a1d      	ldr	r2, [pc, #116]	; (8000d38 <HAL_UART_MspInit+0x9c>)
 8000cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc6:	61d3      	str	r3, [r2, #28]
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <HAL_UART_MspInit+0x9c>)
 8000cca:	69db      	ldr	r3, [r3, #28]
 8000ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <HAL_UART_MspInit+0x9c>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a17      	ldr	r2, [pc, #92]	; (8000d38 <HAL_UART_MspInit+0x9c>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <HAL_UART_MspInit+0x9c>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cec:	2304      	movs	r3, #4
 8000cee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480f      	ldr	r0, [pc, #60]	; (8000d3c <HAL_UART_MspInit+0xa0>)
 8000d00:	f000 ff7c 	bl	8001bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d04:	2308      	movs	r3, #8
 8000d06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	4619      	mov	r1, r3
 8000d16:	4809      	ldr	r0, [pc, #36]	; (8000d3c <HAL_UART_MspInit+0xa0>)
 8000d18:	f000 ff70 	bl	8001bfc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2026      	movs	r0, #38	; 0x26
 8000d22:	f000 fdf4 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d26:	2026      	movs	r0, #38	; 0x26
 8000d28:	f000 fe0d 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40004400 	.word	0x40004400
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010800 	.word	0x40010800

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr

08000d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d86:	f000 f87f 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <USART2_IRQHandler+0x10>)
 8000d96:	f002 fb99 	bl	80034cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200000f8 	.word	0x200000f8

08000da4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db0:	f7ff fff8 	bl	8000da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db4:	480b      	ldr	r0, [pc, #44]	; (8000de4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000db6:	490c      	ldr	r1, [pc, #48]	; (8000de8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000db8:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dcc:	4c09      	ldr	r4, [pc, #36]	; (8000df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dda:	f003 fa83 	bl	80042e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dde:	f7ff fb69 	bl	80004b4 <main>
  bx lr
 8000de2:	4770      	bx	lr
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000dec:	0800439c 	.word	0x0800439c
  ldr r2, =_sbss
 8000df0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000df4:	2000016c 	.word	0x2000016c

08000df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC1_2_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_Init+0x28>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <HAL_Init+0x28>)
 8000e06:	f043 0310 	orr.w	r3, r3, #16
 8000e0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f000 fd73 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e12:	200f      	movs	r0, #15
 8000e14:	f000 f808 	bl	8000e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e18:	f7ff fe4c 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40022000 	.word	0x40022000

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x54>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x58>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 fd8b 	bl	8001962 <HAL_SYSTICK_Config>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00e      	b.n	8000e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d80a      	bhi.n	8000e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f000 fd53 	bl	800190e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <HAL_InitTick+0x5c>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e000      	b.n	8000e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000010 	.word	0x20000010
 8000e80:	20000018 	.word	0x20000018
 8000e84:	20000014 	.word	0x20000014

08000e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_IncTick+0x1c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a03      	ldr	r2, [pc, #12]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e9a:	6013      	str	r3, [r2, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	20000018 	.word	0x20000018
 8000ea8:	20000168 	.word	0x20000168

08000eac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b02      	ldr	r3, [pc, #8]	; (8000ebc <HAL_GetTick+0x10>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	20000168 	.word	0x20000168

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff fff0 	bl	8000eac <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_Delay+0x44>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff ffe0 	bl	8000eac <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f7      	bhi.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000018 	.word	0x20000018

08000f08 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e0be      	b.n	80010a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d109      	bne.n	8000f4c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff fde6 	bl	8000b18 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 fbc5 	bl	80016dc <ADC_ConversionStop_Disable>
 8000f52:	4603      	mov	r3, r0
 8000f54:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f040 8099 	bne.w	8001096 <HAL_ADC_Init+0x18e>
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f040 8095 	bne.w	8001096 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f74:	f023 0302 	bic.w	r3, r3, #2
 8000f78:	f043 0202 	orr.w	r2, r3, #2
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f88:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	7b1b      	ldrb	r3, [r3, #12]
 8000f8e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f90:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fa0:	d003      	beq.n	8000faa <HAL_ADC_Init+0xa2>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d102      	bne.n	8000fb0 <HAL_ADC_Init+0xa8>
 8000faa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fae:	e000      	b.n	8000fb2 <HAL_ADC_Init+0xaa>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7d1b      	ldrb	r3, [r3, #20]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d119      	bne.n	8000ff4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7b1b      	ldrb	r3, [r3, #12]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d109      	bne.n	8000fdc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	035a      	lsls	r2, r3, #13
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	e00b      	b.n	8000ff4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe0:	f043 0220 	orr.w	r2, r3, #32
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fec:	f043 0201 	orr.w	r2, r3, #1
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	430a      	orrs	r2, r1
 8001006:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <HAL_ADC_Init+0x1a8>)
 8001010:	4013      	ands	r3, r2
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	6812      	ldr	r2, [r2, #0]
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	430b      	orrs	r3, r1
 800101a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001024:	d003      	beq.n	800102e <HAL_ADC_Init+0x126>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d104      	bne.n	8001038 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	3b01      	subs	r3, #1
 8001034:	051b      	lsls	r3, r3, #20
 8001036:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	430a      	orrs	r2, r1
 800104a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_ADC_Init+0x1ac>)
 8001054:	4013      	ands	r3, r2
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	429a      	cmp	r2, r3
 800105a:	d10b      	bne.n	8001074 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001066:	f023 0303 	bic.w	r3, r3, #3
 800106a:	f043 0201 	orr.w	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001072:	e018      	b.n	80010a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001078:	f023 0312 	bic.w	r3, r3, #18
 800107c:	f043 0210 	orr.w	r2, r3, #16
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001088:	f043 0201 	orr.w	r2, r3, #1
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001094:	e007      	b.n	80010a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109a:	f043 0210 	orr.w	r2, r3, #16
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	ffe1f7fd 	.word	0xffe1f7fd
 80010b4:	ff1f0efe 	.word	0xff1f0efe

080010b8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d101      	bne.n	80010d2 <HAL_ADC_Start+0x1a>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e098      	b.n	8001204 <HAL_ADC_Start+0x14c>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 faa4 	bl	8001628 <ADC_Enable>
 80010e0:	4603      	mov	r3, r0
 80010e2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f040 8087 	bne.w	80011fa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010f4:	f023 0301 	bic.w	r3, r3, #1
 80010f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a41      	ldr	r2, [pc, #260]	; (800120c <HAL_ADC_Start+0x154>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d105      	bne.n	8001116 <HAL_ADC_Start+0x5e>
 800110a:	4b41      	ldr	r3, [pc, #260]	; (8001210 <HAL_ADC_Start+0x158>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d115      	bne.n	8001142 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112c:	2b00      	cmp	r3, #0
 800112e:	d026      	beq.n	800117e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001134:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001138:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001140:	e01d      	b.n	800117e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001146:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a2f      	ldr	r2, [pc, #188]	; (8001210 <HAL_ADC_Start+0x158>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d004      	beq.n	8001162 <HAL_ADC_Start+0xaa>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a2b      	ldr	r2, [pc, #172]	; (800120c <HAL_ADC_Start+0x154>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d10d      	bne.n	800117e <HAL_ADC_Start+0xc6>
 8001162:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <HAL_ADC_Start+0x158>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116a:	2b00      	cmp	r3, #0
 800116c:	d007      	beq.n	800117e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001172:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001176:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d006      	beq.n	8001198 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118e:	f023 0206 	bic.w	r2, r3, #6
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	62da      	str	r2, [r3, #44]	; 0x2c
 8001196:	e002      	b.n	800119e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f06f 0202 	mvn.w	r2, #2
 80011ae:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011ba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011be:	d113      	bne.n	80011e8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011c4:	4a11      	ldr	r2, [pc, #68]	; (800120c <HAL_ADC_Start+0x154>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d105      	bne.n	80011d6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_ADC_Start+0x158>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d108      	bne.n	80011e8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	e00c      	b.n	8001202 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	e003      	b.n	8001202 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001202:	7bfb      	ldrb	r3, [r7, #15]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40012800 	.word	0x40012800
 8001210:	40012400 	.word	0x40012400

08001214 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800122a:	f7ff fe3f 	bl	8000eac <HAL_GetTick>
 800122e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00b      	beq.n	8001256 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001242:	f043 0220 	orr.w	r2, r3, #32
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e0d3      	b.n	80013fe <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001260:	2b00      	cmp	r3, #0
 8001262:	d131      	bne.n	80012c8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800126e:	2b00      	cmp	r3, #0
 8001270:	d12a      	bne.n	80012c8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001272:	e021      	b.n	80012b8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127a:	d01d      	beq.n	80012b8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <HAL_ADC_PollForConversion+0x7e>
 8001282:	f7ff fe13 	bl	8000eac <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d212      	bcs.n	80012b8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10b      	bne.n	80012b8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a4:	f043 0204 	orr.w	r2, r3, #4
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e0a2      	b.n	80013fe <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0d6      	beq.n	8001274 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80012c6:	e070      	b.n	80013aa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80012c8:	4b4f      	ldr	r3, [pc, #316]	; (8001408 <HAL_ADC_PollForConversion+0x1f4>)
 80012ca:	681c      	ldr	r4, [r3, #0]
 80012cc:	2002      	movs	r0, #2
 80012ce:	f001 faf7 	bl	80028c0 <HAL_RCCEx_GetPeriphCLKFreq>
 80012d2:	4603      	mov	r3, r0
 80012d4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6919      	ldr	r1, [r3, #16]
 80012de:	4b4b      	ldr	r3, [pc, #300]	; (800140c <HAL_ADC_PollForConversion+0x1f8>)
 80012e0:	400b      	ands	r3, r1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d118      	bne.n	8001318 <HAL_ADC_PollForConversion+0x104>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68d9      	ldr	r1, [r3, #12]
 80012ec:	4b48      	ldr	r3, [pc, #288]	; (8001410 <HAL_ADC_PollForConversion+0x1fc>)
 80012ee:	400b      	ands	r3, r1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d111      	bne.n	8001318 <HAL_ADC_PollForConversion+0x104>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6919      	ldr	r1, [r3, #16]
 80012fa:	4b46      	ldr	r3, [pc, #280]	; (8001414 <HAL_ADC_PollForConversion+0x200>)
 80012fc:	400b      	ands	r3, r1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d108      	bne.n	8001314 <HAL_ADC_PollForConversion+0x100>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68d9      	ldr	r1, [r3, #12]
 8001308:	4b43      	ldr	r3, [pc, #268]	; (8001418 <HAL_ADC_PollForConversion+0x204>)
 800130a:	400b      	ands	r3, r1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <HAL_ADC_PollForConversion+0x100>
 8001310:	2314      	movs	r3, #20
 8001312:	e020      	b.n	8001356 <HAL_ADC_PollForConversion+0x142>
 8001314:	2329      	movs	r3, #41	; 0x29
 8001316:	e01e      	b.n	8001356 <HAL_ADC_PollForConversion+0x142>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6919      	ldr	r1, [r3, #16]
 800131e:	4b3d      	ldr	r3, [pc, #244]	; (8001414 <HAL_ADC_PollForConversion+0x200>)
 8001320:	400b      	ands	r3, r1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d106      	bne.n	8001334 <HAL_ADC_PollForConversion+0x120>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68d9      	ldr	r1, [r3, #12]
 800132c:	4b3a      	ldr	r3, [pc, #232]	; (8001418 <HAL_ADC_PollForConversion+0x204>)
 800132e:	400b      	ands	r3, r1
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00d      	beq.n	8001350 <HAL_ADC_PollForConversion+0x13c>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6919      	ldr	r1, [r3, #16]
 800133a:	4b38      	ldr	r3, [pc, #224]	; (800141c <HAL_ADC_PollForConversion+0x208>)
 800133c:	400b      	ands	r3, r1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d108      	bne.n	8001354 <HAL_ADC_PollForConversion+0x140>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68d9      	ldr	r1, [r3, #12]
 8001348:	4b34      	ldr	r3, [pc, #208]	; (800141c <HAL_ADC_PollForConversion+0x208>)
 800134a:	400b      	ands	r3, r1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <HAL_ADC_PollForConversion+0x140>
 8001350:	2354      	movs	r3, #84	; 0x54
 8001352:	e000      	b.n	8001356 <HAL_ADC_PollForConversion+0x142>
 8001354:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001356:	fb02 f303 	mul.w	r3, r2, r3
 800135a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800135c:	e021      	b.n	80013a2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d01a      	beq.n	800139c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d007      	beq.n	800137c <HAL_ADC_PollForConversion+0x168>
 800136c:	f7ff fd9e 	bl	8000eac <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d20f      	bcs.n	800139c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	429a      	cmp	r2, r3
 8001382:	d90b      	bls.n	800139c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	f043 0204 	orr.w	r2, r3, #4
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e030      	b.n	80013fe <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3301      	adds	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d8d9      	bhi.n	800135e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f06f 0212 	mvn.w	r2, #18
 80013b2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013ce:	d115      	bne.n	80013fc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d111      	bne.n	80013fc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d105      	bne.n	80013fc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	f043 0201 	orr.w	r2, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd90      	pop	{r4, r7, pc}
 8001406:	bf00      	nop
 8001408:	20000010 	.word	0x20000010
 800140c:	24924924 	.word	0x24924924
 8001410:	00924924 	.word	0x00924924
 8001414:	12492492 	.word	0x12492492
 8001418:	00492492 	.word	0x00492492
 800141c:	00249249 	.word	0x00249249

08001420 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001450:	2b01      	cmp	r3, #1
 8001452:	d101      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x20>
 8001454:	2302      	movs	r3, #2
 8001456:	e0dc      	b.n	8001612 <HAL_ADC_ConfigChannel+0x1da>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b06      	cmp	r3, #6
 8001466:	d81c      	bhi.n	80014a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	3b05      	subs	r3, #5
 800147a:	221f      	movs	r2, #31
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	4019      	ands	r1, r3
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	6818      	ldr	r0, [r3, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	3b05      	subs	r3, #5
 8001494:	fa00 f203 	lsl.w	r2, r0, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	635a      	str	r2, [r3, #52]	; 0x34
 80014a0:	e03c      	b.n	800151c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b0c      	cmp	r3, #12
 80014a8:	d81c      	bhi.n	80014e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	3b23      	subs	r3, #35	; 0x23
 80014bc:	221f      	movs	r2, #31
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	4019      	ands	r1, r3
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	6818      	ldr	r0, [r3, #0]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	3b23      	subs	r3, #35	; 0x23
 80014d6:	fa00 f203 	lsl.w	r2, r0, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	631a      	str	r2, [r3, #48]	; 0x30
 80014e2:	e01b      	b.n	800151c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	3b41      	subs	r3, #65	; 0x41
 80014f6:	221f      	movs	r2, #31
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	4019      	ands	r1, r3
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	3b41      	subs	r3, #65	; 0x41
 8001510:	fa00 f203 	lsl.w	r2, r0, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b09      	cmp	r3, #9
 8001522:	d91c      	bls.n	800155e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68d9      	ldr	r1, [r3, #12]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	3b1e      	subs	r3, #30
 8001536:	2207      	movs	r2, #7
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	4019      	ands	r1, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	6898      	ldr	r0, [r3, #8]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	3b1e      	subs	r3, #30
 8001550:	fa00 f203 	lsl.w	r2, r0, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	e019      	b.n	8001592 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6919      	ldr	r1, [r3, #16]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4613      	mov	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4413      	add	r3, r2
 800156e:	2207      	movs	r2, #7
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	4019      	ands	r1, r3
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	6898      	ldr	r0, [r3, #8]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	fa00 f203 	lsl.w	r2, r0, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b10      	cmp	r3, #16
 8001598:	d003      	beq.n	80015a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800159e:	2b11      	cmp	r3, #17
 80015a0:	d132      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a1d      	ldr	r2, [pc, #116]	; (800161c <HAL_ADC_ConfigChannel+0x1e4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d125      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d126      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80015c8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b10      	cmp	r3, #16
 80015d0:	d11a      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_ADC_ConfigChannel+0x1e8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a13      	ldr	r2, [pc, #76]	; (8001624 <HAL_ADC_ConfigChannel+0x1ec>)
 80015d8:	fba2 2303 	umull	r2, r3, r2, r3
 80015dc:	0c9a      	lsrs	r2, r3, #18
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015e8:	e002      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f9      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x1b2>
 80015f6:	e007      	b.n	8001608 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	f043 0220 	orr.w	r2, r3, #32
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	40012400 	.word	0x40012400
 8001620:	20000010 	.word	0x20000010
 8001624:	431bde83 	.word	0x431bde83

08001628 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b01      	cmp	r3, #1
 8001644:	d040      	beq.n	80016c8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f042 0201 	orr.w	r2, r2, #1
 8001654:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001656:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <ADC_Enable+0xac>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a1f      	ldr	r2, [pc, #124]	; (80016d8 <ADC_Enable+0xb0>)
 800165c:	fba2 2303 	umull	r2, r3, r2, r3
 8001660:	0c9b      	lsrs	r3, r3, #18
 8001662:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001664:	e002      	b.n	800166c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	3b01      	subs	r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f9      	bne.n	8001666 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001672:	f7ff fc1b 	bl	8000eac <HAL_GetTick>
 8001676:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001678:	e01f      	b.n	80016ba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800167a:	f7ff fc17 	bl	8000eac <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d918      	bls.n	80016ba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b01      	cmp	r3, #1
 8001694:	d011      	beq.n	80016ba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	f043 0210 	orr.w	r2, r3, #16
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	f043 0201 	orr.w	r2, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e007      	b.n	80016ca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d1d8      	bne.n	800167a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000010 	.word	0x20000010
 80016d8:	431bde83 	.word	0x431bde83

080016dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d12e      	bne.n	8001754 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0201 	bic.w	r2, r2, #1
 8001704:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001706:	f7ff fbd1 	bl	8000eac <HAL_GetTick>
 800170a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800170c:	e01b      	b.n	8001746 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800170e:	f7ff fbcd 	bl	8000eac <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d914      	bls.n	8001746 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b01      	cmp	r3, #1
 8001728:	d10d      	bne.n	8001746 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172e:	f043 0210 	orr.w	r2, r3, #16
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	f043 0201 	orr.w	r2, r3, #1
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e007      	b.n	8001756 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b01      	cmp	r3, #1
 8001752:	d0dc      	beq.n	800170e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4906      	ldr	r1, [pc, #24]	; (80017f8 <__NVIC_EnableIRQ+0x34>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f7ff ff90 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff2d 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff42 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff90 	bl	8001850 <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5f 	bl	80017fc <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff35 	bl	80017c4 <__NVIC_EnableIRQ>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffa2 	bl	80018b4 <SysTick_Config>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <HAL_DMA_Start_IT+0x20>
 8001996:	2302      	movs	r3, #2
 8001998:	e04b      	b.n	8001a32 <HAL_DMA_Start_IT+0xb8>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d13a      	bne.n	8001a24 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2202      	movs	r2, #2
 80019b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2200      	movs	r2, #0
 80019ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0201 	bic.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 f8e4 	bl	8001ba0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 020e 	orr.w	r2, r2, #14
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	e00f      	b.n	8001a12 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0204 	bic.w	r2, r2, #4
 8001a00:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f042 020a 	orr.w	r2, r2, #10
 8001a10:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 0201 	orr.w	r2, r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	e005      	b.n	8001a30 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b085      	sub	sp, #20
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d008      	beq.n	8001a64 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2204      	movs	r2, #4
 8001a56:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e020      	b.n	8001aa6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 020e 	bic.w	r2, r2, #14
 8001a72:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0201 	bic.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a92:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d005      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2204      	movs	r2, #4
 8001acc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	73fb      	strb	r3, [r7, #15]
 8001ad2:	e051      	b.n	8001b78 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 020e 	bic.w	r2, r2, #14
 8001ae2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0201 	bic.w	r2, r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a22      	ldr	r2, [pc, #136]	; (8001b84 <HAL_DMA_Abort_IT+0xd4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d029      	beq.n	8001b52 <HAL_DMA_Abort_IT+0xa2>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a21      	ldr	r2, [pc, #132]	; (8001b88 <HAL_DMA_Abort_IT+0xd8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d022      	beq.n	8001b4e <HAL_DMA_Abort_IT+0x9e>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1f      	ldr	r2, [pc, #124]	; (8001b8c <HAL_DMA_Abort_IT+0xdc>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d01a      	beq.n	8001b48 <HAL_DMA_Abort_IT+0x98>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1e      	ldr	r2, [pc, #120]	; (8001b90 <HAL_DMA_Abort_IT+0xe0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d012      	beq.n	8001b42 <HAL_DMA_Abort_IT+0x92>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a1c      	ldr	r2, [pc, #112]	; (8001b94 <HAL_DMA_Abort_IT+0xe4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00a      	beq.n	8001b3c <HAL_DMA_Abort_IT+0x8c>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <HAL_DMA_Abort_IT+0xe8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d102      	bne.n	8001b36 <HAL_DMA_Abort_IT+0x86>
 8001b30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b34:	e00e      	b.n	8001b54 <HAL_DMA_Abort_IT+0xa4>
 8001b36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b3a:	e00b      	b.n	8001b54 <HAL_DMA_Abort_IT+0xa4>
 8001b3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b40:	e008      	b.n	8001b54 <HAL_DMA_Abort_IT+0xa4>
 8001b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b46:	e005      	b.n	8001b54 <HAL_DMA_Abort_IT+0xa4>
 8001b48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b4c:	e002      	b.n	8001b54 <HAL_DMA_Abort_IT+0xa4>
 8001b4e:	2310      	movs	r3, #16
 8001b50:	e000      	b.n	8001b54 <HAL_DMA_Abort_IT+0xa4>
 8001b52:	2301      	movs	r3, #1
 8001b54:	4a11      	ldr	r2, [pc, #68]	; (8001b9c <HAL_DMA_Abort_IT+0xec>)
 8001b56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	4798      	blx	r3
    } 
  }
  return status;
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40020008 	.word	0x40020008
 8001b88:	4002001c 	.word	0x4002001c
 8001b8c:	40020030 	.word	0x40020030
 8001b90:	40020044 	.word	0x40020044
 8001b94:	40020058 	.word	0x40020058
 8001b98:	4002006c 	.word	0x4002006c
 8001b9c:	40020000 	.word	0x40020000

08001ba0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bbc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b10      	cmp	r3, #16
 8001bcc:	d108      	bne.n	8001be0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bde:	e007      	b.n	8001bf0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	60da      	str	r2, [r3, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b08b      	sub	sp, #44	; 0x2c
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0e:	e169      	b.n	8001ee4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c10:	2201      	movs	r2, #1
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	f040 8158 	bne.w	8001ede <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4a9a      	ldr	r2, [pc, #616]	; (8001e9c <HAL_GPIO_Init+0x2a0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d05e      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c38:	4a98      	ldr	r2, [pc, #608]	; (8001e9c <HAL_GPIO_Init+0x2a0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d875      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c3e:	4a98      	ldr	r2, [pc, #608]	; (8001ea0 <HAL_GPIO_Init+0x2a4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d058      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c44:	4a96      	ldr	r2, [pc, #600]	; (8001ea0 <HAL_GPIO_Init+0x2a4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d86f      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c4a:	4a96      	ldr	r2, [pc, #600]	; (8001ea4 <HAL_GPIO_Init+0x2a8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d052      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c50:	4a94      	ldr	r2, [pc, #592]	; (8001ea4 <HAL_GPIO_Init+0x2a8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d869      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c56:	4a94      	ldr	r2, [pc, #592]	; (8001ea8 <HAL_GPIO_Init+0x2ac>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d04c      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c5c:	4a92      	ldr	r2, [pc, #584]	; (8001ea8 <HAL_GPIO_Init+0x2ac>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d863      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c62:	4a92      	ldr	r2, [pc, #584]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d046      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
 8001c68:	4a90      	ldr	r2, [pc, #576]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d85d      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c6e:	2b12      	cmp	r3, #18
 8001c70:	d82a      	bhi.n	8001cc8 <HAL_GPIO_Init+0xcc>
 8001c72:	2b12      	cmp	r3, #18
 8001c74:	d859      	bhi.n	8001d2a <HAL_GPIO_Init+0x12e>
 8001c76:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <HAL_GPIO_Init+0x80>)
 8001c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7c:	08001cf7 	.word	0x08001cf7
 8001c80:	08001cd1 	.word	0x08001cd1
 8001c84:	08001ce3 	.word	0x08001ce3
 8001c88:	08001d25 	.word	0x08001d25
 8001c8c:	08001d2b 	.word	0x08001d2b
 8001c90:	08001d2b 	.word	0x08001d2b
 8001c94:	08001d2b 	.word	0x08001d2b
 8001c98:	08001d2b 	.word	0x08001d2b
 8001c9c:	08001d2b 	.word	0x08001d2b
 8001ca0:	08001d2b 	.word	0x08001d2b
 8001ca4:	08001d2b 	.word	0x08001d2b
 8001ca8:	08001d2b 	.word	0x08001d2b
 8001cac:	08001d2b 	.word	0x08001d2b
 8001cb0:	08001d2b 	.word	0x08001d2b
 8001cb4:	08001d2b 	.word	0x08001d2b
 8001cb8:	08001d2b 	.word	0x08001d2b
 8001cbc:	08001d2b 	.word	0x08001d2b
 8001cc0:	08001cd9 	.word	0x08001cd9
 8001cc4:	08001ced 	.word	0x08001ced
 8001cc8:	4a79      	ldr	r2, [pc, #484]	; (8001eb0 <HAL_GPIO_Init+0x2b4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cce:	e02c      	b.n	8001d2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	623b      	str	r3, [r7, #32]
          break;
 8001cd6:	e029      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	623b      	str	r3, [r7, #32]
          break;
 8001ce0:	e024      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	3308      	adds	r3, #8
 8001ce8:	623b      	str	r3, [r7, #32]
          break;
 8001cea:	e01f      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	330c      	adds	r3, #12
 8001cf2:	623b      	str	r3, [r7, #32]
          break;
 8001cf4:	e01a      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cfe:	2304      	movs	r3, #4
 8001d00:	623b      	str	r3, [r7, #32]
          break;
 8001d02:	e013      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d105      	bne.n	8001d18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	611a      	str	r2, [r3, #16]
          break;
 8001d16:	e009      	b.n	8001d2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d18:	2308      	movs	r3, #8
 8001d1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	615a      	str	r2, [r3, #20]
          break;
 8001d22:	e003      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
          break;
 8001d28:	e000      	b.n	8001d2c <HAL_GPIO_Init+0x130>
          break;
 8001d2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2bff      	cmp	r3, #255	; 0xff
 8001d30:	d801      	bhi.n	8001d36 <HAL_GPIO_Init+0x13a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	e001      	b.n	8001d3a <HAL_GPIO_Init+0x13e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2bff      	cmp	r3, #255	; 0xff
 8001d40:	d802      	bhi.n	8001d48 <HAL_GPIO_Init+0x14c>
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	e002      	b.n	8001d4e <HAL_GPIO_Init+0x152>
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	3b08      	subs	r3, #8
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	210f      	movs	r1, #15
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	401a      	ands	r2, r3
 8001d60:	6a39      	ldr	r1, [r7, #32]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80b1 	beq.w	8001ede <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d7c:	4b4d      	ldr	r3, [pc, #308]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a4c      	ldr	r2, [pc, #304]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b4a      	ldr	r3, [pc, #296]	; (8001eb4 <HAL_GPIO_Init+0x2b8>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d94:	4a48      	ldr	r2, [pc, #288]	; (8001eb8 <HAL_GPIO_Init+0x2bc>)
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	220f      	movs	r2, #15
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a40      	ldr	r2, [pc, #256]	; (8001ebc <HAL_GPIO_Init+0x2c0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d013      	beq.n	8001de8 <HAL_GPIO_Init+0x1ec>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a3f      	ldr	r2, [pc, #252]	; (8001ec0 <HAL_GPIO_Init+0x2c4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00d      	beq.n	8001de4 <HAL_GPIO_Init+0x1e8>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a3e      	ldr	r2, [pc, #248]	; (8001ec4 <HAL_GPIO_Init+0x2c8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d007      	beq.n	8001de0 <HAL_GPIO_Init+0x1e4>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a3d      	ldr	r2, [pc, #244]	; (8001ec8 <HAL_GPIO_Init+0x2cc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d101      	bne.n	8001ddc <HAL_GPIO_Init+0x1e0>
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e006      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001ddc:	2304      	movs	r3, #4
 8001dde:	e004      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e002      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <HAL_GPIO_Init+0x1ee>
 8001de8:	2300      	movs	r3, #0
 8001dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dec:	f002 0203 	and.w	r2, r2, #3
 8001df0:	0092      	lsls	r2, r2, #2
 8001df2:	4093      	lsls	r3, r2
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dfa:	492f      	ldr	r1, [pc, #188]	; (8001eb8 <HAL_GPIO_Init+0x2bc>)
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	3302      	adds	r3, #2
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	492c      	ldr	r1, [pc, #176]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	608b      	str	r3, [r1, #8]
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e22:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	4928      	ldr	r1, [pc, #160]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e3c:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	4922      	ldr	r1, [pc, #136]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60cb      	str	r3, [r1, #12]
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	491e      	ldr	r1, [pc, #120]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d006      	beq.n	8001e72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	4918      	ldr	r1, [pc, #96]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	4914      	ldr	r1, [pc, #80]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d021      	beq.n	8001ed0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	490e      	ldr	r1, [pc, #56]	; (8001ecc <HAL_GPIO_Init+0x2d0>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
 8001e98:	e021      	b.n	8001ede <HAL_GPIO_Init+0x2e2>
 8001e9a:	bf00      	nop
 8001e9c:	10320000 	.word	0x10320000
 8001ea0:	10310000 	.word	0x10310000
 8001ea4:	10220000 	.word	0x10220000
 8001ea8:	10210000 	.word	0x10210000
 8001eac:	10120000 	.word	0x10120000
 8001eb0:	10110000 	.word	0x10110000
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	40010800 	.word	0x40010800
 8001ec0:	40010c00 	.word	0x40010c00
 8001ec4:	40011000 	.word	0x40011000
 8001ec8:	40011400 	.word	0x40011400
 8001ecc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	4909      	ldr	r1, [pc, #36]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	fa22 f303 	lsr.w	r3, r2, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f47f ae8e 	bne.w	8001c10 <HAL_GPIO_Init+0x14>
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	372c      	adds	r7, #44	; 0x2c
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	40010400 	.word	0x40010400

08001f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
 8001f10:	4613      	mov	r3, r2
 8001f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f14:	787b      	ldrb	r3, [r7, #1]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f1a:	887a      	ldrh	r2, [r7, #2]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f20:	e003      	b.n	8001f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f22:	887b      	ldrh	r3, [r7, #2]
 8001f24:	041a      	lsls	r2, r3, #16
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	611a      	str	r2, [r3, #16]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e272      	b.n	800242c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 8087 	beq.w	8002062 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f54:	4b92      	ldr	r3, [pc, #584]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d00c      	beq.n	8001f7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f60:	4b8f      	ldr	r3, [pc, #572]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d112      	bne.n	8001f92 <HAL_RCC_OscConfig+0x5e>
 8001f6c:	4b8c      	ldr	r3, [pc, #560]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f78:	d10b      	bne.n	8001f92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7a:	4b89      	ldr	r3, [pc, #548]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d06c      	beq.n	8002060 <HAL_RCC_OscConfig+0x12c>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d168      	bne.n	8002060 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e24c      	b.n	800242c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9a:	d106      	bne.n	8001faa <HAL_RCC_OscConfig+0x76>
 8001f9c:	4b80      	ldr	r3, [pc, #512]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a7f      	ldr	r2, [pc, #508]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	e02e      	b.n	8002008 <HAL_RCC_OscConfig+0xd4>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x98>
 8001fb2:	4b7b      	ldr	r3, [pc, #492]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a7a      	ldr	r2, [pc, #488]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	4b78      	ldr	r3, [pc, #480]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a77      	ldr	r2, [pc, #476]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	e01d      	b.n	8002008 <HAL_RCC_OscConfig+0xd4>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xbc>
 8001fd6:	4b72      	ldr	r3, [pc, #456]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a71      	ldr	r2, [pc, #452]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	4b6f      	ldr	r3, [pc, #444]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a6e      	ldr	r2, [pc, #440]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	e00b      	b.n	8002008 <HAL_RCC_OscConfig+0xd4>
 8001ff0:	4b6b      	ldr	r3, [pc, #428]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a6a      	ldr	r2, [pc, #424]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b68      	ldr	r3, [pc, #416]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a67      	ldr	r2, [pc, #412]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8002002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002006:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d013      	beq.n	8002038 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7fe ff4c 	bl	8000eac <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002018:	f7fe ff48 	bl	8000eac <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	; 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e200      	b.n	800242c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202a:	4b5d      	ldr	r3, [pc, #372]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0xe4>
 8002036:	e014      	b.n	8002062 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7fe ff38 	bl	8000eac <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002040:	f7fe ff34 	bl	8000eac <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	; 0x64
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e1ec      	b.n	800242c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002052:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x10c>
 800205e:	e000      	b.n	8002062 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d063      	beq.n	8002136 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800206e:	4b4c      	ldr	r3, [pc, #304]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00b      	beq.n	8002092 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800207a:	4b49      	ldr	r3, [pc, #292]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b08      	cmp	r3, #8
 8002084:	d11c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x18c>
 8002086:	4b46      	ldr	r3, [pc, #280]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d116      	bne.n	80020c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002092:	4b43      	ldr	r3, [pc, #268]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d005      	beq.n	80020aa <HAL_RCC_OscConfig+0x176>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e1c0      	b.n	800242c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020aa:	4b3d      	ldr	r3, [pc, #244]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4939      	ldr	r1, [pc, #228]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020be:	e03a      	b.n	8002136 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d020      	beq.n	800210a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c8:	4b36      	ldr	r3, [pc, #216]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7fe feed 	bl	8000eac <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d6:	f7fe fee9 	bl	8000eac <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e1a1      	b.n	800242c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e8:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f4:	4b2a      	ldr	r3, [pc, #168]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4927      	ldr	r1, [pc, #156]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 8002104:	4313      	orrs	r3, r2
 8002106:	600b      	str	r3, [r1, #0]
 8002108:	e015      	b.n	8002136 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800210a:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <HAL_RCC_OscConfig+0x270>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7fe fecc 	bl	8000eac <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002118:	f7fe fec8 	bl	8000eac <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e180      	b.n	800242c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212a:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d03a      	beq.n	80021b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d019      	beq.n	800217e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800214a:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <HAL_RCC_OscConfig+0x274>)
 800214c:	2201      	movs	r2, #1
 800214e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002150:	f7fe feac 	bl	8000eac <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002158:	f7fe fea8 	bl	8000eac <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e160      	b.n	800242c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216a:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <HAL_RCC_OscConfig+0x26c>)
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002176:	2001      	movs	r0, #1
 8002178:	f000 face 	bl	8002718 <RCC_Delay>
 800217c:	e01c      	b.n	80021b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <HAL_RCC_OscConfig+0x274>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002184:	f7fe fe92 	bl	8000eac <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218a:	e00f      	b.n	80021ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218c:	f7fe fe8e 	bl	8000eac <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d908      	bls.n	80021ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e146      	b.n	800242c <HAL_RCC_OscConfig+0x4f8>
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
 80021a4:	42420000 	.word	0x42420000
 80021a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ac:	4b92      	ldr	r3, [pc, #584]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1e9      	bne.n	800218c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80a6 	beq.w	8002312 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c6:	2300      	movs	r3, #0
 80021c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ca:	4b8b      	ldr	r3, [pc, #556]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10d      	bne.n	80021f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d6:	4b88      	ldr	r3, [pc, #544]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	4a87      	ldr	r2, [pc, #540]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e0:	61d3      	str	r3, [r2, #28]
 80021e2:	4b85      	ldr	r3, [pc, #532]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ee:	2301      	movs	r3, #1
 80021f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f2:	4b82      	ldr	r3, [pc, #520]	; (80023fc <HAL_RCC_OscConfig+0x4c8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d118      	bne.n	8002230 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021fe:	4b7f      	ldr	r3, [pc, #508]	; (80023fc <HAL_RCC_OscConfig+0x4c8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a7e      	ldr	r2, [pc, #504]	; (80023fc <HAL_RCC_OscConfig+0x4c8>)
 8002204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800220a:	f7fe fe4f 	bl	8000eac <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002212:	f7fe fe4b 	bl	8000eac <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b64      	cmp	r3, #100	; 0x64
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e103      	b.n	800242c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002224:	4b75      	ldr	r3, [pc, #468]	; (80023fc <HAL_RCC_OscConfig+0x4c8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d106      	bne.n	8002246 <HAL_RCC_OscConfig+0x312>
 8002238:	4b6f      	ldr	r3, [pc, #444]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	4a6e      	ldr	r2, [pc, #440]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6213      	str	r3, [r2, #32]
 8002244:	e02d      	b.n	80022a2 <HAL_RCC_OscConfig+0x36e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10c      	bne.n	8002268 <HAL_RCC_OscConfig+0x334>
 800224e:	4b6a      	ldr	r3, [pc, #424]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4a69      	ldr	r2, [pc, #420]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	6213      	str	r3, [r2, #32]
 800225a:	4b67      	ldr	r3, [pc, #412]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4a66      	ldr	r2, [pc, #408]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 8002260:	f023 0304 	bic.w	r3, r3, #4
 8002264:	6213      	str	r3, [r2, #32]
 8002266:	e01c      	b.n	80022a2 <HAL_RCC_OscConfig+0x36e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b05      	cmp	r3, #5
 800226e:	d10c      	bne.n	800228a <HAL_RCC_OscConfig+0x356>
 8002270:	4b61      	ldr	r3, [pc, #388]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4a60      	ldr	r2, [pc, #384]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 8002276:	f043 0304 	orr.w	r3, r3, #4
 800227a:	6213      	str	r3, [r2, #32]
 800227c:	4b5e      	ldr	r3, [pc, #376]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	4a5d      	ldr	r2, [pc, #372]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6213      	str	r3, [r2, #32]
 8002288:	e00b      	b.n	80022a2 <HAL_RCC_OscConfig+0x36e>
 800228a:	4b5b      	ldr	r3, [pc, #364]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4a5a      	ldr	r2, [pc, #360]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 8002290:	f023 0301 	bic.w	r3, r3, #1
 8002294:	6213      	str	r3, [r2, #32]
 8002296:	4b58      	ldr	r3, [pc, #352]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	4a57      	ldr	r2, [pc, #348]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 800229c:	f023 0304 	bic.w	r3, r3, #4
 80022a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d015      	beq.n	80022d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022aa:	f7fe fdff 	bl	8000eac <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b0:	e00a      	b.n	80022c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b2:	f7fe fdfb 	bl	8000eac <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e0b1      	b.n	800242c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c8:	4b4b      	ldr	r3, [pc, #300]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0ee      	beq.n	80022b2 <HAL_RCC_OscConfig+0x37e>
 80022d4:	e014      	b.n	8002300 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d6:	f7fe fde9 	bl	8000eac <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022dc:	e00a      	b.n	80022f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7fe fde5 	bl	8000eac <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e09b      	b.n	800242c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f4:	4b40      	ldr	r3, [pc, #256]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1ee      	bne.n	80022de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002300:	7dfb      	ldrb	r3, [r7, #23]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d105      	bne.n	8002312 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002306:	4b3c      	ldr	r3, [pc, #240]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	4a3b      	ldr	r2, [pc, #236]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002310:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 8087 	beq.w	800242a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800231c:	4b36      	ldr	r3, [pc, #216]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 030c 	and.w	r3, r3, #12
 8002324:	2b08      	cmp	r3, #8
 8002326:	d061      	beq.n	80023ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	2b02      	cmp	r3, #2
 800232e:	d146      	bne.n	80023be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002330:	4b33      	ldr	r3, [pc, #204]	; (8002400 <HAL_RCC_OscConfig+0x4cc>)
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7fe fdb9 	bl	8000eac <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233e:	f7fe fdb5 	bl	8000eac <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e06d      	b.n	800242c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002350:	4b29      	ldr	r3, [pc, #164]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f0      	bne.n	800233e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002364:	d108      	bne.n	8002378 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002366:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	4921      	ldr	r1, [pc, #132]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002378:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a19      	ldr	r1, [r3, #32]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	430b      	orrs	r3, r1
 800238a:	491b      	ldr	r1, [pc, #108]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	4313      	orrs	r3, r2
 800238e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002390:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <HAL_RCC_OscConfig+0x4cc>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7fe fd89 	bl	8000eac <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239e:	f7fe fd85 	bl	8000eac <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e03d      	b.n	800242c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x46a>
 80023bc:	e035      	b.n	800242a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <HAL_RCC_OscConfig+0x4cc>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7fe fd72 	bl	8000eac <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023cc:	f7fe fd6e 	bl	8000eac <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e026      	b.n	800242c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x498>
 80023ea:	e01e      	b.n	800242a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d107      	bne.n	8002404 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e019      	b.n	800242c <HAL_RCC_OscConfig+0x4f8>
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40007000 	.word	0x40007000
 8002400:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_RCC_OscConfig+0x500>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	429a      	cmp	r2, r3
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002422:	429a      	cmp	r2, r3
 8002424:	d001      	beq.n	800242a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40021000 	.word	0x40021000

08002438 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0d0      	b.n	80025ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800244c:	4b6a      	ldr	r3, [pc, #424]	; (80025f8 <HAL_RCC_ClockConfig+0x1c0>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d910      	bls.n	800247c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245a:	4b67      	ldr	r3, [pc, #412]	; (80025f8 <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 0207 	bic.w	r2, r3, #7
 8002462:	4965      	ldr	r1, [pc, #404]	; (80025f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	4313      	orrs	r3, r2
 8002468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246a:	4b63      	ldr	r3, [pc, #396]	; (80025f8 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0b8      	b.n	80025ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d020      	beq.n	80024ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002494:	4b59      	ldr	r3, [pc, #356]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	4a58      	ldr	r2, [pc, #352]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800249e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ac:	4b53      	ldr	r3, [pc, #332]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4a52      	ldr	r2, [pc, #328]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b8:	4b50      	ldr	r3, [pc, #320]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	494d      	ldr	r1, [pc, #308]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d040      	beq.n	8002558 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	4b47      	ldr	r3, [pc, #284]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d115      	bne.n	8002516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e07f      	b.n	80025ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d107      	bne.n	8002506 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f6:	4b41      	ldr	r3, [pc, #260]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e073      	b.n	80025ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002506:	4b3d      	ldr	r3, [pc, #244]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e06b      	b.n	80025ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002516:	4b39      	ldr	r3, [pc, #228]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f023 0203 	bic.w	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4936      	ldr	r1, [pc, #216]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002528:	f7fe fcc0 	bl	8000eac <HAL_GetTick>
 800252c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252e:	e00a      	b.n	8002546 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002530:	f7fe fcbc 	bl	8000eac <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f241 3288 	movw	r2, #5000	; 0x1388
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e053      	b.n	80025ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002546:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 020c 	and.w	r2, r3, #12
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	429a      	cmp	r2, r3
 8002556:	d1eb      	bne.n	8002530 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002558:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <HAL_RCC_ClockConfig+0x1c0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d210      	bcs.n	8002588 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 0207 	bic.w	r2, r3, #7
 800256e:	4922      	ldr	r1, [pc, #136]	; (80025f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e032      	b.n	80025ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4916      	ldr	r1, [pc, #88]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025b2:	4b12      	ldr	r3, [pc, #72]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	490e      	ldr	r1, [pc, #56]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025c6:	f000 f821 	bl	800260c <HAL_RCC_GetSysClockFreq>
 80025ca:	4602      	mov	r2, r0
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	490a      	ldr	r1, [pc, #40]	; (8002600 <HAL_RCC_ClockConfig+0x1c8>)
 80025d8:	5ccb      	ldrb	r3, [r1, r3]
 80025da:	fa22 f303 	lsr.w	r3, r2, r3
 80025de:	4a09      	ldr	r2, [pc, #36]	; (8002604 <HAL_RCC_ClockConfig+0x1cc>)
 80025e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_RCC_ClockConfig+0x1d0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fc1e 	bl	8000e28 <HAL_InitTick>

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40022000 	.word	0x40022000
 80025fc:	40021000 	.word	0x40021000
 8002600:	08004354 	.word	0x08004354
 8002604:	20000010 	.word	0x20000010
 8002608:	20000014 	.word	0x20000014

0800260c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002626:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b04      	cmp	r3, #4
 8002634:	d002      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x30>
 8002636:	2b08      	cmp	r3, #8
 8002638:	d003      	beq.n	8002642 <HAL_RCC_GetSysClockFreq+0x36>
 800263a:	e027      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800263c:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800263e:	613b      	str	r3, [r7, #16]
      break;
 8002640:	e027      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	0c9b      	lsrs	r3, r3, #18
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	4a17      	ldr	r2, [pc, #92]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800264c:	5cd3      	ldrb	r3, [r2, r3]
 800264e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d010      	beq.n	800267c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	0c5b      	lsrs	r3, r3, #17
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	4a11      	ldr	r2, [pc, #68]	; (80026ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002666:	5cd3      	ldrb	r3, [r2, r3]
 8002668:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a0d      	ldr	r2, [pc, #52]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800266e:	fb03 f202 	mul.w	r2, r3, r2
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	fbb2 f3f3 	udiv	r3, r2, r3
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	e004      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a0c      	ldr	r2, [pc, #48]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002680:	fb02 f303 	mul.w	r3, r2, r3
 8002684:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	613b      	str	r3, [r7, #16]
      break;
 800268a:	e002      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800268e:	613b      	str	r3, [r7, #16]
      break;
 8002690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002692:	693b      	ldr	r3, [r7, #16]
}
 8002694:	4618      	mov	r0, r3
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000
 80026a4:	007a1200 	.word	0x007a1200
 80026a8:	0800436c 	.word	0x0800436c
 80026ac:	0800437c 	.word	0x0800437c
 80026b0:	003d0900 	.word	0x003d0900

080026b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b8:	4b02      	ldr	r3, [pc, #8]	; (80026c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	20000010 	.word	0x20000010

080026c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026cc:	f7ff fff2 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4903      	ldr	r1, [pc, #12]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40021000 	.word	0x40021000
 80026ec:	08004364 	.word	0x08004364

080026f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026f4:	f7ff ffde 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	0adb      	lsrs	r3, r3, #11
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4903      	ldr	r1, [pc, #12]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000
 8002714:	08004364 	.word	0x08004364

08002718 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002720:	4b0a      	ldr	r3, [pc, #40]	; (800274c <RCC_Delay+0x34>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <RCC_Delay+0x38>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	0a5b      	lsrs	r3, r3, #9
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002734:	bf00      	nop
  }
  while (Delay --);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1e5a      	subs	r2, r3, #1
 800273a:	60fa      	str	r2, [r7, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f9      	bne.n	8002734 <RCC_Delay+0x1c>
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	20000010 	.word	0x20000010
 8002750:	10624dd3 	.word	0x10624dd3

08002754 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d07d      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002770:	2300      	movs	r3, #0
 8002772:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002774:	4b4f      	ldr	r3, [pc, #316]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10d      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002780:	4b4c      	ldr	r3, [pc, #304]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	4a4b      	ldr	r2, [pc, #300]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278a:	61d3      	str	r3, [r2, #28]
 800278c:	4b49      	ldr	r3, [pc, #292]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002798:	2301      	movs	r3, #1
 800279a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279c:	4b46      	ldr	r3, [pc, #280]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d118      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a8:	4b43      	ldr	r3, [pc, #268]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a42      	ldr	r2, [pc, #264]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b4:	f7fe fb7a 	bl	8000eac <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ba:	e008      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027bc:	f7fe fb76 	bl	8000eac <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	; 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e06d      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ce:	4b3a      	ldr	r3, [pc, #232]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027da:	4b36      	ldr	r3, [pc, #216]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d02e      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d027      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027f8:	4b2e      	ldr	r3, [pc, #184]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002800:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002802:	4b2e      	ldr	r3, [pc, #184]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002804:	2201      	movs	r2, #1
 8002806:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002808:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800280e:	4a29      	ldr	r2, [pc, #164]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d014      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281e:	f7fe fb45 	bl	8000eac <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002824:	e00a      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002826:	f7fe fb41 	bl	8000eac <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f241 3288 	movw	r2, #5000	; 0x1388
 8002834:	4293      	cmp	r3, r2
 8002836:	d901      	bls.n	800283c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e036      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283c:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ee      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002848:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4917      	ldr	r1, [pc, #92]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002856:	4313      	orrs	r3, r2
 8002858:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800285a:	7dfb      	ldrb	r3, [r7, #23]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d105      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002860:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	4a13      	ldr	r2, [pc, #76]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002878:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	490b      	ldr	r1, [pc, #44]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002896:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	4904      	ldr	r1, [pc, #16]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40007000 	.word	0x40007000
 80028bc:	42420440 	.word	0x42420440

080028c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	2300      	movs	r3, #0
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	2300      	movs	r3, #0
 80028da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b10      	cmp	r3, #16
 80028e0:	d00a      	beq.n	80028f8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b10      	cmp	r3, #16
 80028e6:	f200 808a 	bhi.w	80029fe <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d045      	beq.n	800297c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d075      	beq.n	80029e2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80028f6:	e082      	b.n	80029fe <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80028f8:	4b46      	ldr	r3, [pc, #280]	; (8002a14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80028fe:	4b45      	ldr	r3, [pc, #276]	; (8002a14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d07b      	beq.n	8002a02 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	0c9b      	lsrs	r3, r3, #18
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	4a41      	ldr	r2, [pc, #260]	; (8002a18 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002914:	5cd3      	ldrb	r3, [r2, r3]
 8002916:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d015      	beq.n	800294e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002922:	4b3c      	ldr	r3, [pc, #240]	; (8002a14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	0c5b      	lsrs	r3, r3, #17
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	4a3b      	ldr	r2, [pc, #236]	; (8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800292e:	5cd3      	ldrb	r3, [r2, r3]
 8002930:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00d      	beq.n	8002958 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800293c:	4a38      	ldr	r2, [pc, #224]	; (8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	fbb2 f2f3 	udiv	r2, r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	fb02 f303 	mul.w	r3, r2, r3
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	e004      	b.n	8002958 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4a34      	ldr	r2, [pc, #208]	; (8002a24 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002958:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002964:	d102      	bne.n	800296c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	61bb      	str	r3, [r7, #24]
      break;
 800296a:	e04a      	b.n	8002a02 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4a2d      	ldr	r2, [pc, #180]	; (8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	61bb      	str	r3, [r7, #24]
      break;
 800297a:	e042      	b.n	8002a02 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800297c:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298c:	d108      	bne.n	80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002998:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	e01f      	b.n	80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029aa:	d109      	bne.n	80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80029b8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	e00f      	b.n	80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029ca:	d11c      	bne.n	8002a06 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d016      	beq.n	8002a06 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80029d8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80029dc:	61bb      	str	r3, [r7, #24]
      break;
 80029de:	e012      	b.n	8002a06 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80029e0:	e011      	b.n	8002a06 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80029e2:	f7ff fe85 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 80029e6:	4602      	mov	r2, r0
 80029e8:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	0b9b      	lsrs	r3, r3, #14
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	3301      	adds	r3, #1
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	61bb      	str	r3, [r7, #24]
      break;
 80029fc:	e004      	b.n	8002a08 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80029fe:	bf00      	nop
 8002a00:	e002      	b.n	8002a08 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a02:	bf00      	nop
 8002a04:	e000      	b.n	8002a08 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a06:	bf00      	nop
    }
  }
  return (frequency);
 8002a08:	69bb      	ldr	r3, [r7, #24]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3720      	adds	r7, #32
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
 8002a18:	08004380 	.word	0x08004380
 8002a1c:	08004390 	.word	0x08004390
 8002a20:	007a1200 	.word	0x007a1200
 8002a24:	003d0900 	.word	0x003d0900
 8002a28:	aaaaaaab 	.word	0xaaaaaaab

08002a2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e041      	b.n	8002ac2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe f89c 	bl	8000b90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3304      	adds	r3, #4
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	f000 f992 	bl	8002d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d109      	bne.n	8002af0 <HAL_TIM_PWM_Start+0x24>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	bf14      	ite	ne
 8002ae8:	2301      	movne	r3, #1
 8002aea:	2300      	moveq	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	e022      	b.n	8002b36 <HAL_TIM_PWM_Start+0x6a>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d109      	bne.n	8002b0a <HAL_TIM_PWM_Start+0x3e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	bf14      	ite	ne
 8002b02:	2301      	movne	r3, #1
 8002b04:	2300      	moveq	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	e015      	b.n	8002b36 <HAL_TIM_PWM_Start+0x6a>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d109      	bne.n	8002b24 <HAL_TIM_PWM_Start+0x58>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	bf14      	ite	ne
 8002b1c:	2301      	movne	r3, #1
 8002b1e:	2300      	moveq	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	e008      	b.n	8002b36 <HAL_TIM_PWM_Start+0x6a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	bf14      	ite	ne
 8002b30:	2301      	movne	r3, #1
 8002b32:	2300      	moveq	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e05e      	b.n	8002bfc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d104      	bne.n	8002b4e <HAL_TIM_PWM_Start+0x82>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b4c:	e013      	b.n	8002b76 <HAL_TIM_PWM_Start+0xaa>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d104      	bne.n	8002b5e <HAL_TIM_PWM_Start+0x92>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b5c:	e00b      	b.n	8002b76 <HAL_TIM_PWM_Start+0xaa>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d104      	bne.n	8002b6e <HAL_TIM_PWM_Start+0xa2>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b6c:	e003      	b.n	8002b76 <HAL_TIM_PWM_Start+0xaa>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	6839      	ldr	r1, [r7, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 faf2 	bl	8003168 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a1e      	ldr	r2, [pc, #120]	; (8002c04 <HAL_TIM_PWM_Start+0x138>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d107      	bne.n	8002b9e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a18      	ldr	r2, [pc, #96]	; (8002c04 <HAL_TIM_PWM_Start+0x138>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d00e      	beq.n	8002bc6 <HAL_TIM_PWM_Start+0xfa>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb0:	d009      	beq.n	8002bc6 <HAL_TIM_PWM_Start+0xfa>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a14      	ldr	r2, [pc, #80]	; (8002c08 <HAL_TIM_PWM_Start+0x13c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d004      	beq.n	8002bc6 <HAL_TIM_PWM_Start+0xfa>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <HAL_TIM_PWM_Start+0x140>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d111      	bne.n	8002bea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b06      	cmp	r3, #6
 8002bd6:	d010      	beq.n	8002bfa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be8:	e007      	b.n	8002bfa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0201 	orr.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40012c00 	.word	0x40012c00
 8002c08:	40000400 	.word	0x40000400
 8002c0c:	40000800 	.word	0x40000800

08002c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d101      	bne.n	8002c2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e0ae      	b.n	8002d8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b0c      	cmp	r3, #12
 8002c3a:	f200 809f 	bhi.w	8002d7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c3e:	a201      	add	r2, pc, #4	; (adr r2, 8002c44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c44:	08002c79 	.word	0x08002c79
 8002c48:	08002d7d 	.word	0x08002d7d
 8002c4c:	08002d7d 	.word	0x08002d7d
 8002c50:	08002d7d 	.word	0x08002d7d
 8002c54:	08002cb9 	.word	0x08002cb9
 8002c58:	08002d7d 	.word	0x08002d7d
 8002c5c:	08002d7d 	.word	0x08002d7d
 8002c60:	08002d7d 	.word	0x08002d7d
 8002c64:	08002cfb 	.word	0x08002cfb
 8002c68:	08002d7d 	.word	0x08002d7d
 8002c6c:	08002d7d 	.word	0x08002d7d
 8002c70:	08002d7d 	.word	0x08002d7d
 8002c74:	08002d3b 	.word	0x08002d3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 f8ea 	bl	8002e58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0208 	orr.w	r2, r2, #8
 8002c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0204 	bic.w	r2, r2, #4
 8002ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6999      	ldr	r1, [r3, #24]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	691a      	ldr	r2, [r3, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	619a      	str	r2, [r3, #24]
      break;
 8002cb6:	e064      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 f930 	bl	8002f24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6999      	ldr	r1, [r3, #24]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	021a      	lsls	r2, r3, #8
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	619a      	str	r2, [r3, #24]
      break;
 8002cf8:	e043      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 f979 	bl	8002ff8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	69da      	ldr	r2, [r3, #28]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0208 	orr.w	r2, r2, #8
 8002d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69da      	ldr	r2, [r3, #28]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0204 	bic.w	r2, r2, #4
 8002d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69d9      	ldr	r1, [r3, #28]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	61da      	str	r2, [r3, #28]
      break;
 8002d38:	e023      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 f9c3 	bl	80030cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69da      	ldr	r2, [r3, #28]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69d9      	ldr	r1, [r3, #28]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	021a      	lsls	r2, r3, #8
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	61da      	str	r2, [r3, #28]
      break;
 8002d7a:	e002      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a29      	ldr	r2, [pc, #164]	; (8002e4c <TIM_Base_SetConfig+0xb8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00b      	beq.n	8002dc4 <TIM_Base_SetConfig+0x30>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db2:	d007      	beq.n	8002dc4 <TIM_Base_SetConfig+0x30>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a26      	ldr	r2, [pc, #152]	; (8002e50 <TIM_Base_SetConfig+0xbc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d003      	beq.n	8002dc4 <TIM_Base_SetConfig+0x30>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a25      	ldr	r2, [pc, #148]	; (8002e54 <TIM_Base_SetConfig+0xc0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d108      	bne.n	8002dd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <TIM_Base_SetConfig+0xb8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00b      	beq.n	8002df6 <TIM_Base_SetConfig+0x62>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de4:	d007      	beq.n	8002df6 <TIM_Base_SetConfig+0x62>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a19      	ldr	r2, [pc, #100]	; (8002e50 <TIM_Base_SetConfig+0xbc>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d003      	beq.n	8002df6 <TIM_Base_SetConfig+0x62>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <TIM_Base_SetConfig+0xc0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d108      	bne.n	8002e08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a07      	ldr	r2, [pc, #28]	; (8002e4c <TIM_Base_SetConfig+0xb8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d103      	bne.n	8002e3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	615a      	str	r2, [r3, #20]
}
 8002e42:	bf00      	nop
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr
 8002e4c:	40012c00 	.word	0x40012c00
 8002e50:	40000400 	.word	0x40000400
 8002e54:	40000800 	.word	0x40000800

08002e58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f023 0201 	bic.w	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 0303 	bic.w	r3, r3, #3
 8002e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f023 0302 	bic.w	r3, r3, #2
 8002ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a1c      	ldr	r2, [pc, #112]	; (8002f20 <TIM_OC1_SetConfig+0xc8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d10c      	bne.n	8002ece <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f023 0308 	bic.w	r3, r3, #8
 8002eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f023 0304 	bic.w	r3, r3, #4
 8002ecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a13      	ldr	r2, [pc, #76]	; (8002f20 <TIM_OC1_SetConfig+0xc8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d111      	bne.n	8002efa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	621a      	str	r2, [r3, #32]
}
 8002f14:	bf00      	nop
 8002f16:	371c      	adds	r7, #28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40012c00 	.word	0x40012c00

08002f24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f023 0210 	bic.w	r2, r3, #16
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f023 0320 	bic.w	r3, r3, #32
 8002f6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a1d      	ldr	r2, [pc, #116]	; (8002ff4 <TIM_OC2_SetConfig+0xd0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d10d      	bne.n	8002fa0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <TIM_OC2_SetConfig+0xd0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d113      	bne.n	8002fd0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	621a      	str	r2, [r3, #32]
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	40012c00 	.word	0x40012c00

08002ff8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f023 0303 	bic.w	r3, r3, #3
 800302e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a1d      	ldr	r2, [pc, #116]	; (80030c8 <TIM_OC3_SetConfig+0xd0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d10d      	bne.n	8003072 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800305c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a14      	ldr	r2, [pc, #80]	; (80030c8 <TIM_OC3_SetConfig+0xd0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d113      	bne.n	80030a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	621a      	str	r2, [r3, #32]
}
 80030bc:	bf00      	nop
 80030be:	371c      	adds	r7, #28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40012c00 	.word	0x40012c00

080030cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	031b      	lsls	r3, r3, #12
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a0f      	ldr	r2, [pc, #60]	; (8003164 <TIM_OC4_SetConfig+0x98>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d109      	bne.n	8003140 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003132:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	019b      	lsls	r3, r3, #6
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	621a      	str	r2, [r3, #32]
}
 800315a:	bf00      	nop
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr
 8003164:	40012c00 	.word	0x40012c00

08003168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f003 031f 	and.w	r3, r3, #31
 800317a:	2201      	movs	r2, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a1a      	ldr	r2, [r3, #32]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	43db      	mvns	r3, r3
 800318a:	401a      	ands	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a1a      	ldr	r2, [r3, #32]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	621a      	str	r2, [r3, #32]
}
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e046      	b.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a16      	ldr	r2, [pc, #88]	; (8003260 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00e      	beq.n	800322a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003214:	d009      	beq.n	800322a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a12      	ldr	r2, [pc, #72]	; (8003264 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d004      	beq.n	800322a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a10      	ldr	r2, [pc, #64]	; (8003268 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d10c      	bne.n	8003244 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003230:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	4313      	orrs	r3, r2
 800323a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr
 8003260:	40012c00 	.word	0x40012c00
 8003264:	40000400 	.word	0x40000400
 8003268:	40000800 	.word	0x40000800

0800326c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e042      	b.n	8003304 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d106      	bne.n	8003298 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7fd fd02 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2224      	movs	r2, #36	; 0x24
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 ff89 	bl	80041c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	4613      	mov	r3, r2
 800331a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b20      	cmp	r3, #32
 800332a:	d16d      	bne.n	8003408 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_UART_Transmit+0x2c>
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e066      	b.n	800340a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2221      	movs	r2, #33	; 0x21
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800334a:	f7fd fdaf 	bl	8000eac <HAL_GetTick>
 800334e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	88fa      	ldrh	r2, [r7, #6]
 8003354:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	88fa      	ldrh	r2, [r7, #6]
 800335a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003364:	d108      	bne.n	8003378 <HAL_UART_Transmit+0x6c>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d104      	bne.n	8003378 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	e003      	b.n	8003380 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800337c:	2300      	movs	r3, #0
 800337e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003380:	e02a      	b.n	80033d8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2200      	movs	r2, #0
 800338a:	2180      	movs	r1, #128	; 0x80
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 fc51 	bl	8003c34 <UART_WaitOnFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e036      	b.n	800340a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10b      	bne.n	80033ba <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	3302      	adds	r3, #2
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	e007      	b.n	80033ca <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	781a      	ldrb	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	3301      	adds	r3, #1
 80033c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1cf      	bne.n	8003382 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2200      	movs	r2, #0
 80033ea:	2140      	movs	r1, #64	; 0x40
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fc21 	bl	8003c34 <UART_WaitOnFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e006      	b.n	800340a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	e000      	b.n	800340a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003408:	2302      	movs	r3, #2
  }
}
 800340a:	4618      	mov	r0, r3
 800340c:	3720      	adds	r7, #32
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b08c      	sub	sp, #48	; 0x30
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	4613      	mov	r3, r2
 800341e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b20      	cmp	r3, #32
 800342a:	d14a      	bne.n	80034c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e043      	b.n	80034c4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003448:	88fb      	ldrh	r3, [r7, #6]
 800344a:	461a      	mov	r2, r3
 800344c:	68b9      	ldr	r1, [r7, #8]
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fc5e 	bl	8003d10 <UART_Start_Receive_DMA>
 8003454:	4603      	mov	r3, r0
 8003456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800345a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800345e:	2b00      	cmp	r3, #0
 8003460:	d12c      	bne.n	80034bc <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	2b01      	cmp	r3, #1
 8003468:	d125      	bne.n	80034b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	330c      	adds	r3, #12
 8003486:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	e853 3f00 	ldrex	r3, [r3]
 800348e:	617b      	str	r3, [r7, #20]
   return(result);
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f043 0310 	orr.w	r3, r3, #16
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034a0:	627a      	str	r2, [r7, #36]	; 0x24
 80034a2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a4:	6a39      	ldr	r1, [r7, #32]
 80034a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a8:	e841 2300 	strex	r3, r2, [r1]
 80034ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1e5      	bne.n	8003480 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80034b4:	e002      	b.n	80034bc <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80034bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80034c0:	e000      	b.n	80034c4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80034c2:	2302      	movs	r3, #2
  }
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3730      	adds	r7, #48	; 0x30
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b0ba      	sub	sp, #232	; 0xe8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800350a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10f      	bne.n	8003532 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <HAL_UART_IRQHandler+0x66>
 800351e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fd8e 	bl	800404c <UART_Receive_IT>
      return;
 8003530:	e25b      	b.n	80039ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80de 	beq.w	80036f8 <HAL_UART_IRQHandler+0x22c>
 800353c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d106      	bne.n	8003556 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800354c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80d1 	beq.w	80036f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00b      	beq.n	800357a <HAL_UART_IRQHandler+0xae>
 8003562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	f043 0201 	orr.w	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800357a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00b      	beq.n	800359e <HAL_UART_IRQHandler+0xd2>
 8003586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d005      	beq.n	800359e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	f043 0202 	orr.w	r2, r3, #2
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800359e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00b      	beq.n	80035c2 <HAL_UART_IRQHandler+0xf6>
 80035aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d005      	beq.n	80035c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f043 0204 	orr.w	r2, r3, #4
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d011      	beq.n	80035f2 <HAL_UART_IRQHandler+0x126>
 80035ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d105      	bne.n	80035e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	f043 0208 	orr.w	r2, r3, #8
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 81f2 	beq.w	80039e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_UART_IRQHandler+0x14e>
 8003608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fd19 	bl	800404c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf14      	ite	ne
 8003628:	2301      	movne	r3, #1
 800362a:	2300      	moveq	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d103      	bne.n	8003646 <HAL_UART_IRQHandler+0x17a>
 800363e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d04f      	beq.n	80036e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fc23 	bl	8003e92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d041      	beq.n	80036de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3314      	adds	r3, #20
 8003660:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003668:	e853 3f00 	ldrex	r3, [r3]
 800366c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003670:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003678:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3314      	adds	r3, #20
 8003682:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003686:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800368a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003692:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003696:	e841 2300 	strex	r3, r2, [r1]
 800369a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800369e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1d9      	bne.n	800365a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d013      	beq.n	80036d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	4a7e      	ldr	r2, [pc, #504]	; (80038ac <HAL_UART_IRQHandler+0x3e0>)
 80036b4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe f9f8 	bl	8001ab0 <HAL_DMA_Abort_IT>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d016      	beq.n	80036f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036d0:	4610      	mov	r0, r2
 80036d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d4:	e00e      	b.n	80036f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f9a5 	bl	8003a26 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036dc:	e00a      	b.n	80036f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f9a1 	bl	8003a26 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e4:	e006      	b.n	80036f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f99d 	bl	8003a26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80036f2:	e175      	b.n	80039e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f4:	bf00      	nop
    return;
 80036f6:	e173      	b.n	80039e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	f040 814f 	bne.w	80039a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003706:	f003 0310 	and.w	r3, r3, #16
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 8148 	beq.w	80039a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8141 	beq.w	80039a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 80b6 	beq.w	80038b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003750:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8145 	beq.w	80039e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800375e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003762:	429a      	cmp	r2, r3
 8003764:	f080 813e 	bcs.w	80039e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800376e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	2b20      	cmp	r3, #32
 8003778:	f000 8088 	beq.w	800388c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	330c      	adds	r3, #12
 8003782:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800378a:	e853 3f00 	ldrex	r3, [r3]
 800378e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003792:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003796:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800379a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	330c      	adds	r3, #12
 80037a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80037a8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037b8:	e841 2300 	strex	r3, r2, [r1]
 80037bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1d9      	bne.n	800377c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3314      	adds	r3, #20
 80037ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037d2:	e853 3f00 	ldrex	r3, [r3]
 80037d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037da:	f023 0301 	bic.w	r3, r3, #1
 80037de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3314      	adds	r3, #20
 80037e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037f8:	e841 2300 	strex	r3, r2, [r1]
 80037fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e1      	bne.n	80037c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3314      	adds	r3, #20
 800380a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800380e:	e853 3f00 	ldrex	r3, [r3]
 8003812:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800381a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3314      	adds	r3, #20
 8003824:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003828:	66fa      	str	r2, [r7, #108]	; 0x6c
 800382a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800382e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003830:	e841 2300 	strex	r3, r2, [r1]
 8003834:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003836:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1e3      	bne.n	8003804 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	330c      	adds	r3, #12
 8003850:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800385a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385c:	f023 0310 	bic.w	r3, r3, #16
 8003860:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	330c      	adds	r3, #12
 800386a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800386e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003870:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003874:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800387c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e3      	bne.n	800384a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe f8d7 	bl	8001a3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800389a:	b29b      	uxth	r3, r3
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	b29b      	uxth	r3, r3
 80038a0:	4619      	mov	r1, r3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fc fd88 	bl	80003b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038a8:	e09c      	b.n	80039e4 <HAL_UART_IRQHandler+0x518>
 80038aa:	bf00      	nop
 80038ac:	08003f57 	.word	0x08003f57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 808e 	beq.w	80039e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80038cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8089 	beq.w	80039e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	330c      	adds	r3, #12
 80038dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	330c      	adds	r3, #12
 80038f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80038fa:	647a      	str	r2, [r7, #68]	; 0x44
 80038fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003900:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e3      	bne.n	80038d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3314      	adds	r3, #20
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	623b      	str	r3, [r7, #32]
   return(result);
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3314      	adds	r3, #20
 800392e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003932:	633a      	str	r2, [r7, #48]	; 0x30
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003936:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800393a:	e841 2300 	strex	r3, r2, [r1]
 800393e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1e3      	bne.n	800390e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	330c      	adds	r3, #12
 800395a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	e853 3f00 	ldrex	r3, [r3]
 8003962:	60fb      	str	r3, [r7, #12]
   return(result);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0310 	bic.w	r3, r3, #16
 800396a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	330c      	adds	r3, #12
 8003974:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003978:	61fa      	str	r2, [r7, #28]
 800397a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	69b9      	ldr	r1, [r7, #24]
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	617b      	str	r3, [r7, #20]
   return(result);
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e3      	bne.n	8003954 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003992:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003996:	4619      	mov	r1, r3
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7fc fd0d 	bl	80003b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800399e:	e023      	b.n	80039e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d009      	beq.n	80039c0 <HAL_UART_IRQHandler+0x4f4>
 80039ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fae0 	bl	8003f7e <UART_Transmit_IT>
    return;
 80039be:	e014      	b.n	80039ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00e      	beq.n	80039ea <HAL_UART_IRQHandler+0x51e>
 80039cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fb1f 	bl	800401c <UART_EndTransmit_IT>
    return;
 80039de:	e004      	b.n	80039ea <HAL_UART_IRQHandler+0x51e>
    return;
 80039e0:	bf00      	nop
 80039e2:	e002      	b.n	80039ea <HAL_UART_IRQHandler+0x51e>
      return;
 80039e4:	bf00      	nop
 80039e6:	e000      	b.n	80039ea <HAL_UART_IRQHandler+0x51e>
      return;
 80039e8:	bf00      	nop
  }
}
 80039ea:	37e8      	adds	r7, #232	; 0xe8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr

08003a02 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr

08003a14 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr

08003a26 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b09c      	sub	sp, #112	; 0x70
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d172      	bne.n	8003b3a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a56:	2200      	movs	r2, #0
 8003a58:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	330c      	adds	r3, #12
 8003a60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a70:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	330c      	adds	r3, #12
 8003a78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a7c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e5      	bne.n	8003a5a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3314      	adds	r3, #20
 8003a94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa0:	f023 0301 	bic.w	r3, r3, #1
 8003aa4:	667b      	str	r3, [r7, #100]	; 0x64
 8003aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3314      	adds	r3, #20
 8003aac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003aae:	647a      	str	r2, [r7, #68]	; 0x44
 8003ab0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ab4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e5      	bne.n	8003a8e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3314      	adds	r3, #20
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	e853 3f00 	ldrex	r3, [r3]
 8003ad0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ad8:	663b      	str	r3, [r7, #96]	; 0x60
 8003ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3314      	adds	r3, #20
 8003ae0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ae2:	633a      	str	r2, [r7, #48]	; 0x30
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aea:	e841 2300 	strex	r3, r2, [r1]
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1e5      	bne.n	8003ac2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d119      	bne.n	8003b3a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	330c      	adds	r3, #12
 8003b0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f023 0310 	bic.w	r3, r3, #16
 8003b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	330c      	adds	r3, #12
 8003b24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b26:	61fa      	str	r2, [r7, #28]
 8003b28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2a:	69b9      	ldr	r1, [r7, #24]
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	e841 2300 	strex	r3, r2, [r1]
 8003b32:	617b      	str	r3, [r7, #20]
   return(result);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1e5      	bne.n	8003b06 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d106      	bne.n	8003b56 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003b50:	f7fc fc32 	bl	80003b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b54:	e002      	b.n	8003b5c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003b56:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003b58:	f7ff ff53 	bl	8003a02 <HAL_UART_RxCpltCallback>
}
 8003b5c:	bf00      	nop
 8003b5e:	3770      	adds	r7, #112	; 0x70
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d108      	bne.n	8003b92 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b84:	085b      	lsrs	r3, r3, #1
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	4619      	mov	r1, r3
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f7fc fc14 	bl	80003b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b90:	e002      	b.n	8003b98 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f7ff ff3e 	bl	8003a14 <HAL_UART_RxHalfCpltCallback>
}
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bf14      	ite	ne
 8003bc0:	2301      	movne	r3, #1
 8003bc2:	2300      	moveq	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b21      	cmp	r3, #33	; 0x21
 8003bd2:	d108      	bne.n	8003be6 <UART_DMAError+0x46>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003be0:	68b8      	ldr	r0, [r7, #8]
 8003be2:	f000 f92f 	bl	8003e44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	bf14      	ite	ne
 8003bf4:	2301      	movne	r3, #1
 8003bf6:	2300      	moveq	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b22      	cmp	r3, #34	; 0x22
 8003c06:	d108      	bne.n	8003c1a <UART_DMAError+0x7a>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2200      	movs	r2, #0
 8003c12:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003c14:	68b8      	ldr	r0, [r7, #8]
 8003c16:	f000 f93c 	bl	8003e92 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	f043 0210 	orr.w	r2, r3, #16
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c26:	68b8      	ldr	r0, [r7, #8]
 8003c28:	f7ff fefd 	bl	8003a26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c2c:	bf00      	nop
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b090      	sub	sp, #64	; 0x40
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	4613      	mov	r3, r2
 8003c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c44:	e050      	b.n	8003ce8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4c:	d04c      	beq.n	8003ce8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d007      	beq.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c54:	f7fd f92a 	bl	8000eac <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d241      	bcs.n	8003ce8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	330c      	adds	r3, #12
 8003c6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	e853 3f00 	ldrex	r3, [r3]
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	330c      	adds	r3, #12
 8003c82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c84:	637a      	str	r2, [r7, #52]	; 0x34
 8003c86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c8c:	e841 2300 	strex	r3, r2, [r1]
 8003c90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e5      	bne.n	8003c64 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3314      	adds	r3, #20
 8003c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	e853 3f00 	ldrex	r3, [r3]
 8003ca6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f023 0301 	bic.w	r3, r3, #1
 8003cae:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3314      	adds	r3, #20
 8003cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cb8:	623a      	str	r2, [r7, #32]
 8003cba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbc:	69f9      	ldr	r1, [r7, #28]
 8003cbe:	6a3a      	ldr	r2, [r7, #32]
 8003cc0:	e841 2300 	strex	r3, r2, [r1]
 8003cc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1e5      	bne.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e00f      	b.n	8003d08 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	bf0c      	ite	eq
 8003cf8:	2301      	moveq	r3, #1
 8003cfa:	2300      	movne	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	461a      	mov	r2, r3
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d09f      	beq.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3740      	adds	r7, #64	; 0x40
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b098      	sub	sp, #96	; 0x60
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	88fa      	ldrh	r2, [r7, #6]
 8003d28:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2222      	movs	r2, #34	; 0x22
 8003d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3c:	4a3e      	ldr	r2, [pc, #248]	; (8003e38 <UART_Start_Receive_DMA+0x128>)
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d44:	4a3d      	ldr	r2, [pc, #244]	; (8003e3c <UART_Start_Receive_DMA+0x12c>)
 8003d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4c:	4a3c      	ldr	r2, [pc, #240]	; (8003e40 <UART_Start_Receive_DMA+0x130>)
 8003d4e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d54:	2200      	movs	r2, #0
 8003d56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003d58:	f107 0308 	add.w	r3, r7, #8
 8003d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3304      	adds	r3, #4
 8003d68:	4619      	mov	r1, r3
 8003d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	f7fd fe03 	bl	800197a <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003d74:	2300      	movs	r3, #0
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d019      	beq.n	8003dc6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	330c      	adds	r3, #12
 8003d98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	330c      	adds	r3, #12
 8003db0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003db2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003db4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003db8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e5      	bne.n	8003d92 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3314      	adds	r3, #20
 8003dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	657b      	str	r3, [r7, #84]	; 0x54
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3314      	adds	r3, #20
 8003de4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003de6:	63ba      	str	r2, [r7, #56]	; 0x38
 8003de8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e5      	bne.n	8003dc6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3314      	adds	r3, #20
 8003e00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	617b      	str	r3, [r7, #20]
   return(result);
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e10:	653b      	str	r3, [r7, #80]	; 0x50
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3314      	adds	r3, #20
 8003e18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e1a:	627a      	str	r2, [r7, #36]	; 0x24
 8003e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	6a39      	ldr	r1, [r7, #32]
 8003e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e5      	bne.n	8003dfa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3760      	adds	r7, #96	; 0x60
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	08003a39 	.word	0x08003a39
 8003e3c:	08003b65 	.word	0x08003b65
 8003e40:	08003ba1 	.word	0x08003ba1

08003e44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b089      	sub	sp, #36	; 0x24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	330c      	adds	r3, #12
 8003e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003e62:	61fb      	str	r3, [r7, #28]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	330c      	adds	r3, #12
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	61ba      	str	r2, [r7, #24]
 8003e6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	6979      	ldr	r1, [r7, #20]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	e841 2300 	strex	r3, r2, [r1]
 8003e78:	613b      	str	r3, [r7, #16]
   return(result);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e5      	bne.n	8003e4c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003e88:	bf00      	nop
 8003e8a:	3724      	adds	r7, #36	; 0x24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr

08003e92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b095      	sub	sp, #84	; 0x54
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea4:	e853 3f00 	ldrex	r3, [r3]
 8003ea8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	330c      	adds	r3, #12
 8003eb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003eba:	643a      	str	r2, [r7, #64]	; 0x40
 8003ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ec0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ec2:	e841 2300 	strex	r3, r2, [r1]
 8003ec6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1e5      	bne.n	8003e9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3314      	adds	r3, #20
 8003ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	e853 3f00 	ldrex	r3, [r3]
 8003edc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f023 0301 	bic.w	r3, r3, #1
 8003ee4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e5      	bne.n	8003ece <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d119      	bne.n	8003f3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	330c      	adds	r3, #12
 8003f10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f023 0310 	bic.w	r3, r3, #16
 8003f20:	647b      	str	r3, [r7, #68]	; 0x44
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	330c      	adds	r3, #12
 8003f28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f2a:	61ba      	str	r2, [r7, #24]
 8003f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	6979      	ldr	r1, [r7, #20]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	613b      	str	r3, [r7, #16]
   return(result);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e5      	bne.n	8003f0a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f4c:	bf00      	nop
 8003f4e:	3754      	adds	r7, #84	; 0x54
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr

08003f56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b084      	sub	sp, #16
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f7ff fd58 	bl	8003a26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b21      	cmp	r3, #33	; 0x21
 8003f90:	d13e      	bne.n	8004010 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9a:	d114      	bne.n	8003fc6 <UART_Transmit_IT+0x48>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d110      	bne.n	8003fc6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fb8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	1c9a      	adds	r2, r3, #2
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	621a      	str	r2, [r3, #32]
 8003fc4:	e008      	b.n	8003fd8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	1c59      	adds	r1, r3, #1
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6211      	str	r1, [r2, #32]
 8003fd0:	781a      	ldrb	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10f      	bne.n	800400c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ffa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800400a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004032:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff fcd7 	bl	80039f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08c      	sub	sp, #48	; 0x30
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b22      	cmp	r3, #34	; 0x22
 800405e:	f040 80ae 	bne.w	80041be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406a:	d117      	bne.n	800409c <UART_Receive_IT+0x50>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d113      	bne.n	800409c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004074:	2300      	movs	r3, #0
 8004076:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	b29b      	uxth	r3, r3
 8004086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408a:	b29a      	uxth	r2, r3
 800408c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	1c9a      	adds	r2, r3, #2
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	629a      	str	r2, [r3, #40]	; 0x28
 800409a:	e026      	b.n	80040ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ae:	d007      	beq.n	80040c0 <UART_Receive_IT+0x74>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10a      	bne.n	80040ce <UART_Receive_IT+0x82>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d106      	bne.n	80040ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	e008      	b.n	80040e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	4619      	mov	r1, r3
 80040f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d15d      	bne.n	80041ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0220 	bic.w	r2, r2, #32
 800410c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800411c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695a      	ldr	r2, [r3, #20]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0201 	bic.w	r2, r2, #1
 800412c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	2b01      	cmp	r3, #1
 8004142:	d135      	bne.n	80041b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	330c      	adds	r3, #12
 8004150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	e853 3f00 	ldrex	r3, [r3]
 8004158:	613b      	str	r3, [r7, #16]
   return(result);
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f023 0310 	bic.w	r3, r3, #16
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	330c      	adds	r3, #12
 8004168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416a:	623a      	str	r2, [r7, #32]
 800416c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	69f9      	ldr	r1, [r7, #28]
 8004170:	6a3a      	ldr	r2, [r7, #32]
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	61bb      	str	r3, [r7, #24]
   return(result);
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e5      	bne.n	800414a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b10      	cmp	r3, #16
 800418a:	d10a      	bne.n	80041a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800418c:	2300      	movs	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041a6:	4619      	mov	r1, r3
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7fc f905 	bl	80003b8 <HAL_UARTEx_RxEventCallback>
 80041ae:	e002      	b.n	80041b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff fc26 	bl	8003a02 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e002      	b.n	80041c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	e000      	b.n	80041c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80041be:	2302      	movs	r3, #2
  }
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3730      	adds	r7, #48	; 0x30
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004202:	f023 030c 	bic.w	r3, r3, #12
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	430b      	orrs	r3, r1
 800420e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a2c      	ldr	r2, [pc, #176]	; (80042dc <UART_SetConfig+0x114>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d103      	bne.n	8004238 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004230:	f7fe fa5e 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	e002      	b.n	800423e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004238:	f7fe fa46 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 800423c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009a      	lsls	r2, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	fbb2 f3f3 	udiv	r3, r2, r3
 8004254:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <UART_SetConfig+0x118>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	0119      	lsls	r1, r3, #4
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	009a      	lsls	r2, r3, #2
 8004268:	441a      	add	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	fbb2 f2f3 	udiv	r2, r2, r3
 8004274:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <UART_SetConfig+0x118>)
 8004276:	fba3 0302 	umull	r0, r3, r3, r2
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	2064      	movs	r0, #100	; 0x64
 800427e:	fb00 f303 	mul.w	r3, r0, r3
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	3332      	adds	r3, #50	; 0x32
 8004288:	4a15      	ldr	r2, [pc, #84]	; (80042e0 <UART_SetConfig+0x118>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004294:	4419      	add	r1, r3
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	009a      	lsls	r2, r3, #2
 80042a0:	441a      	add	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <UART_SetConfig+0x118>)
 80042ae:	fba3 0302 	umull	r0, r3, r3, r2
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2064      	movs	r0, #100	; 0x64
 80042b6:	fb00 f303 	mul.w	r3, r0, r3
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	3332      	adds	r3, #50	; 0x32
 80042c0:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <UART_SetConfig+0x118>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	f003 020f 	and.w	r2, r3, #15
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	440a      	add	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40013800 	.word	0x40013800
 80042e0:	51eb851f 	.word	0x51eb851f

080042e4 <__libc_init_array>:
 80042e4:	b570      	push	{r4, r5, r6, lr}
 80042e6:	2600      	movs	r6, #0
 80042e8:	4d0c      	ldr	r5, [pc, #48]	; (800431c <__libc_init_array+0x38>)
 80042ea:	4c0d      	ldr	r4, [pc, #52]	; (8004320 <__libc_init_array+0x3c>)
 80042ec:	1b64      	subs	r4, r4, r5
 80042ee:	10a4      	asrs	r4, r4, #2
 80042f0:	42a6      	cmp	r6, r4
 80042f2:	d109      	bne.n	8004308 <__libc_init_array+0x24>
 80042f4:	f000 f822 	bl	800433c <_init>
 80042f8:	2600      	movs	r6, #0
 80042fa:	4d0a      	ldr	r5, [pc, #40]	; (8004324 <__libc_init_array+0x40>)
 80042fc:	4c0a      	ldr	r4, [pc, #40]	; (8004328 <__libc_init_array+0x44>)
 80042fe:	1b64      	subs	r4, r4, r5
 8004300:	10a4      	asrs	r4, r4, #2
 8004302:	42a6      	cmp	r6, r4
 8004304:	d105      	bne.n	8004312 <__libc_init_array+0x2e>
 8004306:	bd70      	pop	{r4, r5, r6, pc}
 8004308:	f855 3b04 	ldr.w	r3, [r5], #4
 800430c:	4798      	blx	r3
 800430e:	3601      	adds	r6, #1
 8004310:	e7ee      	b.n	80042f0 <__libc_init_array+0xc>
 8004312:	f855 3b04 	ldr.w	r3, [r5], #4
 8004316:	4798      	blx	r3
 8004318:	3601      	adds	r6, #1
 800431a:	e7f2      	b.n	8004302 <__libc_init_array+0x1e>
 800431c:	08004394 	.word	0x08004394
 8004320:	08004394 	.word	0x08004394
 8004324:	08004394 	.word	0x08004394
 8004328:	08004398 	.word	0x08004398

0800432c <memset>:
 800432c:	4603      	mov	r3, r0
 800432e:	4402      	add	r2, r0
 8004330:	4293      	cmp	r3, r2
 8004332:	d100      	bne.n	8004336 <memset+0xa>
 8004334:	4770      	bx	lr
 8004336:	f803 1b01 	strb.w	r1, [r3], #1
 800433a:	e7f9      	b.n	8004330 <memset+0x4>

0800433c <_init>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	bf00      	nop
 8004340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004342:	bc08      	pop	{r3}
 8004344:	469e      	mov	lr, r3
 8004346:	4770      	bx	lr

08004348 <_fini>:
 8004348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434a:	bf00      	nop
 800434c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434e:	bc08      	pop	{r3}
 8004350:	469e      	mov	lr, r3
 8004352:	4770      	bx	lr
